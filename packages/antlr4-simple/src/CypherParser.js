// Generated from src/Cypher.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CypherListener from './CypherListener.js';
const serializedATN = [4,1,170,2695,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,1,0,5,0,412,8,0,10,0,12,0,415,9,0,1,
0,3,0,418,8,0,1,1,1,1,1,1,5,1,423,8,1,10,1,12,1,426,9,1,1,1,3,1,429,8,1,
1,1,1,1,1,2,3,2,434,8,2,1,2,1,2,3,2,438,8,2,1,2,3,2,441,8,2,1,3,1,3,1,3,
3,3,446,8,3,1,4,1,4,1,4,1,4,5,4,452,8,4,10,4,12,4,455,9,4,1,5,1,5,1,5,5,
5,460,8,5,10,5,12,5,463,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
475,8,6,1,7,1,7,3,7,479,8,7,1,7,1,7,3,7,483,8,7,1,7,1,7,1,8,1,8,1,9,1,9,
1,9,3,9,492,8,9,1,9,1,9,1,9,3,9,497,8,9,1,9,1,9,3,9,501,8,9,1,9,3,9,504,
8,9,1,9,3,9,507,8,9,1,10,1,10,1,11,3,11,512,8,11,1,11,1,11,3,11,516,8,11,
1,12,1,12,1,12,5,12,521,8,12,10,12,12,12,524,9,12,1,13,1,13,1,13,1,13,1,
13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,5,15,539,8,15,10,15,12,15,542,
9,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,
20,1,20,1,21,1,21,1,21,5,21,562,8,21,10,21,12,21,565,9,21,1,22,1,22,1,22,
1,22,1,22,3,22,572,8,22,3,22,574,8,22,1,23,1,23,3,23,578,8,23,1,23,5,23,
581,8,23,10,23,12,23,584,9,23,1,24,4,24,587,8,24,11,24,12,24,588,1,25,1,
25,1,26,1,26,3,26,595,8,26,1,26,1,26,3,26,599,8,26,1,26,1,26,3,26,603,8,
26,1,26,1,26,3,26,607,8,26,5,26,609,8,26,10,26,12,26,612,9,26,1,26,1,26,
1,26,1,26,3,26,618,8,26,1,26,3,26,621,8,26,1,27,1,27,3,27,625,8,27,1,27,
1,27,3,27,629,8,27,1,27,1,27,1,28,1,28,3,28,635,8,28,1,28,1,28,3,28,639,
8,28,1,28,1,28,3,28,643,8,28,1,28,1,28,3,28,647,8,28,5,28,649,8,28,10,28,
12,28,652,9,28,1,28,1,28,1,28,1,28,3,28,658,8,28,1,28,3,28,661,8,28,1,29,
1,29,1,29,1,29,1,29,1,29,3,29,669,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
3,30,678,8,30,1,31,1,31,1,31,3,31,683,8,31,4,31,685,8,31,11,31,12,31,686,
1,31,3,31,690,8,31,1,32,1,32,1,32,5,32,695,8,32,10,32,12,32,698,9,32,1,33,
1,33,1,33,1,34,1,34,3,34,705,8,34,5,34,707,8,34,10,34,12,34,710,9,34,1,35,
1,35,1,35,3,35,715,8,35,1,36,1,36,1,36,3,36,720,8,36,1,36,1,36,5,36,724,
8,36,10,36,12,36,727,9,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,3,40,737,
8,40,1,40,1,40,3,40,741,8,40,1,40,1,40,1,41,1,41,3,41,747,8,41,1,42,1,42,
3,42,751,8,42,1,43,1,43,3,43,755,8,43,1,43,5,43,758,8,43,10,43,12,43,761,
9,43,1,44,1,44,3,44,765,8,44,1,44,1,44,1,45,1,45,3,45,771,8,45,1,45,5,45,
774,8,45,10,45,12,45,777,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,786,
8,46,1,47,1,47,3,47,790,8,47,1,47,5,47,793,8,47,10,47,12,47,796,9,47,1,48,
1,48,1,48,1,48,3,48,802,8,48,1,48,1,48,1,48,3,48,807,8,48,1,48,3,48,810,
8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
49,3,49,826,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,
838,8,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,
1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,
57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,
1,61,1,61,3,61,884,8,61,1,61,1,61,3,61,888,8,61,1,61,1,61,3,61,892,8,61,
1,61,1,61,3,61,896,8,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,904,8,62,1,62,
1,62,3,62,908,8,62,1,62,1,62,1,62,3,62,913,8,62,1,62,1,62,3,62,917,8,62,
1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,3,63,931,8,63,
1,63,1,63,3,63,935,8,63,1,63,1,63,1,63,3,63,940,8,63,1,63,1,63,3,63,944,
8,63,1,63,1,63,1,63,1,63,3,63,950,8,63,1,63,1,63,3,63,954,8,63,1,63,1,63,
1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,3,64,968,8,64,1,64,1,64,
1,64,1,64,1,64,3,64,975,8,64,1,64,1,64,1,64,1,64,3,64,981,8,64,1,64,1,64,
1,64,1,64,1,65,1,65,1,65,1,65,3,65,991,8,65,1,65,1,65,3,65,995,8,65,1,65,
1,65,1,65,1,65,3,65,1001,8,65,1,65,1,65,1,65,1,65,1,66,1,66,3,66,1009,8,
66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1020,8,66,1,66,1,66,
1,66,1,66,3,66,1026,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
66,3,66,1038,8,66,1,66,1,66,1,66,1,66,3,66,1044,8,66,1,66,1,66,1,66,1,66,
1,66,1,66,1,66,1,66,1,66,1,66,3,66,1056,8,66,1,66,1,66,3,66,1060,8,66,1,
67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1070,8,67,1,67,1,67,1,67,1,67,
1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1083,8,67,1,68,1,68,3,68,1087,8,
68,1,68,1,68,3,68,1091,8,68,1,68,1,68,5,68,1095,8,68,10,68,12,68,1098,9,
68,1,68,3,68,1101,8,68,1,68,3,68,1104,8,68,1,69,1,69,3,69,1108,8,69,1,69,
1,69,1,69,1,69,1,69,1,69,1,70,1,70,3,70,1118,8,70,1,70,1,70,1,70,5,70,1123,
8,70,10,70,12,70,1126,9,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
1,71,3,71,1138,8,71,1,72,1,72,3,72,1142,8,72,1,72,1,72,1,73,1,73,1,73,1,
73,3,73,1150,8,73,1,73,1,73,1,74,1,74,3,74,1156,8,74,1,74,1,74,3,74,1160,
8,74,1,74,1,74,3,74,1164,8,74,1,74,5,74,1167,8,74,10,74,12,74,1170,9,74,
1,75,1,75,3,75,1174,8,75,1,75,1,75,3,75,1178,8,75,1,75,1,75,1,75,1,75,3,
75,1184,8,75,1,75,1,75,3,75,1188,8,75,1,75,1,75,1,75,1,75,3,75,1194,8,75,
1,75,1,75,3,75,1198,8,75,1,75,1,75,1,75,1,75,3,75,1204,8,75,1,75,1,75,3,
75,1208,8,75,1,76,1,76,3,76,1212,8,76,1,76,1,76,3,76,1216,8,76,1,76,1,76,
3,76,1220,8,76,1,76,1,76,3,76,1224,8,76,1,76,5,76,1227,8,76,10,76,12,76,
1230,9,76,1,77,1,77,1,77,1,77,3,77,1236,8,77,1,77,1,77,3,77,1240,8,77,1,
77,5,77,1243,8,77,10,77,12,77,1246,9,77,1,78,1,78,1,78,1,78,3,78,1252,8,
78,1,79,1,79,3,79,1256,8,79,1,79,1,79,3,79,1260,8,79,1,79,1,79,1,79,1,79,
1,79,1,79,3,79,1268,8,79,1,79,1,79,1,79,4,79,1273,8,79,11,79,12,79,1274,
1,79,3,79,1278,8,79,1,79,1,79,1,80,1,80,3,80,1284,8,80,1,80,3,80,1287,8,
80,1,80,1,80,1,80,3,80,1292,8,80,1,80,3,80,1295,8,80,1,81,1,81,3,81,1299,
8,81,1,81,3,81,1302,8,81,1,81,3,81,1305,8,81,1,81,1,81,1,82,1,82,1,82,3,
82,1312,8,82,1,82,1,82,3,82,1316,8,82,1,82,1,82,3,82,1320,8,82,1,83,1,83,
3,83,1324,8,83,1,83,3,83,1327,8,83,1,84,1,84,3,84,1331,8,84,1,84,1,84,3,
84,1335,8,84,1,84,5,84,1338,8,84,10,84,12,84,1341,9,84,1,84,1,84,3,84,1345,
8,84,1,84,1,84,3,84,1349,8,84,1,84,5,84,1352,8,84,10,84,12,84,1355,9,84,
1,84,3,84,1358,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1367,8,85,1,
86,1,86,1,86,1,86,3,86,1373,8,86,1,86,3,86,1376,8,86,1,87,1,87,3,87,1380,
8,87,1,87,3,87,1383,8,87,1,88,1,88,1,88,1,89,1,89,3,89,1390,8,89,1,89,3,
89,1393,8,89,1,89,3,89,1396,8,89,1,89,1,89,3,89,1400,8,89,1,89,5,89,1403,
8,89,10,89,12,89,1406,9,89,1,89,3,89,1409,8,89,1,89,1,89,1,90,1,90,1,90,
1,90,3,90,1417,8,90,1,90,1,90,3,90,1421,8,90,1,90,5,90,1424,8,90,10,90,12,
90,1427,9,90,1,90,1,90,3,90,1431,8,90,1,91,1,91,3,91,1435,8,91,1,92,1,92,
1,92,1,92,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,3,
95,1453,8,95,1,95,1,95,3,95,1457,8,95,1,95,5,95,1460,8,95,10,95,12,95,1463,
9,95,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,3,98,1475,8,98,1,
98,1,98,3,98,1479,8,98,3,98,1481,8,98,1,99,3,99,1484,8,99,1,99,1,99,1,99,
1,99,1,99,1,99,1,99,3,99,1493,8,99,1,99,1,99,3,99,1497,8,99,1,99,1,99,3,
99,1501,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1513,
8,99,1,99,1,99,3,99,1517,8,99,1,99,5,99,1520,8,99,10,99,12,99,1523,9,99,
1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1532,8,99,1,100,1,100,1,100,1,100,
3,100,1538,8,100,1,100,1,100,3,100,1542,8,100,1,100,5,100,1545,8,100,10,
100,12,100,1548,9,100,1,100,3,100,1551,8,100,1,101,1,101,3,101,1555,8,101,
1,101,1,101,3,101,1559,8,101,1,101,1,101,1,102,1,102,3,102,1565,8,102,1,
103,1,103,3,103,1569,8,103,1,103,1,103,1,103,3,103,1574,8,103,1,104,1,104,
1,104,1,104,3,104,1580,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,
105,1589,8,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,3,106,1598,8,106,
1,106,1,106,1,107,1,107,1,107,1,107,3,107,1606,8,107,1,107,1,107,1,108,1,
108,3,108,1612,8,108,1,108,1,108,3,108,1616,8,108,1,108,5,108,1619,8,108,
10,108,12,108,1622,9,108,1,109,1,109,1,109,1,109,1,110,1,110,3,110,1630,
8,110,1,110,1,110,3,110,1634,8,110,1,110,5,110,1637,8,110,10,110,12,110,
1640,9,110,1,111,1,111,3,111,1644,8,111,1,111,1,111,3,111,1648,8,111,1,111,
1,111,1,111,3,111,1653,8,111,1,112,1,112,3,112,1657,8,112,1,113,1,113,3,
113,1661,8,113,1,113,5,113,1664,8,113,10,113,12,113,1667,9,113,1,113,1,113,
1,113,1,113,3,113,1673,8,113,1,114,1,114,3,114,1677,8,114,1,114,1,114,3,
114,1681,8,114,3,114,1683,8,114,1,114,1,114,3,114,1687,8,114,3,114,1689,
8,114,1,114,1,114,3,114,1693,8,114,3,114,1695,8,114,1,114,1,114,1,115,1,
115,3,115,1701,8,115,1,115,1,115,1,116,1,116,3,116,1707,8,116,1,116,3,116,
1710,8,116,1,116,3,116,1713,8,116,1,116,1,116,1,117,1,117,3,117,1719,8,117,
1,117,1,117,1,117,3,117,1724,8,117,1,118,1,118,3,118,1728,8,118,1,118,1,
118,1,118,3,118,1733,8,118,1,119,1,119,3,119,1737,8,119,1,119,1,119,3,119,
1741,8,119,3,119,1743,8,119,1,119,1,119,3,119,1747,8,119,3,119,1749,8,119,
1,119,3,119,1752,8,119,1,119,1,119,3,119,1756,8,119,3,119,1758,8,119,1,119,
1,119,1,120,1,120,3,120,1764,8,120,1,121,1,121,3,121,1768,8,121,1,121,1,
121,1,122,1,122,3,122,1774,8,122,1,122,1,122,5,122,1778,8,122,10,122,12,
122,1781,9,122,1,123,1,123,1,123,1,124,3,124,1787,8,124,1,124,1,124,1,125,
1,125,3,125,1793,8,125,1,125,5,125,1796,8,125,10,125,12,125,1799,9,125,1,
126,1,126,1,126,1,127,1,127,3,127,1806,8,127,1,127,1,127,3,127,1810,8,127,
3,127,1812,8,127,1,127,1,127,3,127,1816,8,127,1,127,1,127,3,127,1820,8,127,
3,127,1822,8,127,3,127,1824,8,127,1,128,1,128,1,129,1,129,1,130,1,130,1,
131,1,131,1,131,1,131,1,131,5,131,1837,8,131,10,131,12,131,1840,9,131,1,
132,1,132,1,132,1,132,1,132,5,132,1847,8,132,10,132,12,132,1850,9,132,1,
133,1,133,1,133,1,133,1,133,5,133,1857,8,133,10,133,12,133,1860,9,133,1,
134,1,134,3,134,1864,8,134,5,134,1866,8,134,10,134,12,134,1869,9,134,1,134,
1,134,1,135,1,135,3,135,1875,8,135,1,135,5,135,1878,8,135,10,135,12,135,
1881,9,135,1,136,1,136,3,136,1885,8,136,1,136,1,136,3,136,1889,8,136,1,136,
1,136,3,136,1893,8,136,1,136,1,136,3,136,1897,8,136,1,136,5,136,1900,8,136,
10,136,12,136,1903,9,136,1,137,1,137,3,137,1907,8,137,1,137,1,137,3,137,
1911,8,137,1,137,1,137,3,137,1915,8,137,1,137,1,137,3,137,1919,8,137,1,137,
1,137,3,137,1923,8,137,1,137,1,137,3,137,1927,8,137,1,137,5,137,1930,8,137,
10,137,12,137,1933,9,137,1,138,1,138,3,138,1937,8,138,1,138,1,138,3,138,
1941,8,138,1,138,5,138,1944,8,138,10,138,12,138,1947,9,138,1,139,1,139,3,
139,1951,8,139,5,139,1953,8,139,10,139,12,139,1956,9,139,1,139,1,139,1,140,
1,140,3,140,1962,8,140,1,140,1,140,1,140,1,140,1,140,3,140,1969,8,140,1,
140,1,140,3,140,1973,8,140,1,140,1,140,3,140,1977,8,140,1,140,1,140,3,140,
1981,8,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,
140,1,140,1,140,3,140,1996,8,140,1,140,3,140,1999,8,140,1,140,1,140,1,140,
1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,5,140,2012,8,140,10,140,
12,140,2015,9,140,1,141,1,141,3,141,2019,8,141,1,141,1,141,3,141,2023,8,
141,5,141,2025,8,141,10,141,12,141,2028,9,141,1,142,1,142,3,142,2032,8,142,
1,142,1,142,3,142,2036,8,142,1,142,1,142,3,142,2040,8,142,1,142,1,142,1,
143,1,143,1,144,1,144,3,144,2048,8,144,1,144,1,144,3,144,2052,8,144,1,144,
1,144,3,144,2056,8,144,1,144,1,144,1,145,1,145,1,146,1,146,3,146,2064,8,
146,1,146,1,146,3,146,2068,8,146,1,146,1,146,3,146,2072,8,146,1,146,1,146,
1,147,1,147,1,148,1,148,3,148,2080,8,148,1,148,1,148,3,148,2084,8,148,1,
148,1,148,3,148,2088,8,148,1,148,1,148,1,149,1,149,1,150,1,150,3,150,2096,
8,150,1,150,1,150,3,150,2100,8,150,1,150,1,150,3,150,2104,8,150,1,150,1,
150,1,151,1,151,1,152,1,152,3,152,2112,8,152,1,152,1,152,3,152,2116,8,152,
1,152,1,152,3,152,2120,8,152,1,152,1,152,1,153,1,153,1,154,1,154,3,154,2128,
8,154,1,154,1,154,3,154,2132,8,154,1,154,1,154,3,154,2136,8,154,1,154,1,
154,3,154,2140,8,154,1,154,3,154,2143,8,154,1,154,3,154,2146,8,154,1,154,
1,154,1,155,1,155,1,156,1,156,3,156,2154,8,156,1,156,1,156,3,156,2158,8,
156,1,156,1,156,3,156,2162,8,156,1,156,1,156,3,156,2166,8,156,1,156,1,156,
3,156,2170,8,156,1,156,1,156,3,156,2174,8,156,1,156,1,156,3,156,2178,8,156,
1,156,1,156,3,156,2182,8,156,1,156,1,156,3,156,2186,8,156,1,156,1,156,1,
157,1,157,1,158,1,158,3,158,2194,8,158,1,158,1,158,3,158,2198,8,158,1,158,
1,158,3,158,2202,8,158,1,158,1,158,1,158,1,158,3,158,2208,8,158,1,158,1,
158,3,158,2212,8,158,1,158,1,158,3,158,2216,8,158,1,158,1,158,3,158,2220,
8,158,1,159,1,159,1,160,1,160,1,161,1,161,1,161,1,161,1,161,3,161,2231,8,
161,1,161,1,161,3,161,2235,8,161,1,161,1,161,3,161,2239,8,161,1,161,1,161,
1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
1,161,1,161,3,161,2257,8,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,3,
162,2266,8,162,1,163,1,163,1,164,1,164,1,165,1,165,3,165,2274,8,165,1,165,
1,165,3,165,2278,8,165,1,165,1,165,3,165,2282,8,165,1,165,1,165,3,165,2286,
8,165,5,165,2288,8,165,10,165,12,165,2291,9,165,3,165,2293,8,165,1,165,1,
165,1,166,1,166,3,166,2299,8,166,1,166,1,166,1,166,3,166,2304,8,166,1,166,
1,166,1,166,3,166,2309,8,166,1,166,1,166,1,166,3,166,2314,8,166,1,166,1,
166,1,166,3,166,2319,8,166,1,166,1,166,1,166,3,166,2324,8,166,1,166,1,166,
1,166,3,166,2329,8,166,1,166,3,166,2332,8,166,1,167,1,167,3,167,2336,8,167,
1,167,1,167,3,167,2340,8,167,1,167,1,167,1,168,1,168,3,168,2346,8,168,1,
168,4,168,2349,8,168,11,168,12,168,2350,1,169,1,169,3,169,2355,8,169,1,169,
3,169,2358,8,169,1,170,1,170,1,170,1,170,1,170,1,170,1,171,1,171,3,171,2368,
8,171,1,171,1,171,3,171,2372,8,171,1,171,1,171,3,171,2376,8,171,3,171,2378,
8,171,1,171,1,171,3,171,2382,8,171,1,171,1,171,3,171,2386,8,171,1,171,1,
171,3,171,2390,8,171,5,171,2392,8,171,10,171,12,171,2395,9,171,3,171,2397,
8,171,1,171,1,171,1,172,1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,
3,175,2410,8,175,1,175,1,175,3,175,2414,8,175,1,175,1,175,3,175,2418,8,175,
1,175,3,175,2421,8,175,1,175,3,175,2424,8,175,1,175,1,175,1,176,1,176,3,
176,2430,8,176,1,176,1,176,3,176,2434,8,176,1,176,1,176,3,176,2438,8,176,
3,176,2440,8,176,1,176,1,176,3,176,2444,8,176,1,176,1,176,3,176,2448,8,176,
1,176,1,176,3,176,2452,8,176,3,176,2454,8,176,1,176,1,176,3,176,2458,8,176,
1,176,1,176,3,176,2462,8,176,1,176,1,176,1,177,1,177,3,177,2468,8,177,1,
177,1,177,1,178,1,178,3,178,2474,8,178,1,178,4,178,2477,8,178,11,178,12,
178,2478,1,178,1,178,3,178,2483,8,178,1,178,1,178,3,178,2487,8,178,1,178,
4,178,2490,8,178,11,178,12,178,2491,3,178,2494,8,178,1,178,3,178,2497,8,
178,1,178,1,178,3,178,2501,8,178,1,178,3,178,2504,8,178,1,178,3,178,2507,
8,178,1,178,1,178,1,179,1,179,3,179,2513,8,179,1,179,1,179,3,179,2517,8,
179,1,179,1,179,3,179,2521,8,179,1,179,1,179,1,180,1,180,1,181,1,181,3,181,
2529,8,181,1,182,1,182,3,182,2533,8,182,1,182,1,182,3,182,2537,8,182,1,182,
1,182,3,182,2541,8,182,1,182,1,182,3,182,2545,8,182,5,182,2547,8,182,10,
182,12,182,2550,9,182,3,182,2552,8,182,1,182,1,182,1,183,1,183,3,183,2558,
8,183,1,183,1,183,3,183,2562,8,183,1,183,3,183,2565,8,183,1,183,3,183,2568,
8,183,1,183,1,183,3,183,2572,8,183,1,183,5,183,2575,8,183,10,183,12,183,
2578,9,183,1,183,3,183,2581,8,183,1,183,1,183,1,184,1,184,1,184,1,184,3,
184,2589,8,184,1,185,1,185,3,185,2593,8,185,1,185,1,185,3,185,2597,8,185,
1,185,1,185,1,186,1,186,1,186,1,187,1,187,1,188,1,188,1,188,1,189,1,189,
3,189,2611,8,189,1,190,1,190,3,190,2615,8,190,1,190,1,190,3,190,2619,8,190,
1,190,1,190,1,191,1,191,1,191,1,192,1,192,3,192,2628,8,192,1,193,1,193,3,
193,2632,8,193,1,193,1,193,3,193,2636,8,193,1,193,5,193,2639,8,193,10,193,
12,193,2642,9,193,1,194,1,194,3,194,2646,8,194,1,194,4,194,2649,8,194,11,
194,12,194,2650,1,195,1,195,3,195,2655,8,195,1,195,1,195,3,195,2659,8,195,
1,195,5,195,2662,8,195,10,195,12,195,2665,9,195,1,196,1,196,1,197,1,197,
1,198,1,198,1,199,1,199,1,199,5,199,2676,8,199,10,199,12,199,2679,9,199,
1,200,1,200,1,201,1,201,1,202,1,202,1,203,1,203,1,203,1,203,3,203,2691,8,
203,1,204,1,204,1,204,2,413,582,0,205,0,2,4,6,8,10,12,14,16,18,20,22,24,
26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,
406,408,0,12,2,0,7,7,13,13,1,0,94,97,1,0,102,103,2,0,3,3,13,13,1,0,121,122,
3,0,115,115,163,163,166,166,1,0,151,153,1,0,161,162,2,0,30,30,35,38,2,0,
31,31,39,42,2,0,3,3,43,53,1,0,54,147,2993,0,417,1,0,0,0,2,419,1,0,0,0,4,
433,1,0,0,0,6,442,1,0,0,0,8,447,1,0,0,0,10,456,1,0,0,0,12,474,1,0,0,0,14,
476,1,0,0,0,16,486,1,0,0,0,18,488,1,0,0,0,20,508,1,0,0,0,22,511,1,0,0,0,
24,517,1,0,0,0,26,525,1,0,0,0,28,533,1,0,0,0,30,535,1,0,0,0,32,543,1,0,0,
0,34,545,1,0,0,0,36,550,1,0,0,0,38,552,1,0,0,0,40,555,1,0,0,0,42,558,1,0,
0,0,44,566,1,0,0,0,46,575,1,0,0,0,48,586,1,0,0,0,50,590,1,0,0,0,52,620,1,
0,0,0,54,622,1,0,0,0,56,660,1,0,0,0,58,668,1,0,0,0,60,670,1,0,0,0,62,684,
1,0,0,0,64,691,1,0,0,0,66,699,1,0,0,0,68,708,1,0,0,0,70,714,1,0,0,0,72,716,
1,0,0,0,74,728,1,0,0,0,76,730,1,0,0,0,78,732,1,0,0,0,80,734,1,0,0,0,82,746,
1,0,0,0,84,750,1,0,0,0,86,752,1,0,0,0,88,762,1,0,0,0,90,768,1,0,0,0,92,778,
1,0,0,0,94,787,1,0,0,0,96,809,1,0,0,0,98,825,1,0,0,0,100,837,1,0,0,0,102,
839,1,0,0,0,104,843,1,0,0,0,106,847,1,0,0,0,108,851,1,0,0,0,110,855,1,0,
0,0,112,859,1,0,0,0,114,863,1,0,0,0,116,867,1,0,0,0,118,871,1,0,0,0,120,
875,1,0,0,0,122,879,1,0,0,0,124,899,1,0,0,0,126,926,1,0,0,0,128,963,1,0,
0,0,130,986,1,0,0,0,132,1059,1,0,0,0,134,1061,1,0,0,0,136,1086,1,0,0,0,138,
1105,1,0,0,0,140,1115,1,0,0,0,142,1137,1,0,0,0,144,1139,1,0,0,0,146,1145,
1,0,0,0,148,1153,1,0,0,0,150,1207,1,0,0,0,152,1211,1,0,0,0,154,1231,1,0,
0,0,156,1251,1,0,0,0,158,1253,1,0,0,0,160,1281,1,0,0,0,162,1296,1,0,0,0,
164,1308,1,0,0,0,166,1321,1,0,0,0,168,1357,1,0,0,0,170,1366,1,0,0,0,172,
1368,1,0,0,0,174,1377,1,0,0,0,176,1384,1,0,0,0,178,1387,1,0,0,0,180,1412,
1,0,0,0,182,1434,1,0,0,0,184,1436,1,0,0,0,186,1442,1,0,0,0,188,1444,1,0,
0,0,190,1446,1,0,0,0,192,1464,1,0,0,0,194,1468,1,0,0,0,196,1472,1,0,0,0,
198,1483,1,0,0,0,200,1533,1,0,0,0,202,1552,1,0,0,0,204,1564,1,0,0,0,206,
1566,1,0,0,0,208,1575,1,0,0,0,210,1581,1,0,0,0,212,1592,1,0,0,0,214,1601,
1,0,0,0,216,1609,1,0,0,0,218,1623,1,0,0,0,220,1627,1,0,0,0,222,1652,1,0,
0,0,224,1656,1,0,0,0,226,1672,1,0,0,0,228,1674,1,0,0,0,230,1698,1,0,0,0,
232,1704,1,0,0,0,234,1723,1,0,0,0,236,1732,1,0,0,0,238,1734,1,0,0,0,240,
1763,1,0,0,0,242,1765,1,0,0,0,244,1771,1,0,0,0,246,1782,1,0,0,0,248,1786,
1,0,0,0,250,1790,1,0,0,0,252,1800,1,0,0,0,254,1803,1,0,0,0,256,1825,1,0,
0,0,258,1827,1,0,0,0,260,1829,1,0,0,0,262,1831,1,0,0,0,264,1841,1,0,0,0,
266,1851,1,0,0,0,268,1867,1,0,0,0,270,1872,1,0,0,0,272,1882,1,0,0,0,274,
1904,1,0,0,0,276,1934,1,0,0,0,278,1954,1,0,0,0,280,1959,1,0,0,0,282,2016,
1,0,0,0,284,2029,1,0,0,0,286,2043,1,0,0,0,288,2045,1,0,0,0,290,2059,1,0,
0,0,292,2061,1,0,0,0,294,2075,1,0,0,0,296,2077,1,0,0,0,298,2091,1,0,0,0,
300,2093,1,0,0,0,302,2107,1,0,0,0,304,2109,1,0,0,0,306,2123,1,0,0,0,308,
2125,1,0,0,0,310,2149,1,0,0,0,312,2151,1,0,0,0,314,2189,1,0,0,0,316,2219,
1,0,0,0,318,2221,1,0,0,0,320,2223,1,0,0,0,322,2256,1,0,0,0,324,2265,1,0,
0,0,326,2267,1,0,0,0,328,2269,1,0,0,0,330,2271,1,0,0,0,332,2331,1,0,0,0,
334,2333,1,0,0,0,336,2343,1,0,0,0,338,2352,1,0,0,0,340,2359,1,0,0,0,342,
2365,1,0,0,0,344,2400,1,0,0,0,346,2403,1,0,0,0,348,2405,1,0,0,0,350,2407,
1,0,0,0,352,2427,1,0,0,0,354,2465,1,0,0,0,356,2493,1,0,0,0,358,2510,1,0,
0,0,360,2524,1,0,0,0,362,2528,1,0,0,0,364,2530,1,0,0,0,366,2555,1,0,0,0,
368,2588,1,0,0,0,370,2590,1,0,0,0,372,2600,1,0,0,0,374,2603,1,0,0,0,376,
2605,1,0,0,0,378,2610,1,0,0,0,380,2612,1,0,0,0,382,2622,1,0,0,0,384,2627,
1,0,0,0,386,2629,1,0,0,0,388,2643,1,0,0,0,390,2652,1,0,0,0,392,2666,1,0,
0,0,394,2668,1,0,0,0,396,2670,1,0,0,0,398,2677,1,0,0,0,400,2680,1,0,0,0,
402,2682,1,0,0,0,404,2684,1,0,0,0,406,2690,1,0,0,0,408,2692,1,0,0,0,410,
412,9,0,0,0,411,410,1,0,0,0,412,415,1,0,0,0,413,414,1,0,0,0,413,411,1,0,
0,0,414,418,1,0,0,0,415,413,1,0,0,0,416,418,3,4,2,0,417,413,1,0,0,0,417,
416,1,0,0,0,418,1,1,0,0,0,419,424,3,0,0,0,420,421,5,1,0,0,421,423,3,0,0,
0,422,420,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,428,
1,0,0,0,426,424,1,0,0,0,427,429,5,1,0,0,428,427,1,0,0,0,428,429,1,0,0,0,
429,430,1,0,0,0,430,431,5,0,0,1,431,3,1,0,0,0,432,434,5,167,0,0,433,432,
1,0,0,0,433,434,1,0,0,0,434,437,1,0,0,0,435,438,3,66,33,0,436,438,3,6,3,
0,437,435,1,0,0,0,437,436,1,0,0,0,438,440,1,0,0,0,439,441,5,167,0,0,440,
439,1,0,0,0,440,441,1,0,0,0,441,5,1,0,0,0,442,445,3,8,4,0,443,444,5,167,
0,0,444,446,3,10,5,0,445,443,1,0,0,0,445,446,1,0,0,0,446,7,1,0,0,0,447,448,
5,2,0,0,448,453,3,406,203,0,449,450,5,3,0,0,450,452,3,406,203,0,451,449,
1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,9,1,0,0,0,455,
453,1,0,0,0,456,461,3,12,6,0,457,458,5,167,0,0,458,460,3,12,6,0,459,457,
1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,11,1,0,0,0,463,
461,1,0,0,0,464,475,3,16,8,0,465,475,3,50,25,0,466,475,3,14,7,0,467,475,
3,364,182,0,468,475,3,60,30,0,469,475,3,326,163,0,470,475,3,362,181,0,471,
475,3,328,164,0,472,475,3,64,32,0,473,475,3,62,31,0,474,464,1,0,0,0,474,
465,1,0,0,0,474,466,1,0,0,0,474,467,1,0,0,0,474,468,1,0,0,0,474,469,1,0,
0,0,474,470,1,0,0,0,474,471,1,0,0,0,474,472,1,0,0,0,474,473,1,0,0,0,475,
13,1,0,0,0,476,478,3,406,203,0,477,479,5,167,0,0,478,477,1,0,0,0,478,479,
1,0,0,0,479,480,1,0,0,0,480,482,5,4,0,0,481,483,5,167,0,0,482,481,1,0,0,
0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,3,260,130,0,485,15,1,0,0,0,486,
487,3,18,9,0,487,17,1,0,0,0,488,489,3,20,10,0,489,491,5,5,0,0,490,492,3,
34,17,0,491,490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,496,3,22,11,
0,494,495,5,2,0,0,495,497,3,28,14,0,496,494,1,0,0,0,496,497,1,0,0,0,497,
500,1,0,0,0,498,499,5,6,0,0,499,501,3,30,15,0,500,498,1,0,0,0,500,501,1,
0,0,0,501,503,1,0,0,0,502,504,3,40,20,0,503,502,1,0,0,0,503,504,1,0,0,0,
504,506,1,0,0,0,505,507,3,38,19,0,506,505,1,0,0,0,506,507,1,0,0,0,507,19,
1,0,0,0,508,509,3,46,23,0,509,21,1,0,0,0,510,512,5,6,0,0,511,510,1,0,0,0,
511,512,1,0,0,0,512,515,1,0,0,0,513,516,3,24,12,0,514,516,3,26,13,0,515,
513,1,0,0,0,515,514,1,0,0,0,516,23,1,0,0,0,517,522,3,46,23,0,518,519,5,7,
0,0,519,521,3,46,23,0,520,518,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,
523,1,0,0,0,523,25,1,0,0,0,524,522,1,0,0,0,525,526,3,48,24,0,526,527,5,7,
0,0,527,528,3,48,24,0,528,529,5,7,0,0,529,530,3,48,24,0,530,531,5,7,0,0,
531,532,3,48,24,0,532,27,1,0,0,0,533,534,3,48,24,0,534,29,1,0,0,0,535,540,
3,46,23,0,536,537,5,6,0,0,537,539,3,46,23,0,538,536,1,0,0,0,539,542,1,0,
0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,31,1,0,0,0,542,540,1,0,0,0,543,544,
3,46,23,0,544,33,1,0,0,0,545,546,3,32,16,0,546,547,5,2,0,0,547,548,3,36,
18,0,548,549,5,8,0,0,549,35,1,0,0,0,550,551,3,46,23,0,551,37,1,0,0,0,552,
553,5,9,0,0,553,554,3,46,23,0,554,39,1,0,0,0,555,556,5,10,0,0,556,557,3,
42,21,0,557,41,1,0,0,0,558,563,3,44,22,0,559,560,5,11,0,0,560,562,3,44,22,
0,561,559,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,43,
1,0,0,0,565,563,1,0,0,0,566,573,3,46,23,0,567,571,5,12,0,0,568,572,3,46,
23,0,569,572,3,48,24,0,570,572,5,149,0,0,571,568,1,0,0,0,571,569,1,0,0,0,
571,570,1,0,0,0,572,574,1,0,0,0,573,567,1,0,0,0,573,574,1,0,0,0,574,45,1,
0,0,0,575,582,3,406,203,0,576,578,7,0,0,0,577,576,1,0,0,0,577,578,1,0,0,
0,578,579,1,0,0,0,579,581,3,406,203,0,580,577,1,0,0,0,581,584,1,0,0,0,582,
583,1,0,0,0,582,580,1,0,0,0,583,47,1,0,0,0,584,582,1,0,0,0,585,587,3,394,
197,0,586,585,1,0,0,0,587,588,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,
49,1,0,0,0,590,591,3,58,29,0,591,51,1,0,0,0,592,594,5,14,0,0,593,595,5,167,
0,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,3,54,27,0,597,
599,5,167,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,610,1,0,0,0,600,602,5,
15,0,0,601,603,5,167,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,
604,606,3,54,27,0,605,607,5,167,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,
609,1,0,0,0,608,600,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,
0,0,611,613,1,0,0,0,612,610,1,0,0,0,613,614,5,16,0,0,614,621,1,0,0,0,615,
617,5,14,0,0,616,618,5,167,0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,
0,0,0,619,621,5,16,0,0,620,592,1,0,0,0,620,615,1,0,0,0,621,53,1,0,0,0,622,
624,3,326,163,0,623,625,5,167,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,626,
1,0,0,0,626,628,5,2,0,0,627,629,5,167,0,0,628,627,1,0,0,0,628,629,1,0,0,
0,629,630,1,0,0,0,630,631,3,58,29,0,631,55,1,0,0,0,632,634,5,17,0,0,633,
635,5,167,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,638,3,
58,29,0,637,639,5,167,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,650,1,0,0,
0,640,642,5,15,0,0,641,643,5,167,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,
644,1,0,0,0,644,646,3,58,29,0,645,647,5,167,0,0,646,645,1,0,0,0,646,647,
1,0,0,0,647,649,1,0,0,0,648,640,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,
650,651,1,0,0,0,651,653,1,0,0,0,652,650,1,0,0,0,653,654,5,18,0,0,654,661,
1,0,0,0,655,657,5,17,0,0,656,658,5,167,0,0,657,656,1,0,0,0,657,658,1,0,0,
0,658,659,1,0,0,0,659,661,5,18,0,0,660,632,1,0,0,0,660,655,1,0,0,0,661,57,
1,0,0,0,662,669,3,326,163,0,663,669,3,362,181,0,664,669,3,52,26,0,665,669,
3,56,28,0,666,669,3,328,164,0,667,669,5,114,0,0,668,662,1,0,0,0,668,663,
1,0,0,0,668,664,1,0,0,0,668,665,1,0,0,0,668,666,1,0,0,0,668,667,1,0,0,0,
669,59,1,0,0,0,670,671,3,360,180,0,671,672,5,2,0,0,672,677,5,167,0,0,673,
678,5,148,0,0,674,678,3,362,181,0,675,678,3,328,164,0,676,678,3,406,203,
0,677,673,1,0,0,0,677,674,1,0,0,0,677,675,1,0,0,0,677,676,1,0,0,0,678,61,
1,0,0,0,679,682,5,6,0,0,680,683,3,406,203,0,681,683,3,362,181,0,682,680,
1,0,0,0,682,681,1,0,0,0,683,685,1,0,0,0,684,679,1,0,0,0,685,686,1,0,0,0,
686,684,1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,690,5,6,0,0,689,688,
1,0,0,0,689,690,1,0,0,0,690,63,1,0,0,0,691,696,3,406,203,0,692,693,5,3,0,
0,693,695,3,406,203,0,694,692,1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,696,
697,1,0,0,0,697,65,1,0,0,0,698,696,1,0,0,0,699,700,3,68,34,0,700,701,3,82,
41,0,701,67,1,0,0,0,702,704,3,70,35,0,703,705,5,167,0,0,704,703,1,0,0,0,
704,705,1,0,0,0,705,707,1,0,0,0,706,702,1,0,0,0,707,710,1,0,0,0,708,706,
1,0,0,0,708,709,1,0,0,0,709,69,1,0,0,0,710,708,1,0,0,0,711,715,3,72,36,0,
712,715,3,76,38,0,713,715,3,78,39,0,714,711,1,0,0,0,714,712,1,0,0,0,714,
713,1,0,0,0,715,71,1,0,0,0,716,719,5,54,0,0,717,718,5,167,0,0,718,720,3,
74,37,0,719,717,1,0,0,0,719,720,1,0,0,0,720,725,1,0,0,0,721,722,5,167,0,
0,722,724,3,80,40,0,723,721,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,
726,1,0,0,0,726,73,1,0,0,0,727,725,1,0,0,0,728,729,5,162,0,0,729,75,1,0,
0,0,730,731,5,55,0,0,731,77,1,0,0,0,732,733,5,56,0,0,733,79,1,0,0,0,734,
736,3,406,203,0,735,737,5,167,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,
1,0,0,0,738,740,5,12,0,0,739,741,5,167,0,0,740,739,1,0,0,0,740,741,1,0,0,
0,741,742,1,0,0,0,742,743,3,406,203,0,743,81,1,0,0,0,744,747,3,100,50,0,
745,747,3,84,42,0,746,744,1,0,0,0,746,745,1,0,0,0,747,83,1,0,0,0,748,751,
3,86,43,0,749,751,3,88,44,0,750,748,1,0,0,0,750,749,1,0,0,0,751,85,1,0,0,
0,752,759,3,90,45,0,753,755,5,167,0,0,754,753,1,0,0,0,754,755,1,0,0,0,755,
756,1,0,0,0,756,758,3,96,48,0,757,754,1,0,0,0,758,761,1,0,0,0,759,757,1,
0,0,0,759,760,1,0,0,0,760,87,1,0,0,0,761,759,1,0,0,0,762,764,3,92,46,0,763,
765,5,167,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,3,
94,47,0,767,89,1,0,0,0,768,775,3,98,49,0,769,771,5,167,0,0,770,769,1,0,0,
0,770,771,1,0,0,0,771,772,1,0,0,0,772,774,3,98,49,0,773,770,1,0,0,0,774,
777,1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,91,1,0,0,0,777,775,1,0,0,
0,778,779,5,57,0,0,779,780,5,167,0,0,780,781,5,58,0,0,781,782,5,167,0,0,
782,785,5,59,0,0,783,784,5,167,0,0,784,786,3,394,197,0,785,783,1,0,0,0,785,
786,1,0,0,0,786,93,1,0,0,0,787,794,3,134,67,0,788,790,5,167,0,0,789,788,
1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,793,3,98,49,0,792,789,1,0,0,
0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,95,1,0,0,0,796,794,
1,0,0,0,797,798,5,60,0,0,798,799,5,167,0,0,799,801,5,61,0,0,800,802,5,167,
0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,810,3,90,45,0,804,
806,5,60,0,0,805,807,5,167,0,0,806,805,1,0,0,0,806,807,1,0,0,0,807,808,1,
0,0,0,808,810,3,90,45,0,809,797,1,0,0,0,809,804,1,0,0,0,810,97,1,0,0,0,811,
826,3,134,67,0,812,826,3,200,100,0,813,826,3,136,68,0,814,826,3,138,69,0,
815,826,3,140,70,0,816,826,3,144,72,0,817,826,3,146,73,0,818,826,3,148,74,
0,819,826,3,152,76,0,820,826,3,154,77,0,821,826,3,158,79,0,822,826,3,160,
80,0,823,826,3,162,81,0,824,826,3,172,86,0,825,811,1,0,0,0,825,812,1,0,0,
0,825,813,1,0,0,0,825,814,1,0,0,0,825,815,1,0,0,0,825,816,1,0,0,0,825,817,
1,0,0,0,825,818,1,0,0,0,825,819,1,0,0,0,825,820,1,0,0,0,825,821,1,0,0,0,
825,822,1,0,0,0,825,823,1,0,0,0,825,824,1,0,0,0,826,99,1,0,0,0,827,838,3,
110,55,0,828,838,3,120,60,0,829,838,3,102,51,0,830,838,3,112,56,0,831,838,
3,104,52,0,832,838,3,114,57,0,833,838,3,106,53,0,834,838,3,116,58,0,835,
838,3,108,54,0,836,838,3,118,59,0,837,827,1,0,0,0,837,828,1,0,0,0,837,829,
1,0,0,0,837,830,1,0,0,0,837,831,1,0,0,0,837,832,1,0,0,0,837,833,1,0,0,0,
837,834,1,0,0,0,837,835,1,0,0,0,837,836,1,0,0,0,838,101,1,0,0,0,839,840,
5,62,0,0,840,841,5,167,0,0,841,842,3,124,62,0,842,103,1,0,0,0,843,844,5,
62,0,0,844,845,5,167,0,0,845,846,3,126,63,0,846,105,1,0,0,0,847,848,5,62,
0,0,848,849,5,167,0,0,849,850,3,128,64,0,850,107,1,0,0,0,851,852,5,62,0,
0,852,853,5,167,0,0,853,854,3,130,65,0,854,109,1,0,0,0,855,856,5,62,0,0,
856,857,5,167,0,0,857,858,3,122,61,0,858,111,1,0,0,0,859,860,5,63,0,0,860,
861,5,167,0,0,861,862,3,124,62,0,862,113,1,0,0,0,863,864,5,63,0,0,864,865,
5,167,0,0,865,866,3,126,63,0,866,115,1,0,0,0,867,868,5,63,0,0,868,869,5,
167,0,0,869,870,3,128,64,0,870,117,1,0,0,0,871,872,5,63,0,0,872,873,5,167,
0,0,873,874,3,130,65,0,874,119,1,0,0,0,875,876,5,63,0,0,876,877,5,167,0,
0,877,878,3,122,61,0,878,121,1,0,0,0,879,880,5,64,0,0,880,881,5,167,0,0,
881,883,5,65,0,0,882,884,5,167,0,0,883,882,1,0,0,0,883,884,1,0,0,0,884,885,
1,0,0,0,885,887,3,252,126,0,886,888,5,167,0,0,887,886,1,0,0,0,887,888,1,
0,0,0,888,889,1,0,0,0,889,891,5,19,0,0,890,892,5,167,0,0,891,890,1,0,0,0,
891,892,1,0,0,0,892,893,1,0,0,0,893,895,3,390,195,0,894,896,5,167,0,0,895,
894,1,0,0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,898,5,20,0,0,898,123,1,0,
0,0,899,900,5,66,0,0,900,901,5,167,0,0,901,903,5,65,0,0,902,904,5,167,0,
0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,907,5,19,0,0,906,908,
5,167,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,910,3,360,
180,0,910,912,3,252,126,0,911,913,5,167,0,0,912,911,1,0,0,0,912,913,1,0,
0,0,913,914,1,0,0,0,914,916,5,20,0,0,915,917,5,167,0,0,916,915,1,0,0,0,916,
917,1,0,0,0,917,918,1,0,0,0,918,919,5,67,0,0,919,920,5,167,0,0,920,921,3,
388,194,0,921,922,5,167,0,0,922,923,5,68,0,0,923,924,5,167,0,0,924,925,5,
69,0,0,925,125,1,0,0,0,926,927,5,66,0,0,927,928,5,167,0,0,928,930,5,65,0,
0,929,931,5,167,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,
934,5,19,0,0,933,935,5,167,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,
0,0,0,936,937,3,360,180,0,937,939,3,252,126,0,938,940,5,167,0,0,939,938,
1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,943,5,20,0,0,942,944,5,167,0,
0,943,942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,946,5,67,0,0,946,947,
5,167,0,0,947,949,5,19,0,0,948,950,5,167,0,0,949,948,1,0,0,0,949,950,1,0,
0,0,950,951,1,0,0,0,951,953,3,386,193,0,952,954,5,167,0,0,953,952,1,0,0,
0,953,954,1,0,0,0,954,955,1,0,0,0,955,956,5,20,0,0,956,957,5,167,0,0,957,
958,5,68,0,0,958,959,5,167,0,0,959,960,5,101,0,0,960,961,5,167,0,0,961,962,
5,131,0,0,962,127,1,0,0,0,963,964,5,66,0,0,964,965,5,167,0,0,965,967,5,65,
0,0,966,968,5,167,0,0,967,966,1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,
970,5,19,0,0,970,971,3,360,180,0,971,972,3,252,126,0,972,974,5,20,0,0,973,
975,5,167,0,0,974,973,1,0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,977,5,
67,0,0,977,978,5,167,0,0,978,980,5,70,0,0,979,981,5,167,0,0,980,979,1,0,
0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,983,5,19,0,0,983,984,3,388,194,0,
984,985,5,20,0,0,985,129,1,0,0,0,986,987,5,66,0,0,987,988,5,167,0,0,988,
990,5,65,0,0,989,991,5,167,0,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,
0,0,0,992,994,3,132,66,0,993,995,5,167,0,0,994,993,1,0,0,0,994,995,1,0,0,
0,995,996,1,0,0,0,996,997,5,67,0,0,997,998,5,167,0,0,998,1000,5,70,0,0,999,
1001,5,167,0,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,
1003,5,19,0,0,1003,1004,3,388,194,0,1004,1005,5,20,0,0,1005,131,1,0,0,0,
1006,1008,5,19,0,0,1007,1009,5,167,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,
0,1009,1010,1,0,0,0,1010,1011,5,20,0,0,1011,1012,3,404,202,0,1012,1013,5,
17,0,0,1013,1014,3,360,180,0,1014,1015,3,242,121,0,1015,1016,5,18,0,0,1016,
1017,3,404,202,0,1017,1019,5,19,0,0,1018,1020,5,167,0,0,1019,1018,1,0,0,
0,1019,1020,1,0,0,0,1020,1021,1,0,0,0,1021,1022,5,20,0,0,1022,1060,1,0,0,
0,1023,1025,5,19,0,0,1024,1026,5,167,0,0,1025,1024,1,0,0,0,1025,1026,1,0,
0,0,1026,1027,1,0,0,0,1027,1028,5,20,0,0,1028,1029,3,404,202,0,1029,1030,
5,17,0,0,1030,1031,3,360,180,0,1031,1032,3,242,121,0,1032,1033,5,18,0,0,
1033,1034,3,404,202,0,1034,1035,3,402,201,0,1035,1037,5,19,0,0,1036,1038,
5,167,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1040,
5,20,0,0,1040,1060,1,0,0,0,1041,1043,5,19,0,0,1042,1044,5,167,0,0,1043,1042,
1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1046,5,20,0,0,1046,1047,
3,400,200,0,1047,1048,3,404,202,0,1048,1049,5,17,0,0,1049,1050,3,360,180,
0,1050,1051,3,242,121,0,1051,1052,5,18,0,0,1052,1053,3,404,202,0,1053,1055,
5,19,0,0,1054,1056,5,167,0,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1057,
1,0,0,0,1057,1058,5,20,0,0,1058,1060,1,0,0,0,1059,1006,1,0,0,0,1059,1023,
1,0,0,0,1059,1041,1,0,0,0,1060,133,1,0,0,0,1061,1062,5,71,0,0,1062,1063,
5,167,0,0,1063,1064,5,72,0,0,1064,1069,5,167,0,0,1065,1066,5,73,0,0,1066,
1067,5,167,0,0,1067,1068,5,74,0,0,1068,1070,5,167,0,0,1069,1065,1,0,0,0,
1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1072,5,75,0,0,1072,1073,5,167,0,
0,1073,1074,3,260,130,0,1074,1075,5,167,0,0,1075,1076,5,76,0,0,1076,1077,
5,167,0,0,1077,1078,3,360,180,0,1078,1082,5,167,0,0,1079,1080,5,77,0,0,1080,
1081,5,167,0,0,1081,1083,5,148,0,0,1082,1079,1,0,0,0,1082,1083,1,0,0,0,1083,
135,1,0,0,0,1084,1085,5,78,0,0,1085,1087,5,167,0,0,1086,1084,1,0,0,0,1086,
1087,1,0,0,0,1087,1088,1,0,0,0,1088,1090,5,79,0,0,1089,1091,5,167,0,0,1090,
1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1096,3,220,110,0,1093,
1095,3,198,99,0,1094,1093,1,0,0,0,1095,1098,1,0,0,0,1096,1094,1,0,0,0,1096,
1097,1,0,0,0,1097,1103,1,0,0,0,1098,1096,1,0,0,0,1099,1101,5,167,0,0,1100,
1099,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,0,0,1102,1104,3,218,109,0,1103,
1100,1,0,0,0,1103,1104,1,0,0,0,1104,137,1,0,0,0,1105,1107,5,80,0,0,1106,
1108,5,167,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,
1110,3,260,130,0,1110,1111,5,167,0,0,1111,1112,5,76,0,0,1112,1113,5,167,
0,0,1113,1114,3,360,180,0,1114,139,1,0,0,0,1115,1117,5,81,0,0,1116,1118,
5,167,0,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,0,0,0,1119,1124,
3,222,111,0,1120,1121,5,167,0,0,1121,1123,3,142,71,0,1122,1120,1,0,0,0,1123,
1126,1,0,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,141,1,0,0,0,1126,1124,
1,0,0,0,1127,1128,5,65,0,0,1128,1129,5,167,0,0,1129,1130,5,79,0,0,1130,1131,
5,167,0,0,1131,1138,3,148,74,0,1132,1133,5,65,0,0,1133,1134,5,167,0,0,1134,
1135,5,62,0,0,1135,1136,5,167,0,0,1136,1138,3,148,74,0,1137,1127,1,0,0,0,
1137,1132,1,0,0,0,1138,143,1,0,0,0,1139,1141,5,62,0,0,1140,1142,5,167,0,
0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,1144,3,220,
110,0,1144,145,1,0,0,0,1145,1146,5,62,0,0,1146,1147,5,167,0,0,1147,1149,
5,69,0,0,1148,1150,5,167,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,
1,0,0,0,1151,1152,3,220,110,0,1152,147,1,0,0,0,1153,1155,5,82,0,0,1154,1156,
5,167,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,1157,1168,
3,150,75,0,1158,1160,5,167,0,0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,1160,
1161,1,0,0,0,1161,1163,5,15,0,0,1162,1164,5,167,0,0,1163,1162,1,0,0,0,1163,
1164,1,0,0,0,1164,1165,1,0,0,0,1165,1167,3,150,75,0,1166,1159,1,0,0,0,1167,
1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,149,1,0,0,0,1170,1168,
1,0,0,0,1171,1173,3,388,194,0,1172,1174,5,167,0,0,1173,1172,1,0,0,0,1173,
1174,1,0,0,0,1174,1175,1,0,0,0,1175,1177,5,12,0,0,1176,1178,5,167,0,0,1177,
1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,1180,3,260,130,0,1180,
1208,1,0,0,0,1181,1183,3,360,180,0,1182,1184,5,167,0,0,1183,1182,1,0,0,0,
1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1187,5,12,0,0,1186,1188,5,167,0,
0,1187,1186,1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,1189,1190,3,260,
130,0,1190,1208,1,0,0,0,1191,1193,3,360,180,0,1192,1194,5,167,0,0,1193,1192,
1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1197,5,21,0,0,1196,1198,
5,167,0,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1199,1,0,0,0,1199,1200,
3,260,130,0,1200,1208,1,0,0,0,1201,1203,3,360,180,0,1202,1204,5,167,0,0,
1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,3,250,125,
0,1206,1208,1,0,0,0,1207,1171,1,0,0,0,1207,1181,1,0,0,0,1207,1191,1,0,0,
0,1207,1201,1,0,0,0,1208,151,1,0,0,0,1209,1210,5,83,0,0,1210,1212,5,167,
0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1215,5,84,
0,0,1214,1216,5,167,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,
0,0,0,1217,1228,3,260,130,0,1218,1220,5,167,0,0,1219,1218,1,0,0,0,1219,1220,
1,0,0,0,1220,1221,1,0,0,0,1221,1223,5,15,0,0,1222,1224,5,167,0,0,1223,1222,
1,0,0,0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,3,260,130,0,1226,1219,
1,0,0,0,1227,1230,1,0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,153,1,
0,0,0,1230,1228,1,0,0,0,1231,1232,5,85,0,0,1232,1233,5,167,0,0,1233,1244,
3,156,78,0,1234,1236,5,167,0,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,
1237,1,0,0,0,1237,1239,5,15,0,0,1238,1240,5,167,0,0,1239,1238,1,0,0,0,1239,
1240,1,0,0,0,1240,1241,1,0,0,0,1241,1243,3,156,78,0,1242,1235,1,0,0,0,1243,
1246,1,0,0,0,1244,1242,1,0,0,0,1244,1245,1,0,0,0,1245,155,1,0,0,0,1246,1244,
1,0,0,0,1247,1248,3,360,180,0,1248,1249,3,250,125,0,1249,1252,1,0,0,0,1250,
1252,3,388,194,0,1251,1247,1,0,0,0,1251,1250,1,0,0,0,1252,157,1,0,0,0,1253,
1255,5,86,0,0,1254,1256,5,167,0,0,1255,1254,1,0,0,0,1255,1256,1,0,0,0,1256,
1257,1,0,0,0,1257,1259,5,19,0,0,1258,1260,5,167,0,0,1259,1258,1,0,0,0,1259,
1260,1,0,0,0,1260,1261,1,0,0,0,1261,1262,3,360,180,0,1262,1263,5,167,0,0,
1263,1264,5,87,0,0,1264,1265,5,167,0,0,1265,1267,3,260,130,0,1266,1268,5,
167,0,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1272,
5,22,0,0,1270,1271,5,167,0,0,1271,1273,3,98,49,0,1272,1270,1,0,0,0,1273,
1274,1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,1277,1,0,0,0,1276,
1278,5,167,0,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,
1280,5,20,0,0,1280,159,1,0,0,0,1281,1286,5,73,0,0,1282,1284,5,167,0,0,1283,
1282,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,0,0,1285,1287,5,88,0,0,1286,
1283,1,0,0,0,1286,1287,1,0,0,0,1287,1288,1,0,0,0,1288,1289,5,167,0,0,1289,
1294,3,164,82,0,1290,1292,5,167,0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,
1292,1293,1,0,0,0,1293,1295,3,218,109,0,1294,1291,1,0,0,0,1294,1295,1,0,
0,0,1295,161,1,0,0,0,1296,1301,5,89,0,0,1297,1299,5,167,0,0,1298,1297,1,
0,0,0,1298,1299,1,0,0,0,1299,1300,1,0,0,0,1300,1302,5,88,0,0,1301,1298,1,
0,0,0,1301,1302,1,0,0,0,1302,1304,1,0,0,0,1303,1305,5,167,0,0,1304,1303,
1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,3,164,82,0,1307,163,
1,0,0,0,1308,1311,3,168,84,0,1309,1310,5,167,0,0,1310,1312,3,190,95,0,1311,
1309,1,0,0,0,1311,1312,1,0,0,0,1312,1315,1,0,0,0,1313,1314,5,167,0,0,1314,
1316,3,192,96,0,1315,1313,1,0,0,0,1315,1316,1,0,0,0,1316,1319,1,0,0,0,1317,
1318,5,167,0,0,1318,1320,3,194,97,0,1319,1317,1,0,0,0,1319,1320,1,0,0,0,
1320,165,1,0,0,0,1321,1323,3,174,87,0,1322,1324,5,167,0,0,1323,1322,1,0,
0,0,1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,1327,3,180,90,0,1326,1325,1,
0,0,0,1326,1327,1,0,0,0,1327,167,1,0,0,0,1328,1339,5,23,0,0,1329,1331,5,
167,0,0,1330,1329,1,0,0,0,1330,1331,1,0,0,0,1331,1332,1,0,0,0,1332,1334,
5,15,0,0,1333,1335,5,167,0,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,1336,
1,0,0,0,1336,1338,3,170,85,0,1337,1330,1,0,0,0,1338,1341,1,0,0,0,1339,1337,
1,0,0,0,1339,1340,1,0,0,0,1340,1358,1,0,0,0,1341,1339,1,0,0,0,1342,1353,
3,170,85,0,1343,1345,5,167,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,
1346,1,0,0,0,1346,1348,5,15,0,0,1347,1349,5,167,0,0,1348,1347,1,0,0,0,1348,
1349,1,0,0,0,1349,1350,1,0,0,0,1350,1352,3,170,85,0,1351,1344,1,0,0,0,1352,
1355,1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,1358,1,0,0,0,1355,
1353,1,0,0,0,1356,1358,3,166,83,0,1357,1328,1,0,0,0,1357,1342,1,0,0,0,1357,
1356,1,0,0,0,1358,169,1,0,0,0,1359,1360,3,260,130,0,1360,1361,5,167,0,0,
1361,1362,5,76,0,0,1362,1363,5,167,0,0,1363,1364,3,360,180,0,1364,1367,1,
0,0,0,1365,1367,3,260,130,0,1366,1359,1,0,0,0,1366,1365,1,0,0,0,1367,171,
1,0,0,0,1368,1369,5,129,0,0,1369,1370,5,167,0,0,1370,1372,3,174,87,0,1371,
1373,5,167,0,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,
1376,3,180,90,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,173,1,0,0,0,1377,
1379,3,176,88,0,1378,1380,5,167,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,
1380,1382,1,0,0,0,1381,1383,3,178,89,0,1382,1381,1,0,0,0,1382,1383,1,0,0,
0,1383,175,1,0,0,0,1384,1385,3,398,199,0,1385,1386,3,348,174,0,1386,177,
1,0,0,0,1387,1389,5,19,0,0,1388,1390,5,167,0,0,1389,1388,1,0,0,0,1389,1390,
1,0,0,0,1390,1392,1,0,0,0,1391,1393,3,260,130,0,1392,1391,1,0,0,0,1392,1393,
1,0,0,0,1393,1404,1,0,0,0,1394,1396,5,167,0,0,1395,1394,1,0,0,0,1395,1396,
1,0,0,0,1396,1397,1,0,0,0,1397,1399,5,15,0,0,1398,1400,5,167,0,0,1399,1398,
1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1403,3,260,130,0,1402,1395,
1,0,0,0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1404,1405,1,0,0,0,1405,1408,
1,0,0,0,1406,1404,1,0,0,0,1407,1409,5,167,0,0,1408,1407,1,0,0,0,1408,1409,
1,0,0,0,1409,1410,1,0,0,0,1410,1411,5,20,0,0,1411,179,1,0,0,0,1412,1413,
5,130,0,0,1413,1414,5,167,0,0,1414,1425,3,182,91,0,1415,1417,5,167,0,0,1416,
1415,1,0,0,0,1416,1417,1,0,0,0,1417,1418,1,0,0,0,1418,1420,5,15,0,0,1419,
1421,5,167,0,0,1420,1419,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,1422,
1424,3,182,91,0,1423,1416,1,0,0,0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1425,
1426,1,0,0,0,1426,1430,1,0,0,0,1427,1425,1,0,0,0,1428,1429,5,167,0,0,1429,
1431,3,218,109,0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,181,1,0,0,0,1432,
1435,3,184,92,0,1433,1435,3,186,93,0,1434,1432,1,0,0,0,1434,1433,1,0,0,0,
1435,183,1,0,0,0,1436,1437,3,188,94,0,1437,1438,5,167,0,0,1438,1439,5,76,
0,0,1439,1440,5,167,0,0,1440,1441,3,360,180,0,1441,185,1,0,0,0,1442,1443,
3,188,94,0,1443,187,1,0,0,0,1444,1445,3,406,203,0,1445,189,1,0,0,0,1446,
1447,5,90,0,0,1447,1448,5,167,0,0,1448,1449,5,91,0,0,1449,1450,5,167,0,0,
1450,1461,3,196,98,0,1451,1453,5,167,0,0,1452,1451,1,0,0,0,1452,1453,1,0,
0,0,1453,1454,1,0,0,0,1454,1456,5,15,0,0,1455,1457,5,167,0,0,1456,1455,1,
0,0,0,1456,1457,1,0,0,0,1457,1458,1,0,0,0,1458,1460,3,196,98,0,1459,1452,
1,0,0,0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,191,1,
0,0,0,1463,1461,1,0,0,0,1464,1465,5,92,0,0,1465,1466,5,167,0,0,1466,1467,
3,260,130,0,1467,193,1,0,0,0,1468,1469,5,93,0,0,1469,1470,5,167,0,0,1470,
1471,3,260,130,0,1471,195,1,0,0,0,1472,1480,3,260,130,0,1473,1475,5,167,
0,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1478,7,1,
0,0,1477,1479,5,167,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,
0,0,0,1480,1474,1,0,0,0,1480,1481,1,0,0,0,1481,197,1,0,0,0,1482,1484,5,167,
0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1531,1,0,0,0,1485,1486,5,57,
0,0,1486,1487,5,167,0,0,1487,1488,5,64,0,0,1488,1489,5,167,0,0,1489,1490,
3,360,180,0,1490,1492,3,252,126,0,1491,1493,5,167,0,0,1492,1491,1,0,0,0,
1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1496,5,19,0,0,1495,1497,5,167,0,
0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1500,3,390,
195,0,1499,1501,5,167,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1502,
1,0,0,0,1502,1503,5,20,0,0,1503,1532,1,0,0,0,1504,1505,5,57,0,0,1505,1506,
5,167,0,0,1506,1507,5,98,0,0,1507,1508,5,167,0,0,1508,1509,5,65,0,0,1509,
1510,5,167,0,0,1510,1521,3,360,180,0,1511,1513,5,167,0,0,1512,1511,1,0,0,
0,1512,1513,1,0,0,0,1513,1514,1,0,0,0,1514,1516,5,15,0,0,1515,1517,5,167,
0,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,1520,3,360,
180,0,1519,1512,1,0,0,0,1520,1523,1,0,0,0,1521,1519,1,0,0,0,1521,1522,1,
0,0,0,1522,1532,1,0,0,0,1523,1521,1,0,0,0,1524,1525,5,57,0,0,1525,1526,5,
167,0,0,1526,1527,5,99,0,0,1527,1528,5,167,0,0,1528,1529,3,360,180,0,1529,
1530,3,252,126,0,1530,1532,1,0,0,0,1531,1485,1,0,0,0,1531,1504,1,0,0,0,1531,
1524,1,0,0,0,1532,199,1,0,0,0,1533,1534,5,100,0,0,1534,1535,5,167,0,0,1535,
1546,3,202,101,0,1536,1538,5,167,0,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,
1538,1539,1,0,0,0,1539,1541,5,15,0,0,1540,1542,5,167,0,0,1541,1540,1,0,0,
0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,1545,3,202,101,0,1544,1537,1,
0,0,0,1545,1548,1,0,0,0,1546,1544,1,0,0,0,1546,1547,1,0,0,0,1547,1550,1,
0,0,0,1548,1546,1,0,0,0,1549,1551,3,218,109,0,1550,1549,1,0,0,0,1550,1551,
1,0,0,0,1551,201,1,0,0,0,1552,1554,3,360,180,0,1553,1555,5,167,0,0,1554,
1553,1,0,0,0,1554,1555,1,0,0,0,1555,1556,1,0,0,0,1556,1558,5,12,0,0,1557,
1559,5,167,0,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,
1561,3,204,102,0,1561,203,1,0,0,0,1562,1565,3,206,103,0,1563,1565,3,208,
104,0,1564,1562,1,0,0,0,1564,1563,1,0,0,0,1565,205,1,0,0,0,1566,1568,5,101,
0,0,1567,1569,5,167,0,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1573,1,
0,0,0,1570,1574,3,210,105,0,1571,1574,3,212,106,0,1572,1574,3,214,107,0,
1573,1570,1,0,0,0,1573,1571,1,0,0,0,1573,1572,1,0,0,0,1574,207,1,0,0,0,1575,
1579,7,2,0,0,1576,1580,3,210,105,0,1577,1580,3,212,106,0,1578,1580,3,214,
107,0,1579,1576,1,0,0,0,1579,1577,1,0,0,0,1579,1578,1,0,0,0,1580,209,1,0,
0,0,1581,1582,5,2,0,0,1582,1583,3,406,203,0,1583,1584,5,19,0,0,1584,1585,
3,406,203,0,1585,1588,5,12,0,0,1586,1589,5,148,0,0,1587,1589,3,378,189,0,
1588,1586,1,0,0,0,1588,1587,1,0,0,0,1589,1590,1,0,0,0,1590,1591,5,20,0,0,
1591,211,1,0,0,0,1592,1593,5,2,0,0,1593,1594,3,406,203,0,1594,1597,5,19,
0,0,1595,1598,5,148,0,0,1596,1598,3,378,189,0,1597,1595,1,0,0,0,1597,1596,
1,0,0,0,1598,1599,1,0,0,0,1599,1600,5,20,0,0,1600,213,1,0,0,0,1601,1605,
5,19,0,0,1602,1606,3,216,108,0,1603,1606,3,378,189,0,1604,1606,5,23,0,0,
1605,1602,1,0,0,0,1605,1603,1,0,0,0,1605,1604,1,0,0,0,1606,1607,1,0,0,0,
1607,1608,5,20,0,0,1608,215,1,0,0,0,1609,1620,3,394,197,0,1610,1612,5,167,
0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1615,5,15,
0,0,1614,1616,5,167,0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,1,
0,0,0,1617,1619,3,394,197,0,1618,1611,1,0,0,0,1619,1622,1,0,0,0,1620,1618,
1,0,0,0,1620,1621,1,0,0,0,1621,217,1,0,0,0,1622,1620,1,0,0,0,1623,1624,5,
104,0,0,1624,1625,5,167,0,0,1625,1626,3,260,130,0,1626,219,1,0,0,0,1627,
1638,3,222,111,0,1628,1630,5,167,0,0,1629,1628,1,0,0,0,1629,1630,1,0,0,0,
1630,1631,1,0,0,0,1631,1633,5,15,0,0,1632,1634,5,167,0,0,1633,1632,1,0,0,
0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,1637,3,222,111,0,1636,1629,1,
0,0,0,1637,1640,1,0,0,0,1638,1636,1,0,0,0,1638,1639,1,0,0,0,1639,221,1,0,
0,0,1640,1638,1,0,0,0,1641,1643,3,360,180,0,1642,1644,5,167,0,0,1643,1642,
1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,1647,5,12,0,0,1646,1648,
5,167,0,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,1650,
3,224,112,0,1650,1653,1,0,0,0,1651,1653,3,224,112,0,1652,1641,1,0,0,0,1652,
1651,1,0,0,0,1653,223,1,0,0,0,1654,1657,3,316,158,0,1655,1657,3,226,113,
0,1656,1654,1,0,0,0,1656,1655,1,0,0,0,1657,225,1,0,0,0,1658,1665,3,228,114,
0,1659,1661,5,167,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,
0,0,1662,1664,3,230,115,0,1663,1660,1,0,0,0,1664,1667,1,0,0,0,1665,1663,
1,0,0,0,1665,1666,1,0,0,0,1666,1673,1,0,0,0,1667,1665,1,0,0,0,1668,1669,
5,19,0,0,1669,1670,3,226,113,0,1670,1671,5,20,0,0,1671,1673,1,0,0,0,1672,
1658,1,0,0,0,1672,1668,1,0,0,0,1673,227,1,0,0,0,1674,1676,5,19,0,0,1675,
1677,5,167,0,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,1682,1,0,0,0,1678,
1680,3,360,180,0,1679,1681,5,167,0,0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,
1681,1683,1,0,0,0,1682,1678,1,0,0,0,1682,1683,1,0,0,0,1683,1688,1,0,0,0,
1684,1686,3,250,125,0,1685,1687,5,167,0,0,1686,1685,1,0,0,0,1686,1687,1,
0,0,0,1687,1689,1,0,0,0,1688,1684,1,0,0,0,1688,1689,1,0,0,0,1689,1694,1,
0,0,0,1690,1692,3,240,120,0,1691,1693,5,167,0,0,1692,1691,1,0,0,0,1692,1693,
1,0,0,0,1693,1695,1,0,0,0,1694,1690,1,0,0,0,1694,1695,1,0,0,0,1695,1696,
1,0,0,0,1696,1697,5,20,0,0,1697,229,1,0,0,0,1698,1700,3,232,116,0,1699,1701,
5,167,0,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,1702,1,0,0,0,1702,1703,
3,228,114,0,1703,231,1,0,0,0,1704,1706,3,234,117,0,1705,1707,5,167,0,0,1706,
1705,1,0,0,0,1706,1707,1,0,0,0,1707,1709,1,0,0,0,1708,1710,3,238,119,0,1709,
1708,1,0,0,0,1709,1710,1,0,0,0,1710,1712,1,0,0,0,1711,1713,5,167,0,0,1712,
1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1715,3,236,118,0,1715,
233,1,0,0,0,1716,1718,3,400,200,0,1717,1719,5,167,0,0,1718,1717,1,0,0,0,
1718,1719,1,0,0,0,1719,1720,1,0,0,0,1720,1721,3,404,202,0,1721,1724,1,0,
0,0,1722,1724,3,404,202,0,1723,1716,1,0,0,0,1723,1722,1,0,0,0,1724,235,1,
0,0,0,1725,1727,3,404,202,0,1726,1728,5,167,0,0,1727,1726,1,0,0,0,1727,1728,
1,0,0,0,1728,1729,1,0,0,0,1729,1730,3,402,201,0,1730,1733,1,0,0,0,1731,1733,
3,404,202,0,1732,1725,1,0,0,0,1732,1731,1,0,0,0,1733,237,1,0,0,0,1734,1736,
5,17,0,0,1735,1737,5,167,0,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1742,
1,0,0,0,1738,1740,3,360,180,0,1739,1741,5,167,0,0,1740,1739,1,0,0,0,1740,
1741,1,0,0,0,1741,1743,1,0,0,0,1742,1738,1,0,0,0,1742,1743,1,0,0,0,1743,
1748,1,0,0,0,1744,1746,3,244,122,0,1745,1747,5,167,0,0,1746,1745,1,0,0,0,
1746,1747,1,0,0,0,1747,1749,1,0,0,0,1748,1744,1,0,0,0,1748,1749,1,0,0,0,
1749,1751,1,0,0,0,1750,1752,3,254,127,0,1751,1750,1,0,0,0,1751,1752,1,0,
0,0,1752,1757,1,0,0,0,1753,1755,3,240,120,0,1754,1756,5,167,0,0,1755,1754,
1,0,0,0,1755,1756,1,0,0,0,1756,1758,1,0,0,0,1757,1753,1,0,0,0,1757,1758,
1,0,0,0,1758,1759,1,0,0,0,1759,1760,5,18,0,0,1760,239,1,0,0,0,1761,1764,
3,364,182,0,1762,1764,3,378,189,0,1763,1761,1,0,0,0,1763,1762,1,0,0,0,1764,
241,1,0,0,0,1765,1767,5,2,0,0,1766,1768,5,167,0,0,1767,1766,1,0,0,0,1767,
1768,1,0,0,0,1768,1769,1,0,0,0,1769,1770,3,258,129,0,1770,243,1,0,0,0,1771,
1779,3,246,123,0,1772,1774,5,167,0,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,
1774,1775,1,0,0,0,1775,1776,5,22,0,0,1776,1778,3,248,124,0,1777,1773,1,0,
0,0,1778,1781,1,0,0,0,1779,1777,1,0,0,0,1779,1780,1,0,0,0,1780,245,1,0,0,
0,1781,1779,1,0,0,0,1782,1783,5,2,0,0,1783,1784,3,258,129,0,1784,247,1,0,
0,0,1785,1787,5,2,0,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1788,1,0,
0,0,1788,1789,3,258,129,0,1789,249,1,0,0,0,1790,1797,3,252,126,0,1791,1793,
5,167,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,1796,
3,252,126,0,1795,1792,1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,
1,0,0,0,1798,251,1,0,0,0,1799,1797,1,0,0,0,1800,1801,5,2,0,0,1801,1802,3,
256,128,0,1802,253,1,0,0,0,1803,1805,5,23,0,0,1804,1806,5,167,0,0,1805,1804,
1,0,0,0,1805,1806,1,0,0,0,1806,1811,1,0,0,0,1807,1809,3,394,197,0,1808,1810,
5,167,0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1812,1,0,0,0,1811,1807,
1,0,0,0,1811,1812,1,0,0,0,1812,1823,1,0,0,0,1813,1815,5,24,0,0,1814,1816,
5,167,0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1821,1,0,0,0,1817,1819,
3,394,197,0,1818,1820,5,167,0,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,
1822,1,0,0,0,1821,1817,1,0,0,0,1821,1822,1,0,0,0,1822,1824,1,0,0,0,1823,
1813,1,0,0,0,1823,1824,1,0,0,0,1824,255,1,0,0,0,1825,1826,3,406,203,0,1826,
257,1,0,0,0,1827,1828,3,406,203,0,1828,259,1,0,0,0,1829,1830,3,262,131,0,
1830,261,1,0,0,0,1831,1838,3,264,132,0,1832,1833,5,167,0,0,1833,1834,5,107,
0,0,1834,1835,5,167,0,0,1835,1837,3,264,132,0,1836,1832,1,0,0,0,1837,1840,
1,0,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,263,1,0,0,0,1840,1838,1,
0,0,0,1841,1848,3,266,133,0,1842,1843,5,167,0,0,1843,1844,5,108,0,0,1844,
1845,5,167,0,0,1845,1847,3,266,133,0,1846,1842,1,0,0,0,1847,1850,1,0,0,0,
1848,1846,1,0,0,0,1848,1849,1,0,0,0,1849,265,1,0,0,0,1850,1848,1,0,0,0,1851,
1858,3,268,134,0,1852,1853,5,167,0,0,1853,1854,5,109,0,0,1854,1855,5,167,
0,0,1855,1857,3,268,134,0,1856,1852,1,0,0,0,1857,1860,1,0,0,0,1858,1856,
1,0,0,0,1858,1859,1,0,0,0,1859,267,1,0,0,0,1860,1858,1,0,0,0,1861,1863,5,
110,0,0,1862,1864,5,167,0,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,1866,
1,0,0,0,1865,1861,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,0,1867,1868,
1,0,0,0,1868,1870,1,0,0,0,1869,1867,1,0,0,0,1870,1871,3,270,135,0,1871,269,
1,0,0,0,1872,1879,3,272,136,0,1873,1875,5,167,0,0,1874,1873,1,0,0,0,1874,
1875,1,0,0,0,1875,1876,1,0,0,0,1876,1878,3,332,166,0,1877,1874,1,0,0,0,1878,
1881,1,0,0,0,1879,1877,1,0,0,0,1879,1880,1,0,0,0,1880,271,1,0,0,0,1881,1879,
1,0,0,0,1882,1901,3,274,137,0,1883,1885,5,167,0,0,1884,1883,1,0,0,0,1884,
1885,1,0,0,0,1885,1886,1,0,0,0,1886,1888,5,13,0,0,1887,1889,5,167,0,0,1888,
1887,1,0,0,0,1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1900,3,274,137,0,1891,
1893,5,167,0,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,0,1894,
1896,5,3,0,0,1895,1897,5,167,0,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,
1898,1,0,0,0,1898,1900,3,274,137,0,1899,1884,1,0,0,0,1899,1892,1,0,0,0,1900,
1903,1,0,0,0,1901,1899,1,0,0,0,1901,1902,1,0,0,0,1902,273,1,0,0,0,1903,1901,
1,0,0,0,1904,1931,3,276,138,0,1905,1907,5,167,0,0,1906,1905,1,0,0,0,1906,
1907,1,0,0,0,1907,1908,1,0,0,0,1908,1910,5,23,0,0,1909,1911,5,167,0,0,1910,
1909,1,0,0,0,1910,1911,1,0,0,0,1911,1912,1,0,0,0,1912,1930,3,276,138,0,1913,
1915,5,167,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,1916,1,0,0,0,1916,
1918,5,6,0,0,1917,1919,5,167,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,
1920,1,0,0,0,1920,1930,3,276,138,0,1921,1923,5,167,0,0,1922,1921,1,0,0,0,
1922,1923,1,0,0,0,1923,1924,1,0,0,0,1924,1926,5,25,0,0,1925,1927,5,167,0,
0,1926,1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,1930,3,276,
138,0,1929,1906,1,0,0,0,1929,1914,1,0,0,0,1929,1922,1,0,0,0,1930,1933,1,
0,0,0,1931,1929,1,0,0,0,1931,1932,1,0,0,0,1932,275,1,0,0,0,1933,1931,1,0,
0,0,1934,1945,3,278,139,0,1935,1937,5,167,0,0,1936,1935,1,0,0,0,1936,1937,
1,0,0,0,1937,1938,1,0,0,0,1938,1940,5,26,0,0,1939,1941,5,167,0,0,1940,1939,
1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1944,3,278,139,0,1943,1936,
1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,277,1,
0,0,0,1947,1945,1,0,0,0,1948,1950,7,3,0,0,1949,1951,5,167,0,0,1950,1949,
1,0,0,0,1950,1951,1,0,0,0,1951,1953,1,0,0,0,1952,1948,1,0,0,0,1953,1956,
1,0,0,0,1954,1952,1,0,0,0,1954,1955,1,0,0,0,1955,1957,1,0,0,0,1956,1954,
1,0,0,0,1957,1958,3,280,140,0,1958,279,1,0,0,0,1959,2013,3,282,141,0,1960,
1962,5,167,0,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1963,1,0,0,0,1963,
1964,5,17,0,0,1964,1965,3,260,130,0,1965,1966,5,18,0,0,1966,2012,1,0,0,0,
1967,1969,5,167,0,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,1970,1,0,0,
0,1970,1972,5,17,0,0,1971,1973,3,260,130,0,1972,1971,1,0,0,0,1972,1973,1,
0,0,0,1973,1974,1,0,0,0,1974,1976,5,24,0,0,1975,1977,3,260,130,0,1976,1975,
1,0,0,0,1976,1977,1,0,0,0,1977,1978,1,0,0,0,1978,2012,5,18,0,0,1979,1981,
5,167,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,1996,
5,27,0,0,1983,1984,5,167,0,0,1984,1996,5,87,0,0,1985,1986,5,167,0,0,1986,
1987,5,111,0,0,1987,1988,5,167,0,0,1988,1996,5,73,0,0,1989,1990,5,167,0,
0,1990,1991,5,112,0,0,1991,1992,5,167,0,0,1992,1996,5,73,0,0,1993,1994,5,
167,0,0,1994,1996,5,113,0,0,1995,1980,1,0,0,0,1995,1983,1,0,0,0,1995,1985,
1,0,0,0,1995,1989,1,0,0,0,1995,1993,1,0,0,0,1996,1998,1,0,0,0,1997,1999,
5,167,0,0,1998,1997,1,0,0,0,1998,1999,1,0,0,0,1999,2000,1,0,0,0,2000,2012,
3,282,141,0,2001,2002,5,167,0,0,2002,2003,5,68,0,0,2003,2004,5,167,0,0,2004,
2012,5,114,0,0,2005,2006,5,167,0,0,2006,2007,5,68,0,0,2007,2008,5,167,0,
0,2008,2009,5,110,0,0,2009,2010,5,167,0,0,2010,2012,5,114,0,0,2011,1961,
1,0,0,0,2011,1968,1,0,0,0,2011,1995,1,0,0,0,2011,2001,1,0,0,0,2011,2005,
1,0,0,0,2012,2015,1,0,0,0,2013,2011,1,0,0,0,2013,2014,1,0,0,0,2014,281,1,
0,0,0,2015,2013,1,0,0,0,2016,2026,3,322,161,0,2017,2019,5,167,0,0,2018,2017,
1,0,0,0,2018,2019,1,0,0,0,2019,2022,1,0,0,0,2020,2023,3,354,177,0,2021,2023,
3,250,125,0,2022,2020,1,0,0,0,2022,2021,1,0,0,0,2023,2025,1,0,0,0,2024,2018,
1,0,0,0,2025,2028,1,0,0,0,2026,2024,1,0,0,0,2026,2027,1,0,0,0,2027,283,1,
0,0,0,2028,2026,1,0,0,0,2029,2031,3,286,143,0,2030,2032,5,167,0,0,2031,2030,
1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,2035,5,19,0,0,2034,2036,
5,167,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2037,1,0,0,0,2037,2039,
3,338,169,0,2038,2040,5,167,0,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,
2041,1,0,0,0,2041,2042,5,20,0,0,2042,285,1,0,0,0,2043,2044,5,116,0,0,2044,
287,1,0,0,0,2045,2047,3,290,145,0,2046,2048,5,167,0,0,2047,2046,1,0,0,0,
2047,2048,1,0,0,0,2048,2049,1,0,0,0,2049,2051,5,19,0,0,2050,2052,5,167,0,
0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,2053,1,0,0,0,2053,2055,3,260,
130,0,2054,2056,5,167,0,0,2055,2054,1,0,0,0,2055,2056,1,0,0,0,2056,2057,
1,0,0,0,2057,2058,5,20,0,0,2058,289,1,0,0,0,2059,2060,5,70,0,0,2060,291,
1,0,0,0,2061,2063,3,294,147,0,2062,2064,5,167,0,0,2063,2062,1,0,0,0,2063,
2064,1,0,0,0,2064,2065,1,0,0,0,2065,2067,5,19,0,0,2066,2068,5,167,0,0,2067,
2066,1,0,0,0,2067,2068,1,0,0,0,2068,2069,1,0,0,0,2069,2071,3,338,169,0,2070,
2072,5,167,0,0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,2073,1,0,0,0,2073,
2074,5,20,0,0,2074,293,1,0,0,0,2075,2076,5,61,0,0,2076,295,1,0,0,0,2077,
2079,3,298,149,0,2078,2080,5,167,0,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,
2080,2081,1,0,0,0,2081,2083,5,19,0,0,2082,2084,5,167,0,0,2083,2082,1,0,0,
0,2083,2084,1,0,0,0,2084,2085,1,0,0,0,2085,2087,3,338,169,0,2086,2088,5,
167,0,0,2087,2086,1,0,0,0,2087,2088,1,0,0,0,2088,2089,1,0,0,0,2089,2090,
5,20,0,0,2090,297,1,0,0,0,2091,2092,5,118,0,0,2092,299,1,0,0,0,2093,2095,
3,302,151,0,2094,2096,5,167,0,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,
2097,1,0,0,0,2097,2099,5,19,0,0,2098,2100,5,167,0,0,2099,2098,1,0,0,0,2099,
2100,1,0,0,0,2100,2101,1,0,0,0,2101,2103,3,338,169,0,2102,2104,5,167,0,0,
2103,2102,1,0,0,0,2103,2104,1,0,0,0,2104,2105,1,0,0,0,2105,2106,5,20,0,0,
2106,301,1,0,0,0,2107,2108,5,119,0,0,2108,303,1,0,0,0,2109,2111,3,306,153,
0,2110,2112,5,167,0,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,1,0,
0,0,2113,2115,5,19,0,0,2114,2116,5,167,0,0,2115,2114,1,0,0,0,2115,2116,1,
0,0,0,2116,2117,1,0,0,0,2117,2119,3,338,169,0,2118,2120,5,167,0,0,2119,2118,
1,0,0,0,2119,2120,1,0,0,0,2120,2121,1,0,0,0,2121,2122,5,20,0,0,2122,305,
1,0,0,0,2123,2124,5,120,0,0,2124,307,1,0,0,0,2125,2127,3,310,155,0,2126,
2128,5,167,0,0,2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,2129,1,0,0,0,2129,
2131,5,19,0,0,2130,2132,5,167,0,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,2132,
2133,1,0,0,0,2133,2142,3,338,169,0,2134,2136,5,167,0,0,2135,2134,1,0,0,0,
2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2139,5,22,0,0,2138,2140,5,167,0,
0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,2141,1,0,0,0,2141,2143,3,260,
130,0,2142,2135,1,0,0,0,2142,2143,1,0,0,0,2143,2145,1,0,0,0,2144,2146,5,
167,0,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,2147,1,0,0,0,2147,2148,
5,20,0,0,2148,309,1,0,0,0,2149,2150,5,117,0,0,2150,311,1,0,0,0,2151,2153,
3,314,157,0,2152,2154,5,167,0,0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,2154,
2155,1,0,0,0,2155,2157,5,19,0,0,2156,2158,5,167,0,0,2157,2156,1,0,0,0,2157,
2158,1,0,0,0,2158,2159,1,0,0,0,2159,2161,3,360,180,0,2160,2162,5,167,0,0,
2161,2160,1,0,0,0,2161,2162,1,0,0,0,2162,2163,1,0,0,0,2163,2165,5,12,0,0,
2164,2166,5,167,0,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,
0,2167,2169,3,260,130,0,2168,2170,5,167,0,0,2169,2168,1,0,0,0,2169,2170,
1,0,0,0,2170,2171,1,0,0,0,2171,2173,5,15,0,0,2172,2174,5,167,0,0,2173,2172,
1,0,0,0,2173,2174,1,0,0,0,2174,2175,1,0,0,0,2175,2177,3,340,170,0,2176,2178,
5,167,0,0,2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,2179,1,0,0,0,2179,2181,
5,22,0,0,2180,2182,5,167,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2183,
1,0,0,0,2183,2185,3,260,130,0,2184,2186,5,167,0,0,2185,2184,1,0,0,0,2185,
2186,1,0,0,0,2186,2187,1,0,0,0,2187,2188,5,20,0,0,2188,313,1,0,0,0,2189,
2190,5,123,0,0,2190,315,1,0,0,0,2191,2193,3,318,159,0,2192,2194,5,167,0,
0,2193,2192,1,0,0,0,2193,2194,1,0,0,0,2194,2195,1,0,0,0,2195,2197,5,19,0,
0,2196,2198,5,167,0,0,2197,2196,1,0,0,0,2197,2198,1,0,0,0,2198,2199,1,0,
0,0,2199,2201,3,226,113,0,2200,2202,5,167,0,0,2201,2200,1,0,0,0,2201,2202,
1,0,0,0,2202,2203,1,0,0,0,2203,2204,5,20,0,0,2204,2220,1,0,0,0,2205,2207,
3,320,160,0,2206,2208,5,167,0,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,
2209,1,0,0,0,2209,2211,5,19,0,0,2210,2212,5,167,0,0,2211,2210,1,0,0,0,2211,
2212,1,0,0,0,2212,2213,1,0,0,0,2213,2215,3,226,113,0,2214,2216,5,167,0,0,
2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,2218,5,20,0,0,
2218,2220,1,0,0,0,2219,2191,1,0,0,0,2219,2205,1,0,0,0,2220,317,1,0,0,0,2221,
2222,5,105,0,0,2222,319,1,0,0,0,2223,2224,5,106,0,0,2224,321,1,0,0,0,2225,
2257,3,324,162,0,2226,2257,3,378,189,0,2227,2257,3,356,178,0,2228,2230,5,
115,0,0,2229,2231,5,167,0,0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,2232,
1,0,0,0,2232,2234,5,19,0,0,2233,2235,5,167,0,0,2234,2233,1,0,0,0,2234,2235,
1,0,0,0,2235,2236,1,0,0,0,2236,2238,5,23,0,0,2237,2239,5,167,0,0,2238,2237,
1,0,0,0,2238,2239,1,0,0,0,2239,2240,1,0,0,0,2240,2257,5,20,0,0,2241,2257,
3,350,175,0,2242,2257,3,352,176,0,2243,2257,3,284,142,0,2244,2257,3,308,
154,0,2245,2257,3,312,156,0,2246,2257,3,292,146,0,2247,2257,3,296,148,0,
2248,2257,3,300,150,0,2249,2257,3,304,152,0,2250,2257,3,288,144,0,2251,2257,
3,316,158,0,2252,2257,3,336,168,0,2253,2257,3,334,167,0,2254,2257,3,342,
171,0,2255,2257,3,360,180,0,2256,2225,1,0,0,0,2256,2226,1,0,0,0,2256,2227,
1,0,0,0,2256,2228,1,0,0,0,2256,2241,1,0,0,0,2256,2242,1,0,0,0,2256,2243,
1,0,0,0,2256,2244,1,0,0,0,2256,2245,1,0,0,0,2256,2246,1,0,0,0,2256,2247,
1,0,0,0,2256,2248,1,0,0,0,2256,2249,1,0,0,0,2256,2250,1,0,0,0,2256,2251,
1,0,0,0,2256,2252,1,0,0,0,2256,2253,1,0,0,0,2256,2254,1,0,0,0,2256,2255,
1,0,0,0,2257,323,1,0,0,0,2258,2266,3,362,181,0,2259,2266,3,326,163,0,2260,
2266,3,328,164,0,2261,2266,5,114,0,0,2262,2266,3,364,182,0,2263,2266,3,330,
165,0,2264,2266,3,366,183,0,2265,2258,1,0,0,0,2265,2259,1,0,0,0,2265,2260,
1,0,0,0,2265,2261,1,0,0,0,2265,2262,1,0,0,0,2265,2263,1,0,0,0,2265,2264,
1,0,0,0,2266,325,1,0,0,0,2267,2268,5,148,0,0,2268,327,1,0,0,0,2269,2270,
7,4,0,0,2270,329,1,0,0,0,2271,2273,5,17,0,0,2272,2274,5,167,0,0,2273,2272,
1,0,0,0,2273,2274,1,0,0,0,2274,2292,1,0,0,0,2275,2277,3,260,130,0,2276,2278,
5,167,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2289,1,0,0,0,2279,2281,
5,15,0,0,2280,2282,5,167,0,0,2281,2280,1,0,0,0,2281,2282,1,0,0,0,2282,2283,
1,0,0,0,2283,2285,3,260,130,0,2284,2286,5,167,0,0,2285,2284,1,0,0,0,2285,
2286,1,0,0,0,2286,2288,1,0,0,0,2287,2279,1,0,0,0,2288,2291,1,0,0,0,2289,
2287,1,0,0,0,2289,2290,1,0,0,0,2290,2293,1,0,0,0,2291,2289,1,0,0,0,2292,
2275,1,0,0,0,2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,2295,5,18,0,0,2295,
331,1,0,0,0,2296,2298,5,12,0,0,2297,2299,5,167,0,0,2298,2297,1,0,0,0,2298,
2299,1,0,0,0,2299,2300,1,0,0,0,2300,2332,3,272,136,0,2301,2303,5,28,0,0,
2302,2304,5,167,0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2305,1,0,0,
0,2305,2332,3,272,136,0,2306,2308,5,29,0,0,2307,2309,5,167,0,0,2308,2307,
1,0,0,0,2308,2309,1,0,0,0,2309,2310,1,0,0,0,2310,2332,3,272,136,0,2311,2313,
5,30,0,0,2312,2314,5,167,0,0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,2314,2315,
1,0,0,0,2315,2332,3,272,136,0,2316,2318,5,31,0,0,2317,2319,5,167,0,0,2318,
2317,1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,0,2320,2332,3,272,136,0,2321,
2323,5,32,0,0,2322,2324,5,167,0,0,2323,2322,1,0,0,0,2323,2324,1,0,0,0,2324,
2325,1,0,0,0,2325,2332,3,272,136,0,2326,2328,5,33,0,0,2327,2329,5,167,0,
0,2328,2327,1,0,0,0,2328,2329,1,0,0,0,2329,2330,1,0,0,0,2330,2332,3,272,
136,0,2331,2296,1,0,0,0,2331,2301,1,0,0,0,2331,2306,1,0,0,0,2331,2311,1,
0,0,0,2331,2316,1,0,0,0,2331,2321,1,0,0,0,2331,2326,1,0,0,0,2332,333,1,0,
0,0,2333,2335,5,19,0,0,2334,2336,5,167,0,0,2335,2334,1,0,0,0,2335,2336,1,
0,0,0,2336,2337,1,0,0,0,2337,2339,3,260,130,0,2338,2340,5,167,0,0,2339,2338,
1,0,0,0,2339,2340,1,0,0,0,2340,2341,1,0,0,0,2341,2342,5,20,0,0,2342,335,
1,0,0,0,2343,2348,3,228,114,0,2344,2346,5,167,0,0,2345,2344,1,0,0,0,2345,
2346,1,0,0,0,2346,2347,1,0,0,0,2347,2349,3,230,115,0,2348,2345,1,0,0,0,2349,
2350,1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,0,2351,337,1,0,0,0,2352,2357,
3,340,170,0,2353,2355,5,167,0,0,2354,2353,1,0,0,0,2354,2355,1,0,0,0,2355,
2356,1,0,0,0,2356,2358,3,218,109,0,2357,2354,1,0,0,0,2357,2358,1,0,0,0,2358,
339,1,0,0,0,2359,2360,3,360,180,0,2360,2361,5,167,0,0,2361,2362,5,87,0,0,
2362,2363,5,167,0,0,2363,2364,3,260,130,0,2364,341,1,0,0,0,2365,2367,3,344,
172,0,2366,2368,5,167,0,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2369,
1,0,0,0,2369,2371,5,19,0,0,2370,2372,5,167,0,0,2371,2370,1,0,0,0,2371,2372,
1,0,0,0,2372,2377,1,0,0,0,2373,2375,5,88,0,0,2374,2376,5,167,0,0,2375,2374,
1,0,0,0,2375,2376,1,0,0,0,2376,2378,1,0,0,0,2377,2373,1,0,0,0,2377,2378,
1,0,0,0,2378,2396,1,0,0,0,2379,2381,3,260,130,0,2380,2382,5,167,0,0,2381,
2380,1,0,0,0,2381,2382,1,0,0,0,2382,2393,1,0,0,0,2383,2385,5,15,0,0,2384,
2386,5,167,0,0,2385,2384,1,0,0,0,2385,2386,1,0,0,0,2386,2387,1,0,0,0,2387,
2389,3,260,130,0,2388,2390,5,167,0,0,2389,2388,1,0,0,0,2389,2390,1,0,0,0,
2390,2392,1,0,0,0,2391,2383,1,0,0,0,2392,2395,1,0,0,0,2393,2391,1,0,0,0,
2393,2394,1,0,0,0,2394,2397,1,0,0,0,2395,2393,1,0,0,0,2396,2379,1,0,0,0,
2396,2397,1,0,0,0,2397,2398,1,0,0,0,2398,2399,5,20,0,0,2399,343,1,0,0,0,
2400,2401,3,398,199,0,2401,2402,3,346,173,0,2402,345,1,0,0,0,2403,2404,7,
5,0,0,2404,347,1,0,0,0,2405,2406,3,406,203,0,2406,349,1,0,0,0,2407,2409,
5,17,0,0,2408,2410,5,167,0,0,2409,2408,1,0,0,0,2409,2410,1,0,0,0,2410,2411,
1,0,0,0,2411,2420,3,338,169,0,2412,2414,5,167,0,0,2413,2412,1,0,0,0,2413,
2414,1,0,0,0,2414,2415,1,0,0,0,2415,2417,5,22,0,0,2416,2418,5,167,0,0,2417,
2416,1,0,0,0,2417,2418,1,0,0,0,2418,2419,1,0,0,0,2419,2421,3,260,130,0,2420,
2413,1,0,0,0,2420,2421,1,0,0,0,2421,2423,1,0,0,0,2422,2424,5,167,0,0,2423,
2422,1,0,0,0,2423,2424,1,0,0,0,2424,2425,1,0,0,0,2425,2426,5,18,0,0,2426,
351,1,0,0,0,2427,2429,5,17,0,0,2428,2430,5,167,0,0,2429,2428,1,0,0,0,2429,
2430,1,0,0,0,2430,2439,1,0,0,0,2431,2433,3,360,180,0,2432,2434,5,167,0,0,
2433,2432,1,0,0,0,2433,2434,1,0,0,0,2434,2435,1,0,0,0,2435,2437,5,12,0,0,
2436,2438,5,167,0,0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2440,1,0,0,
0,2439,2431,1,0,0,0,2439,2440,1,0,0,0,2440,2441,1,0,0,0,2441,2443,3,336,
168,0,2442,2444,5,167,0,0,2443,2442,1,0,0,0,2443,2444,1,0,0,0,2444,2453,
1,0,0,0,2445,2447,5,104,0,0,2446,2448,5,167,0,0,2447,2446,1,0,0,0,2447,2448,
1,0,0,0,2448,2449,1,0,0,0,2449,2451,3,260,130,0,2450,2452,5,167,0,0,2451,
2450,1,0,0,0,2451,2452,1,0,0,0,2452,2454,1,0,0,0,2453,2445,1,0,0,0,2453,
2454,1,0,0,0,2454,2455,1,0,0,0,2455,2457,5,22,0,0,2456,2458,5,167,0,0,2457,
2456,1,0,0,0,2457,2458,1,0,0,0,2458,2459,1,0,0,0,2459,2461,3,260,130,0,2460,
2462,5,167,0,0,2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,2463,1,0,0,0,2463,
2464,5,18,0,0,2464,353,1,0,0,0,2465,2467,5,7,0,0,2466,2468,5,167,0,0,2467,
2466,1,0,0,0,2467,2468,1,0,0,0,2468,2469,1,0,0,0,2469,2470,3,392,196,0,2470,
355,1,0,0,0,2471,2476,5,124,0,0,2472,2474,5,167,0,0,2473,2472,1,0,0,0,2473,
2474,1,0,0,0,2474,2475,1,0,0,0,2475,2477,3,358,179,0,2476,2473,1,0,0,0,2477,
2478,1,0,0,0,2478,2476,1,0,0,0,2478,2479,1,0,0,0,2479,2494,1,0,0,0,2480,
2482,5,124,0,0,2481,2483,5,167,0,0,2482,2481,1,0,0,0,2482,2483,1,0,0,0,2483,
2484,1,0,0,0,2484,2489,3,260,130,0,2485,2487,5,167,0,0,2486,2485,1,0,0,0,
2486,2487,1,0,0,0,2487,2488,1,0,0,0,2488,2490,3,358,179,0,2489,2486,1,0,
0,0,2490,2491,1,0,0,0,2491,2489,1,0,0,0,2491,2492,1,0,0,0,2492,2494,1,0,
0,0,2493,2471,1,0,0,0,2493,2480,1,0,0,0,2494,2503,1,0,0,0,2495,2497,5,167,
0,0,2496,2495,1,0,0,0,2496,2497,1,0,0,0,2497,2498,1,0,0,0,2498,2500,5,125,
0,0,2499,2501,5,167,0,0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2502,1,
0,0,0,2502,2504,3,260,130,0,2503,2496,1,0,0,0,2503,2504,1,0,0,0,2504,2506,
1,0,0,0,2505,2507,5,167,0,0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,2508,
1,0,0,0,2508,2509,5,126,0,0,2509,357,1,0,0,0,2510,2512,5,127,0,0,2511,2513,
5,167,0,0,2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,2514,1,0,0,0,2514,2516,
3,260,130,0,2515,2517,5,167,0,0,2516,2515,1,0,0,0,2516,2517,1,0,0,0,2517,
2518,1,0,0,0,2518,2520,5,128,0,0,2519,2521,5,167,0,0,2520,2519,1,0,0,0,2520,
2521,1,0,0,0,2521,2522,1,0,0,0,2522,2523,3,260,130,0,2523,359,1,0,0,0,2524,
2525,3,406,203,0,2525,361,1,0,0,0,2526,2529,3,396,198,0,2527,2529,3,394,
197,0,2528,2526,1,0,0,0,2528,2527,1,0,0,0,2529,363,1,0,0,0,2530,2532,5,14,
0,0,2531,2533,5,167,0,0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,2533,2551,1,
0,0,0,2534,2536,3,370,185,0,2535,2537,5,167,0,0,2536,2535,1,0,0,0,2536,2537,
1,0,0,0,2537,2548,1,0,0,0,2538,2540,5,15,0,0,2539,2541,5,167,0,0,2540,2539,
1,0,0,0,2540,2541,1,0,0,0,2541,2542,1,0,0,0,2542,2544,3,370,185,0,2543,2545,
5,167,0,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,2547,1,0,0,0,2546,2538,
1,0,0,0,2547,2550,1,0,0,0,2548,2546,1,0,0,0,2548,2549,1,0,0,0,2549,2552,
1,0,0,0,2550,2548,1,0,0,0,2551,2534,1,0,0,0,2551,2552,1,0,0,0,2552,2553,
1,0,0,0,2553,2554,5,16,0,0,2554,365,1,0,0,0,2555,2557,3,360,180,0,2556,2558,
5,167,0,0,2557,2556,1,0,0,0,2557,2558,1,0,0,0,2558,2559,1,0,0,0,2559,2561,
5,14,0,0,2560,2562,5,167,0,0,2561,2560,1,0,0,0,2561,2562,1,0,0,0,2562,2564,
1,0,0,0,2563,2565,3,368,184,0,2564,2563,1,0,0,0,2564,2565,1,0,0,0,2565,2576,
1,0,0,0,2566,2568,5,167,0,0,2567,2566,1,0,0,0,2567,2568,1,0,0,0,2568,2569,
1,0,0,0,2569,2571,5,15,0,0,2570,2572,5,167,0,0,2571,2570,1,0,0,0,2571,2572,
1,0,0,0,2572,2573,1,0,0,0,2573,2575,3,368,184,0,2574,2567,1,0,0,0,2575,2578,
1,0,0,0,2576,2574,1,0,0,0,2576,2577,1,0,0,0,2577,2580,1,0,0,0,2578,2576,
1,0,0,0,2579,2581,5,167,0,0,2580,2579,1,0,0,0,2580,2581,1,0,0,0,2581,2582,
1,0,0,0,2582,2583,5,16,0,0,2583,367,1,0,0,0,2584,2589,3,370,185,0,2585,2589,
3,372,186,0,2586,2589,3,374,187,0,2587,2589,3,376,188,0,2588,2584,1,0,0,
0,2588,2585,1,0,0,0,2588,2586,1,0,0,0,2588,2587,1,0,0,0,2589,369,1,0,0,0,
2590,2592,3,392,196,0,2591,2593,5,167,0,0,2592,2591,1,0,0,0,2592,2593,1,
0,0,0,2593,2594,1,0,0,0,2594,2596,5,2,0,0,2595,2597,5,167,0,0,2596,2595,
1,0,0,0,2596,2597,1,0,0,0,2597,2598,1,0,0,0,2598,2599,3,260,130,0,2599,371,
1,0,0,0,2600,2601,5,7,0,0,2601,2602,3,360,180,0,2602,373,1,0,0,0,2603,2604,
3,360,180,0,2604,375,1,0,0,0,2605,2606,5,7,0,0,2606,2607,5,23,0,0,2607,377,
1,0,0,0,2608,2611,3,380,190,0,2609,2611,3,382,191,0,2610,2608,1,0,0,0,2610,
2609,1,0,0,0,2611,379,1,0,0,0,2612,2614,5,14,0,0,2613,2615,5,167,0,0,2614,
2613,1,0,0,0,2614,2615,1,0,0,0,2615,2616,1,0,0,0,2616,2618,3,384,192,0,2617,
2619,5,167,0,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,2620,1,0,0,0,2620,
2621,5,16,0,0,2621,381,1,0,0,0,2622,2623,5,34,0,0,2623,2624,3,384,192,0,
2624,383,1,0,0,0,2625,2628,3,406,203,0,2626,2628,5,152,0,0,2627,2625,1,0,
0,0,2627,2626,1,0,0,0,2628,385,1,0,0,0,2629,2640,3,388,194,0,2630,2632,5,
167,0,0,2631,2630,1,0,0,0,2631,2632,1,0,0,0,2632,2633,1,0,0,0,2633,2635,
5,15,0,0,2634,2636,5,167,0,0,2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,2637,
1,0,0,0,2637,2639,3,388,194,0,2638,2631,1,0,0,0,2639,2642,1,0,0,0,2640,2638,
1,0,0,0,2640,2641,1,0,0,0,2641,387,1,0,0,0,2642,2640,1,0,0,0,2643,2648,3,
322,161,0,2644,2646,5,167,0,0,2645,2644,1,0,0,0,2645,2646,1,0,0,0,2646,2647,
1,0,0,0,2647,2649,3,354,177,0,2648,2645,1,0,0,0,2649,2650,1,0,0,0,2650,2648,
1,0,0,0,2650,2651,1,0,0,0,2651,389,1,0,0,0,2652,2663,3,392,196,0,2653,2655,
5,167,0,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,2655,2656,1,0,0,0,2656,2658,
5,15,0,0,2657,2659,5,167,0,0,2658,2657,1,0,0,0,2658,2659,1,0,0,0,2659,2660,
1,0,0,0,2660,2662,3,392,196,0,2661,2654,1,0,0,0,2662,2665,1,0,0,0,2663,2661,
1,0,0,0,2663,2664,1,0,0,0,2664,391,1,0,0,0,2665,2663,1,0,0,0,2666,2667,3,
406,203,0,2667,393,1,0,0,0,2668,2669,7,6,0,0,2669,395,1,0,0,0,2670,2671,
7,7,0,0,2671,397,1,0,0,0,2672,2673,3,406,203,0,2673,2674,5,7,0,0,2674,2676,
1,0,0,0,2675,2672,1,0,0,0,2676,2679,1,0,0,0,2677,2675,1,0,0,0,2677,2678,
1,0,0,0,2678,399,1,0,0,0,2679,2677,1,0,0,0,2680,2681,7,8,0,0,2681,401,1,
0,0,0,2682,2683,7,9,0,0,2683,403,1,0,0,0,2684,2685,7,10,0,0,2685,405,1,0,
0,0,2686,2691,3,408,204,0,2687,2691,5,163,0,0,2688,2691,5,166,0,0,2689,2691,
5,154,0,0,2690,2686,1,0,0,0,2690,2687,1,0,0,0,2690,2688,1,0,0,0,2690,2689,
1,0,0,0,2691,407,1,0,0,0,2692,2693,7,11,0,0,2693,409,1,0,0,0,422,413,417,
424,428,433,437,440,445,453,461,474,478,482,491,496,500,503,506,511,515,
522,540,563,571,573,577,582,588,594,598,602,606,610,617,620,624,628,634,
638,642,646,650,657,660,668,677,682,686,689,696,704,708,714,719,725,736,
740,746,750,754,759,764,770,775,785,789,794,801,806,809,825,837,883,887,
891,895,903,907,912,916,930,934,939,943,949,953,967,974,980,990,994,1000,
1008,1019,1025,1037,1043,1055,1059,1069,1082,1086,1090,1096,1100,1103,1107,
1117,1124,1137,1141,1149,1155,1159,1163,1168,1173,1177,1183,1187,1193,1197,
1203,1207,1211,1215,1219,1223,1228,1235,1239,1244,1251,1255,1259,1267,1274,
1277,1283,1286,1291,1294,1298,1301,1304,1311,1315,1319,1323,1326,1330,1334,
1339,1344,1348,1353,1357,1366,1372,1375,1379,1382,1389,1392,1395,1399,1404,
1408,1416,1420,1425,1430,1434,1452,1456,1461,1474,1478,1480,1483,1492,1496,
1500,1512,1516,1521,1531,1537,1541,1546,1550,1554,1558,1564,1568,1573,1579,
1588,1597,1605,1611,1615,1620,1629,1633,1638,1643,1647,1652,1656,1660,1665,
1672,1676,1680,1682,1686,1688,1692,1694,1700,1706,1709,1712,1718,1723,1727,
1732,1736,1740,1742,1746,1748,1751,1755,1757,1763,1767,1773,1779,1786,1792,
1797,1805,1809,1811,1815,1819,1821,1823,1838,1848,1858,1863,1867,1874,1879,
1884,1888,1892,1896,1899,1901,1906,1910,1914,1918,1922,1926,1929,1931,1936,
1940,1945,1950,1954,1961,1968,1972,1976,1980,1995,1998,2011,2013,2018,2022,
2026,2031,2035,2039,2047,2051,2055,2063,2067,2071,2079,2083,2087,2095,2099,
2103,2111,2115,2119,2127,2131,2135,2139,2142,2145,2153,2157,2161,2165,2169,
2173,2177,2181,2185,2193,2197,2201,2207,2211,2215,2219,2230,2234,2238,2256,
2265,2273,2277,2281,2285,2289,2292,2298,2303,2308,2313,2318,2323,2328,2331,
2335,2339,2345,2350,2354,2357,2367,2371,2375,2377,2381,2385,2389,2393,2396,
2409,2413,2417,2420,2423,2429,2433,2437,2439,2443,2447,2451,2453,2457,2461,
2467,2473,2478,2482,2486,2491,2493,2496,2500,2503,2506,2512,2516,2520,2528,
2532,2536,2540,2544,2548,2551,2557,2561,2564,2567,2571,2576,2580,2588,2592,
2596,2610,2614,2618,2627,2631,2635,2640,2645,2650,2654,2658,2663,2677,2690];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class CypherParser extends antlr4.Parser {

    static grammarFileName = "Cypher.g4";
    static literalNames = [ null, "';'", "':'", "'-'", "'=>'", "'://'", 
                            "'/'", "'.'", "'@'", "'#'", "'?'", "'&'", "'='", 
                            "'+'", "'{'", "','", "'}'", "'['", "']'", "'('", 
                            "')'", "'+='", "'|'", "'*'", "'..'", "'%'", 
                            "'^'", "'=~'", "'<>'", "'!='", "'<'", "'>'", 
                            "'<='", "'>='", "'$'", "'\\u27E8'", "'\\u3008'", 
                            "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                            "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                            "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                            "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                            "'\\uFF0D'", null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'0'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, "CYPHER", 
                             "EXPLAIN", "PROFILE", "USING", "PERIODIC", 
                             "COMMIT", "UNION", "ALL", "CREATE", "DROP", 
                             "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", 
                             "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", 
                             "HEADERS", "FROM", "AS", "FIELDTERMINATOR", 
                             "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", 
                             "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", 
                             "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", 
                             "LIMIT", "ASCENDING", "ASC", "DESCENDING", 
                             "DESC", "JOIN", "SCAN", "START", "NODE", "RELATIONSHIP", 
                             "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", 
                             "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                             "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", 
                             "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", 
                             "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", 
                             "YIELD", "KEY", "BTREE", "EXIST", "FOR", "OPTIONS", 
                             "EXECUTE", "DEFINED", "FUNCTION", "FUNCTIONS", 
                             "BOOSTED", "PROCEDURE", "PROCEDURES", "ADMIN", 
                             "ADMINISTRATOR", "BRIEF", "VERBOSE", "OUTPUT", 
                             "StringLiteral", "UrlHex", "EscapedChar", "HexInteger", 
                             "DecimalInteger", "OctalInteger", "HexLetter", 
                             "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", 
                             "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                             "RegularDecimalReal", "UnescapedSymbolicName", 
                             "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
                             "SP", "WHITESPACE", "Comment", "ERROR_TOKEN" ];
    static ruleNames = [ "raw", "cypher", "cypherPart", "cypherConsoleCommand", 
                         "cypherConsoleCommandName", "cypherConsoleCommandParameters", 
                         "cypherConsoleCommandParameter", "arrowExpression", 
                         "url", "uri", "scheme", "host", "hostname", "hostnumber", 
                         "port", "path", "user", "login", "password", "frag", 
                         "urlQuery", "search", "searchparameter", "string", 
                         "urlDigits", "json", "obj", "pair", "array", "value", 
                         "keyValueLiteral", "commandPath", "subCommand", 
                         "cypherQuery", "queryOptions", "anyCypherOption", 
                         "cypherOption", "versionNumber", "explain", "profile", 
                         "configurationOption", "statement", "query", "regularQuery", 
                         "bulkImportQuery", "singleQuery", "periodicCommitHint", 
                         "loadCSVQuery", "union", "clause", "command", "createUniqueConstraint", 
                         "createNodeKeyConstraint", "createNodePropertyExistenceConstraint", 
                         "createRelationshipPropertyExistenceConstraint", 
                         "createIndex", "dropUniqueConstraint", "dropNodeKeyConstraint", 
                         "dropNodePropertyExistenceConstraint", "dropRelationshipPropertyExistenceConstraint", 
                         "dropIndex", "index", "uniqueConstraint", "nodeKeyConstraint", 
                         "nodePropertyExistenceConstraint", "relationshipPropertyExistenceConstraint", 
                         "relationshipPatternSyntax", "loadCSVClause", "matchClause", 
                         "unwindClause", "mergeClause", "mergeAction", "createClause", 
                         "createUniqueClause", "setClause", "setItem", "deleteClause", 
                         "removeClause", "removeItem", "foreachClause", 
                         "withClause", "returnClause", "returnBody", "func", 
                         "returnItems", "returnItem", "call", "procedureInvocation", 
                         "procedureInvocationBody", "procedureArguments", 
                         "procedureResults", "procedureResult", "aliasedProcedureResult", 
                         "simpleProcedureResult", "procedureOutput", "order", 
                         "skip", "limit", "sortItem", "hint", "startClause", 
                         "startPoint", "lookup", "nodeLookup", "relationshipLookup", 
                         "identifiedIndexLookup", "indexQuery", "idLookup", 
                         "literalIds", "where", "pattern", "patternPart", 
                         "anonymousPatternPart", "patternElement", "nodePattern", 
                         "patternElementChain", "relationshipPattern", "relationshipPatternStart", 
                         "relationshipPatternEnd", "relationshipDetail", 
                         "properties", "relType", "relationshipTypes", "relationshipType", 
                         "relationshipTypeOptionalColon", "nodeLabels", 
                         "nodeLabel", "rangeLiteral", "labelName", "relTypeName", 
                         "expression", "orExpression", "xorExpression", 
                         "andExpression", "notExpression", "comparisonExpression", 
                         "addOrSubtractExpression", "multiplyDivideModuloExpression", 
                         "powerOfExpression", "unaryAddOrSubtractExpression", 
                         "stringListNullOperatorExpression", "propertyOrLabelsExpression", 
                         "filterFunction", "filterFunctionName", "existsFunction", 
                         "existsFunctionName", "allFunction", "allFunctionName", 
                         "anyFunction", "anyFunctionName", "noneFunction", 
                         "noneFunctionName", "singleFunction", "singleFunctionName", 
                         "extractFunction", "extractFunctionName", "reduceFunction", 
                         "reduceFunctionName", "shortestPathPatternFunction", 
                         "shortestPathFunctionName", "allShortestPathFunctionName", 
                         "atom", "literal", "stringLiteral", "booleanLiteral", 
                         "listLiteral", "partialComparisonExpression", "parenthesizedExpression", 
                         "relationshipsPattern", "filterExpression", "idInColl", 
                         "functionInvocation", "functionInvocationBody", 
                         "functionName", "procedureName", "listComprehension", 
                         "patternComprehension", "propertyLookup", "caseExpression", 
                         "caseAlternatives", "variable", "numberLiteral", 
                         "mapLiteral", "mapProjection", "mapProjectionVariants", 
                         "literalEntry", "propertySelector", "variableSelector", 
                         "allPropertiesSelector", "parameter", "legacyParameter", 
                         "newParameter", "parameterName", "propertyExpressions", 
                         "propertyExpression", "propertyKeys", "propertyKeyName", 
                         "integerLiteral", "doubleLiteral", "namespace", 
                         "leftArrowHead", "rightArrowHead", "dash", "symbolicName", 
                         "keyword" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CypherParser.ruleNames;
        this.literalNames = CypherParser.literalNames;
        this.symbolicNames = CypherParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	raw() {
	    let localctx = new RawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CypherParser.RULE_raw);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 417;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 413;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 410;
	                    this.matchWildcard(); 
	                }
	                this.state = 415;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	            }

	            break;

	        case 2:
	            this.state = 416;
	            this.cypherPart();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cypher() {
	    let localctx = new CypherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CypherParser.RULE_cypher);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        this.raw();
	        this.state = 424;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 420;
	                this.match(CypherParser.T__0);
	                this.state = 421;
	                this.raw(); 
	            }
	            this.state = 426;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	        }

	        this.state = 428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__0) {
	            this.state = 427;
	            this.match(CypherParser.T__0);
	        }

	        this.state = 430;
	        this.match(CypherParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cypherPart() {
	    let localctx = new CypherPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CypherParser.RULE_cypherPart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 432;
	            this.match(CypherParser.SP);
	        }

	        this.state = 437;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USING:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.LOAD:
	        case CypherParser.WITH:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.RETURN:
	        case CypherParser.START:
	        case CypherParser.CALL:
	            this.state = 435;
	            this.cypherQuery();
	            break;
	        case CypherParser.T__1:
	            this.state = 436;
	            this.cypherConsoleCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 439;
	            this.match(CypherParser.SP);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cypherConsoleCommand() {
	    let localctx = new CypherConsoleCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CypherParser.RULE_cypherConsoleCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        this.cypherConsoleCommandName();
	        this.state = 445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        if(la_===1) {
	            this.state = 443;
	            this.match(CypherParser.SP);
	            this.state = 444;
	            this.cypherConsoleCommandParameters();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cypherConsoleCommandName() {
	    let localctx = new CypherConsoleCommandNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CypherParser.RULE_cypherConsoleCommandName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.match(CypherParser.T__1);
	        this.state = 448;
	        this.symbolicName();
	        this.state = 453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__2) {
	            this.state = 449;
	            this.match(CypherParser.T__2);
	            this.state = 450;
	            this.symbolicName();
	            this.state = 455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cypherConsoleCommandParameters() {
	    let localctx = new CypherConsoleCommandParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CypherParser.RULE_cypherConsoleCommandParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 456;
	        this.cypherConsoleCommandParameter();
	        this.state = 461;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 457;
	                this.match(CypherParser.SP);
	                this.state = 458;
	                this.cypherConsoleCommandParameter(); 
	            }
	            this.state = 463;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cypherConsoleCommandParameter() {
	    let localctx = new CypherConsoleCommandParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CypherParser.RULE_cypherConsoleCommandParameter);
	    try {
	        this.state = 474;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 464;
	            this.url();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 465;
	            this.json();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 466;
	            this.arrowExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 467;
	            this.mapLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 468;
	            this.keyValueLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 469;
	            this.stringLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 470;
	            this.numberLiteral();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 471;
	            this.booleanLiteral();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 472;
	            this.subCommand();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 473;
	            this.commandPath();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowExpression() {
	    let localctx = new ArrowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CypherParser.RULE_arrowExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 476;
	        this.symbolicName();
	        this.state = 478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 477;
	            this.match(CypherParser.SP);
	        }

	        this.state = 480;
	        this.match(CypherParser.T__3);
	        this.state = 482;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 481;
	            this.match(CypherParser.SP);
	        }

	        this.state = 484;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	url() {
	    let localctx = new UrlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CypherParser.RULE_url);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 486;
	        this.uri();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uri() {
	    let localctx = new UriContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CypherParser.RULE_uri);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 488;
	        this.scheme();
	        this.state = 489;
	        this.match(CypherParser.T__4);
	        this.state = 491;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        if(la_===1) {
	            this.state = 490;
	            this.login();

	        }
	        this.state = 493;
	        this.host();
	        this.state = 496;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__1) {
	            this.state = 494;
	            this.match(CypherParser.T__1);
	            this.state = 495;
	            this.port();
	        }

	        this.state = 500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__5) {
	            this.state = 498;
	            this.match(CypherParser.T__5);
	            this.state = 499;
	            this.path();
	        }

	        this.state = 503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__9) {
	            this.state = 502;
	            this.urlQuery();
	        }

	        this.state = 506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__8) {
	            this.state = 505;
	            this.frag();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scheme() {
	    let localctx = new SchemeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CypherParser.RULE_scheme);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	host() {
	    let localctx = new HostContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CypherParser.RULE_host);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 511;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__5) {
	            this.state = 510;
	            this.match(CypherParser.T__5);
	        }

	        this.state = 515;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.RELATIONSHIP:
	        case CypherParser.REL:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.ALLSHORTESTPATHS:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.KEY:
	        case CypherParser.BTREE:
	        case CypherParser.EXIST:
	        case CypherParser.FOR:
	        case CypherParser.OPTIONS:
	        case CypherParser.EXECUTE:
	        case CypherParser.DEFINED:
	        case CypherParser.FUNCTION:
	        case CypherParser.FUNCTIONS:
	        case CypherParser.BOOSTED:
	        case CypherParser.PROCEDURE:
	        case CypherParser.PROCEDURES:
	        case CypherParser.ADMIN:
	        case CypherParser.ADMINISTRATOR:
	        case CypherParser.BRIEF:
	        case CypherParser.VERBOSE:
	        case CypherParser.OUTPUT:
	        case CypherParser.HexLetter:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.state = 513;
	            this.hostname();
	            break;
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	            this.state = 514;
	            this.hostnumber();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hostname() {
	    let localctx = new HostnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CypherParser.RULE_hostname);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        this.string();
	        this.state = 522;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__6) {
	            this.state = 518;
	            this.match(CypherParser.T__6);
	            this.state = 519;
	            this.string();
	            this.state = 524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hostnumber() {
	    let localctx = new HostnumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CypherParser.RULE_hostnumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 525;
	        this.urlDigits();
	        this.state = 526;
	        this.match(CypherParser.T__6);
	        this.state = 527;
	        this.urlDigits();
	        this.state = 528;
	        this.match(CypherParser.T__6);
	        this.state = 529;
	        this.urlDigits();
	        this.state = 530;
	        this.match(CypherParser.T__6);
	        this.state = 531;
	        this.urlDigits();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	port() {
	    let localctx = new PortContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CypherParser.RULE_port);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.urlDigits();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	path() {
	    let localctx = new PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CypherParser.RULE_path);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        this.string();
	        this.state = 540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__5) {
	            this.state = 536;
	            this.match(CypherParser.T__5);
	            this.state = 537;
	            this.string();
	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	user() {
	    let localctx = new UserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CypherParser.RULE_user);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	login() {
	    let localctx = new LoginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CypherParser.RULE_login);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this.user();
	        this.state = 546;
	        this.match(CypherParser.T__1);
	        this.state = 547;
	        this.password();
	        this.state = 548;
	        this.match(CypherParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	password() {
	    let localctx = new PasswordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CypherParser.RULE_password);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frag() {
	    let localctx = new FragContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CypherParser.RULE_frag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this.match(CypherParser.T__8);
	        this.state = 553;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	urlQuery() {
	    let localctx = new UrlQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CypherParser.RULE_urlQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 555;
	        this.match(CypherParser.T__9);
	        this.state = 556;
	        this.search();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	search() {
	    let localctx = new SearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CypherParser.RULE_search);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this.searchparameter();
	        this.state = 563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__10) {
	            this.state = 559;
	            this.match(CypherParser.T__10);
	            this.state = 560;
	            this.searchparameter();
	            this.state = 565;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchparameter() {
	    let localctx = new SearchparameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CypherParser.RULE_searchparameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 566;
	        this.string();
	        this.state = 573;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__11) {
	            this.state = 567;
	            this.match(CypherParser.T__11);
	            this.state = 571;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CypherParser.CYPHER:
	            case CypherParser.EXPLAIN:
	            case CypherParser.PROFILE:
	            case CypherParser.USING:
	            case CypherParser.PERIODIC:
	            case CypherParser.COMMIT:
	            case CypherParser.UNION:
	            case CypherParser.ALL:
	            case CypherParser.CREATE:
	            case CypherParser.DROP:
	            case CypherParser.INDEX:
	            case CypherParser.ON:
	            case CypherParser.CONSTRAINT:
	            case CypherParser.ASSERT:
	            case CypherParser.IS:
	            case CypherParser.UNIQUE:
	            case CypherParser.EXISTS:
	            case CypherParser.LOAD:
	            case CypherParser.CSV:
	            case CypherParser.WITH:
	            case CypherParser.HEADERS:
	            case CypherParser.FROM:
	            case CypherParser.AS:
	            case CypherParser.FIELDTERMINATOR:
	            case CypherParser.OPTIONAL:
	            case CypherParser.MATCH:
	            case CypherParser.UNWIND:
	            case CypherParser.MERGE:
	            case CypherParser.SET:
	            case CypherParser.DETACH:
	            case CypherParser.DELETE:
	            case CypherParser.REMOVE:
	            case CypherParser.FOREACH:
	            case CypherParser.IN:
	            case CypherParser.DISTINCT:
	            case CypherParser.RETURN:
	            case CypherParser.ORDER:
	            case CypherParser.BY:
	            case CypherParser.L_SKIP:
	            case CypherParser.LIMIT:
	            case CypherParser.ASCENDING:
	            case CypherParser.ASC:
	            case CypherParser.DESCENDING:
	            case CypherParser.DESC:
	            case CypherParser.JOIN:
	            case CypherParser.SCAN:
	            case CypherParser.START:
	            case CypherParser.NODE:
	            case CypherParser.RELATIONSHIP:
	            case CypherParser.REL:
	            case CypherParser.WHERE:
	            case CypherParser.SHORTESTPATH:
	            case CypherParser.ALLSHORTESTPATHS:
	            case CypherParser.OR:
	            case CypherParser.XOR:
	            case CypherParser.AND:
	            case CypherParser.NOT:
	            case CypherParser.STARTS:
	            case CypherParser.ENDS:
	            case CypherParser.CONTAINS:
	            case CypherParser.NULL:
	            case CypherParser.COUNT:
	            case CypherParser.FILTER:
	            case CypherParser.EXTRACT:
	            case CypherParser.ANY:
	            case CypherParser.NONE:
	            case CypherParser.SINGLE:
	            case CypherParser.TRUE:
	            case CypherParser.FALSE:
	            case CypherParser.REDUCE:
	            case CypherParser.CASE:
	            case CypherParser.ELSE:
	            case CypherParser.END:
	            case CypherParser.WHEN:
	            case CypherParser.THEN:
	            case CypherParser.CALL:
	            case CypherParser.YIELD:
	            case CypherParser.KEY:
	            case CypherParser.BTREE:
	            case CypherParser.EXIST:
	            case CypherParser.FOR:
	            case CypherParser.OPTIONS:
	            case CypherParser.EXECUTE:
	            case CypherParser.DEFINED:
	            case CypherParser.FUNCTION:
	            case CypherParser.FUNCTIONS:
	            case CypherParser.BOOSTED:
	            case CypherParser.PROCEDURE:
	            case CypherParser.PROCEDURES:
	            case CypherParser.ADMIN:
	            case CypherParser.ADMINISTRATOR:
	            case CypherParser.BRIEF:
	            case CypherParser.VERBOSE:
	            case CypherParser.OUTPUT:
	            case CypherParser.HexLetter:
	            case CypherParser.UnescapedSymbolicName:
	            case CypherParser.EscapedSymbolicName:
	                this.state = 568;
	                this.string();
	                break;
	            case CypherParser.HexInteger:
	            case CypherParser.DecimalInteger:
	            case CypherParser.OctalInteger:
	                this.state = 569;
	                this.urlDigits();
	                break;
	            case CypherParser.UrlHex:
	                this.state = 570;
	                this.match(CypherParser.UrlHex);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CypherParser.RULE_string);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        this.symbolicName();
	        this.state = 582;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 577;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.T__6 || _la===CypherParser.T__12) {
	                    this.state = 576;
	                    _la = this._input.LA(1);
	                    if(!(_la===CypherParser.T__6 || _la===CypherParser.T__12)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 579;
	                this.symbolicName(); 
	            }
	            this.state = 584;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	urlDigits() {
	    let localctx = new UrlDigitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CypherParser.RULE_urlDigits);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 586; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 585;
	            this.integerLiteral();
	            this.state = 588; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json() {
	    let localctx = new JsonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CypherParser.RULE_json);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	obj() {
	    let localctx = new ObjContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CypherParser.RULE_obj);
	    var _la = 0; // Token type
	    try {
	        this.state = 620;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 592;
	            this.match(CypherParser.T__13);
	            this.state = 594;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 593;
	                this.match(CypherParser.SP);
	            }

	            this.state = 596;
	            this.pair();
	            this.state = 598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 597;
	                this.match(CypherParser.SP);
	            }

	            this.state = 610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__14) {
	                this.state = 600;
	                this.match(CypherParser.T__14);
	                this.state = 602;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 601;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 604;
	                this.pair();
	                this.state = 606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 605;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 612;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 613;
	            this.match(CypherParser.T__15);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 615;
	            this.match(CypherParser.T__13);
	            this.state = 617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 616;
	                this.match(CypherParser.SP);
	            }

	            this.state = 619;
	            this.match(CypherParser.T__15);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pair() {
	    let localctx = new PairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CypherParser.RULE_pair);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 622;
	        this.stringLiteral();
	        this.state = 624;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 623;
	            this.match(CypherParser.SP);
	        }

	        this.state = 626;
	        this.match(CypherParser.T__1);
	        this.state = 628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 627;
	            this.match(CypherParser.SP);
	        }

	        this.state = 630;
	        this.value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array() {
	    let localctx = new ArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CypherParser.RULE_array);
	    var _la = 0; // Token type
	    try {
	        this.state = 660;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 632;
	            this.match(CypherParser.T__16);
	            this.state = 634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 633;
	                this.match(CypherParser.SP);
	            }

	            this.state = 636;
	            this.value();
	            this.state = 638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 637;
	                this.match(CypherParser.SP);
	            }

	            this.state = 650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__14) {
	                this.state = 640;
	                this.match(CypherParser.T__14);
	                this.state = 642;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 641;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 644;
	                this.value();
	                this.state = 646;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 645;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 652;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 653;
	            this.match(CypherParser.T__17);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 655;
	            this.match(CypherParser.T__16);
	            this.state = 657;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 656;
	                this.match(CypherParser.SP);
	            }

	            this.state = 659;
	            this.match(CypherParser.T__17);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CypherParser.RULE_value);
	    try {
	        this.state = 668;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.StringLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 662;
	            this.stringLiteral();
	            break;
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	        case CypherParser.ExponentDecimalReal:
	        case CypherParser.RegularDecimalReal:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 663;
	            this.numberLiteral();
	            break;
	        case CypherParser.T__13:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 664;
	            this.obj();
	            break;
	        case CypherParser.T__16:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 665;
	            this.array();
	            break;
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 666;
	            this.booleanLiteral();
	            break;
	        case CypherParser.NULL:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 667;
	            this.match(CypherParser.NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyValueLiteral() {
	    let localctx = new KeyValueLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CypherParser.RULE_keyValueLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 670;
	        this.variable();
	        this.state = 671;
	        this.match(CypherParser.T__1);
	        this.state = 672;
	        this.match(CypherParser.SP);
	        this.state = 677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 673;
	            this.match(CypherParser.StringLiteral);
	            break;

	        case 2:
	            this.state = 674;
	            this.numberLiteral();
	            break;

	        case 3:
	            this.state = 675;
	            this.booleanLiteral();
	            break;

	        case 4:
	            this.state = 676;
	            this.symbolicName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commandPath() {
	    let localctx = new CommandPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CypherParser.RULE_commandPath);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 679;
	        		this.match(CypherParser.T__5);
	        		this.state = 682;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case CypherParser.CYPHER:
	        		case CypherParser.EXPLAIN:
	        		case CypherParser.PROFILE:
	        		case CypherParser.USING:
	        		case CypherParser.PERIODIC:
	        		case CypherParser.COMMIT:
	        		case CypherParser.UNION:
	        		case CypherParser.ALL:
	        		case CypherParser.CREATE:
	        		case CypherParser.DROP:
	        		case CypherParser.INDEX:
	        		case CypherParser.ON:
	        		case CypherParser.CONSTRAINT:
	        		case CypherParser.ASSERT:
	        		case CypherParser.IS:
	        		case CypherParser.UNIQUE:
	        		case CypherParser.EXISTS:
	        		case CypherParser.LOAD:
	        		case CypherParser.CSV:
	        		case CypherParser.WITH:
	        		case CypherParser.HEADERS:
	        		case CypherParser.FROM:
	        		case CypherParser.AS:
	        		case CypherParser.FIELDTERMINATOR:
	        		case CypherParser.OPTIONAL:
	        		case CypherParser.MATCH:
	        		case CypherParser.UNWIND:
	        		case CypherParser.MERGE:
	        		case CypherParser.SET:
	        		case CypherParser.DETACH:
	        		case CypherParser.DELETE:
	        		case CypherParser.REMOVE:
	        		case CypherParser.FOREACH:
	        		case CypherParser.IN:
	        		case CypherParser.DISTINCT:
	        		case CypherParser.RETURN:
	        		case CypherParser.ORDER:
	        		case CypherParser.BY:
	        		case CypherParser.L_SKIP:
	        		case CypherParser.LIMIT:
	        		case CypherParser.ASCENDING:
	        		case CypherParser.ASC:
	        		case CypherParser.DESCENDING:
	        		case CypherParser.DESC:
	        		case CypherParser.JOIN:
	        		case CypherParser.SCAN:
	        		case CypherParser.START:
	        		case CypherParser.NODE:
	        		case CypherParser.RELATIONSHIP:
	        		case CypherParser.REL:
	        		case CypherParser.WHERE:
	        		case CypherParser.SHORTESTPATH:
	        		case CypherParser.ALLSHORTESTPATHS:
	        		case CypherParser.OR:
	        		case CypherParser.XOR:
	        		case CypherParser.AND:
	        		case CypherParser.NOT:
	        		case CypherParser.STARTS:
	        		case CypherParser.ENDS:
	        		case CypherParser.CONTAINS:
	        		case CypherParser.NULL:
	        		case CypherParser.COUNT:
	        		case CypherParser.FILTER:
	        		case CypherParser.EXTRACT:
	        		case CypherParser.ANY:
	        		case CypherParser.NONE:
	        		case CypherParser.SINGLE:
	        		case CypherParser.TRUE:
	        		case CypherParser.FALSE:
	        		case CypherParser.REDUCE:
	        		case CypherParser.CASE:
	        		case CypherParser.ELSE:
	        		case CypherParser.END:
	        		case CypherParser.WHEN:
	        		case CypherParser.THEN:
	        		case CypherParser.CALL:
	        		case CypherParser.YIELD:
	        		case CypherParser.KEY:
	        		case CypherParser.BTREE:
	        		case CypherParser.EXIST:
	        		case CypherParser.FOR:
	        		case CypherParser.OPTIONS:
	        		case CypherParser.EXECUTE:
	        		case CypherParser.DEFINED:
	        		case CypherParser.FUNCTION:
	        		case CypherParser.FUNCTIONS:
	        		case CypherParser.BOOSTED:
	        		case CypherParser.PROCEDURE:
	        		case CypherParser.PROCEDURES:
	        		case CypherParser.ADMIN:
	        		case CypherParser.ADMINISTRATOR:
	        		case CypherParser.BRIEF:
	        		case CypherParser.VERBOSE:
	        		case CypherParser.OUTPUT:
	        		case CypherParser.HexLetter:
	        		case CypherParser.UnescapedSymbolicName:
	        		case CypherParser.EscapedSymbolicName:
	        		    this.state = 680;
	        		    this.symbolicName();
	        		    break;
	        		case CypherParser.HexInteger:
	        		case CypherParser.DecimalInteger:
	        		case CypherParser.OctalInteger:
	        		case CypherParser.ExponentDecimalReal:
	        		case CypherParser.RegularDecimalReal:
	        		    this.state = 681;
	        		    this.numberLiteral();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 686; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,47, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__5) {
	            this.state = 688;
	            this.match(CypherParser.T__5);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subCommand() {
	    let localctx = new SubCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CypherParser.RULE_subCommand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        this.symbolicName();
	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__2) {
	            this.state = 692;
	            this.match(CypherParser.T__2);
	            this.state = 693;
	            this.symbolicName();
	            this.state = 698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cypherQuery() {
	    let localctx = new CypherQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CypherParser.RULE_cypherQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this.queryOptions();
	        this.state = 700;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryOptions() {
	    let localctx = new QueryOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CypherParser.RULE_queryOptions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)))) !== 0)) {
	            this.state = 702;
	            this.anyCypherOption();
	            this.state = 704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 703;
	                this.match(CypherParser.SP);
	            }

	            this.state = 710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyCypherOption() {
	    let localctx = new AnyCypherOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CypherParser.RULE_anyCypherOption);
	    try {
	        this.state = 714;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 711;
	            this.cypherOption();
	            break;
	        case CypherParser.EXPLAIN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 712;
	            this.explain();
	            break;
	        case CypherParser.PROFILE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 713;
	            this.profile();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cypherOption() {
	    let localctx = new CypherOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CypherParser.RULE_cypherOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.match(CypherParser.CYPHER);
	        this.state = 719;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        if(la_===1) {
	            this.state = 717;
	            this.match(CypherParser.SP);
	            this.state = 718;
	            this.versionNumber();

	        }
	        this.state = 725;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 721;
	                this.match(CypherParser.SP);
	                this.state = 722;
	                this.configurationOption(); 
	            }
	            this.state = 727;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	versionNumber() {
	    let localctx = new VersionNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CypherParser.RULE_versionNumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.match(CypherParser.RegularDecimalReal);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explain() {
	    let localctx = new ExplainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CypherParser.RULE_explain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 730;
	        this.match(CypherParser.EXPLAIN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	profile() {
	    let localctx = new ProfileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CypherParser.RULE_profile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 732;
	        this.match(CypherParser.PROFILE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationOption() {
	    let localctx = new ConfigurationOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CypherParser.RULE_configurationOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 734;
	        this.symbolicName();
	        this.state = 736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 735;
	            this.match(CypherParser.SP);
	        }

	        this.state = 738;
	        this.match(CypherParser.T__11);
	        this.state = 740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 739;
	            this.match(CypherParser.SP);
	        }

	        this.state = 742;
	        this.symbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CypherParser.RULE_statement);
	    try {
	        this.state = 746;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 744;
	            this.command();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 745;
	            this.query();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CypherParser.RULE_query);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CREATE:
	        case CypherParser.LOAD:
	        case CypherParser.WITH:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.RETURN:
	        case CypherParser.START:
	        case CypherParser.CALL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.regularQuery();
	            break;
	        case CypherParser.USING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 749;
	            this.bulkImportQuery();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularQuery() {
	    let localctx = new RegularQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CypherParser.RULE_regularQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.singleQuery();
	        this.state = 759;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 754;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 753;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 756;
	                this.union(); 
	            }
	            this.state = 761;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bulkImportQuery() {
	    let localctx = new BulkImportQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CypherParser.RULE_bulkImportQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.periodicCommitHint();
	        this.state = 764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 763;
	            this.match(CypherParser.SP);
	        }

	        this.state = 766;
	        this.loadCSVQuery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleQuery() {
	    let localctx = new SingleQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CypherParser.RULE_singleQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this.clause();
	        this.state = 775;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 770;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 769;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 772;
	                this.clause(); 
	            }
	            this.state = 777;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	periodicCommitHint() {
	    let localctx = new PeriodicCommitHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CypherParser.RULE_periodicCommitHint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.match(CypherParser.USING);
	        this.state = 779;
	        this.match(CypherParser.SP);
	        this.state = 780;
	        this.match(CypherParser.PERIODIC);
	        this.state = 781;
	        this.match(CypherParser.SP);
	        this.state = 782;
	        this.match(CypherParser.COMMIT);
	        this.state = 785;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        if(la_===1) {
	            this.state = 783;
	            this.match(CypherParser.SP);
	            this.state = 784;
	            this.integerLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadCSVQuery() {
	    let localctx = new LoadCSVQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CypherParser.RULE_loadCSVQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        this.loadCSVClause();
	        this.state = 794;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 789;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 788;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 791;
	                this.clause(); 
	            }
	            this.state = 796;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union() {
	    let localctx = new UnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CypherParser.RULE_union);
	    var _la = 0; // Token type
	    try {
	        this.state = 809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 797;
	            this.match(CypherParser.UNION);
	            this.state = 798;
	            this.match(CypherParser.SP);
	            this.state = 799;
	            this.match(CypherParser.ALL);
	            this.state = 801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 800;
	                this.match(CypherParser.SP);
	            }

	            this.state = 803;
	            this.singleQuery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 804;
	            this.match(CypherParser.UNION);
	            this.state = 806;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 805;
	                this.match(CypherParser.SP);
	            }

	            this.state = 808;
	            this.singleQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clause() {
	    let localctx = new ClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CypherParser.RULE_clause);
	    try {
	        this.state = 825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 811;
	            this.loadCSVClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 812;
	            this.startClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 813;
	            this.matchClause();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 814;
	            this.unwindClause();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 815;
	            this.mergeClause();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 816;
	            this.createClause();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 817;
	            this.createUniqueClause();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 818;
	            this.setClause();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 819;
	            this.deleteClause();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 820;
	            this.removeClause();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 821;
	            this.foreachClause();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 822;
	            this.withClause();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 823;
	            this.returnClause();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 824;
	            this.call();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	command() {
	    let localctx = new CommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CypherParser.RULE_command);
	    try {
	        this.state = 837;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 827;
	            this.createIndex();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 828;
	            this.dropIndex();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 829;
	            this.createUniqueConstraint();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 830;
	            this.dropUniqueConstraint();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 831;
	            this.createNodeKeyConstraint();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 832;
	            this.dropNodeKeyConstraint();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 833;
	            this.createNodePropertyExistenceConstraint();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 834;
	            this.dropNodePropertyExistenceConstraint();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 835;
	            this.createRelationshipPropertyExistenceConstraint();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 836;
	            this.dropRelationshipPropertyExistenceConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUniqueConstraint() {
	    let localctx = new CreateUniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CypherParser.RULE_createUniqueConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 839;
	        this.match(CypherParser.CREATE);
	        this.state = 840;
	        this.match(CypherParser.SP);
	        this.state = 841;
	        this.uniqueConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createNodeKeyConstraint() {
	    let localctx = new CreateNodeKeyConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CypherParser.RULE_createNodeKeyConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this.match(CypherParser.CREATE);
	        this.state = 844;
	        this.match(CypherParser.SP);
	        this.state = 845;
	        this.nodeKeyConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createNodePropertyExistenceConstraint() {
	    let localctx = new CreateNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CypherParser.RULE_createNodePropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this.match(CypherParser.CREATE);
	        this.state = 848;
	        this.match(CypherParser.SP);
	        this.state = 849;
	        this.nodePropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRelationshipPropertyExistenceConstraint() {
	    let localctx = new CreateRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CypherParser.RULE_createRelationshipPropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.match(CypherParser.CREATE);
	        this.state = 852;
	        this.match(CypherParser.SP);
	        this.state = 853;
	        this.relationshipPropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndex() {
	    let localctx = new CreateIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CypherParser.RULE_createIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        this.match(CypherParser.CREATE);
	        this.state = 856;
	        this.match(CypherParser.SP);
	        this.state = 857;
	        this.index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropUniqueConstraint() {
	    let localctx = new DropUniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CypherParser.RULE_dropUniqueConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this.match(CypherParser.DROP);
	        this.state = 860;
	        this.match(CypherParser.SP);
	        this.state = 861;
	        this.uniqueConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropNodeKeyConstraint() {
	    let localctx = new DropNodeKeyConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CypherParser.RULE_dropNodeKeyConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        this.match(CypherParser.DROP);
	        this.state = 864;
	        this.match(CypherParser.SP);
	        this.state = 865;
	        this.nodeKeyConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropNodePropertyExistenceConstraint() {
	    let localctx = new DropNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CypherParser.RULE_dropNodePropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.match(CypherParser.DROP);
	        this.state = 868;
	        this.match(CypherParser.SP);
	        this.state = 869;
	        this.nodePropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRelationshipPropertyExistenceConstraint() {
	    let localctx = new DropRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CypherParser.RULE_dropRelationshipPropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(CypherParser.DROP);
	        this.state = 872;
	        this.match(CypherParser.SP);
	        this.state = 873;
	        this.relationshipPropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndex() {
	    let localctx = new DropIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CypherParser.RULE_dropIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 875;
	        this.match(CypherParser.DROP);
	        this.state = 876;
	        this.match(CypherParser.SP);
	        this.state = 877;
	        this.index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index() {
	    let localctx = new IndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CypherParser.RULE_index);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 879;
	        this.match(CypherParser.INDEX);
	        this.state = 880;
	        this.match(CypherParser.SP);
	        this.state = 881;
	        this.match(CypherParser.ON);
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 882;
	            this.match(CypherParser.SP);
	        }

	        this.state = 885;
	        this.nodeLabel();
	        this.state = 887;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 886;
	            this.match(CypherParser.SP);
	        }

	        this.state = 889;
	        this.match(CypherParser.T__18);
	        this.state = 891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 890;
	            this.match(CypherParser.SP);
	        }

	        this.state = 893;
	        this.propertyKeys();
	        this.state = 895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 894;
	            this.match(CypherParser.SP);
	        }

	        this.state = 897;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueConstraint() {
	    let localctx = new UniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CypherParser.RULE_uniqueConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 899;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 900;
	        this.match(CypherParser.SP);
	        this.state = 901;
	        this.match(CypherParser.ON);
	        this.state = 903;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 902;
	            this.match(CypherParser.SP);
	        }

	        this.state = 905;
	        this.match(CypherParser.T__18);
	        this.state = 907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 906;
	            this.match(CypherParser.SP);
	        }

	        this.state = 909;
	        this.variable();
	        this.state = 910;
	        this.nodeLabel();
	        this.state = 912;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 911;
	            this.match(CypherParser.SP);
	        }

	        this.state = 914;
	        this.match(CypherParser.T__19);
	        this.state = 916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 915;
	            this.match(CypherParser.SP);
	        }

	        this.state = 918;
	        this.match(CypherParser.ASSERT);
	        this.state = 919;
	        this.match(CypherParser.SP);
	        this.state = 920;
	        this.propertyExpression();
	        this.state = 921;
	        this.match(CypherParser.SP);
	        this.state = 922;
	        this.match(CypherParser.IS);
	        this.state = 923;
	        this.match(CypherParser.SP);
	        this.state = 924;
	        this.match(CypherParser.UNIQUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeKeyConstraint() {
	    let localctx = new NodeKeyConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CypherParser.RULE_nodeKeyConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 927;
	        this.match(CypherParser.SP);
	        this.state = 928;
	        this.match(CypherParser.ON);
	        this.state = 930;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 929;
	            this.match(CypherParser.SP);
	        }

	        this.state = 932;
	        this.match(CypherParser.T__18);
	        this.state = 934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 933;
	            this.match(CypherParser.SP);
	        }

	        this.state = 936;
	        this.variable();
	        this.state = 937;
	        this.nodeLabel();
	        this.state = 939;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 938;
	            this.match(CypherParser.SP);
	        }

	        this.state = 941;
	        this.match(CypherParser.T__19);
	        this.state = 943;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 942;
	            this.match(CypherParser.SP);
	        }

	        this.state = 945;
	        this.match(CypherParser.ASSERT);
	        this.state = 946;
	        this.match(CypherParser.SP);
	        this.state = 947;
	        this.match(CypherParser.T__18);
	        this.state = 949;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 948;
	            this.match(CypherParser.SP);
	        }

	        this.state = 951;
	        this.propertyExpressions();
	        this.state = 953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 952;
	            this.match(CypherParser.SP);
	        }

	        this.state = 955;
	        this.match(CypherParser.T__19);
	        this.state = 956;
	        this.match(CypherParser.SP);
	        this.state = 957;
	        this.match(CypherParser.IS);
	        this.state = 958;
	        this.match(CypherParser.SP);
	        this.state = 959;
	        this.match(CypherParser.NODE);
	        this.state = 960;
	        this.match(CypherParser.SP);
	        this.state = 961;
	        this.match(CypherParser.KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodePropertyExistenceConstraint() {
	    let localctx = new NodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CypherParser.RULE_nodePropertyExistenceConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 963;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 964;
	        this.match(CypherParser.SP);
	        this.state = 965;
	        this.match(CypherParser.ON);
	        this.state = 967;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 966;
	            this.match(CypherParser.SP);
	        }

	        this.state = 969;
	        this.match(CypherParser.T__18);
	        this.state = 970;
	        this.variable();
	        this.state = 971;
	        this.nodeLabel();
	        this.state = 972;
	        this.match(CypherParser.T__19);
	        this.state = 974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 973;
	            this.match(CypherParser.SP);
	        }

	        this.state = 976;
	        this.match(CypherParser.ASSERT);
	        this.state = 977;
	        this.match(CypherParser.SP);
	        this.state = 978;
	        this.match(CypherParser.EXISTS);
	        this.state = 980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 979;
	            this.match(CypherParser.SP);
	        }

	        this.state = 982;
	        this.match(CypherParser.T__18);
	        this.state = 983;
	        this.propertyExpression();
	        this.state = 984;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipPropertyExistenceConstraint() {
	    let localctx = new RelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CypherParser.RULE_relationshipPropertyExistenceConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 986;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 987;
	        this.match(CypherParser.SP);
	        this.state = 988;
	        this.match(CypherParser.ON);
	        this.state = 990;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 989;
	            this.match(CypherParser.SP);
	        }

	        this.state = 992;
	        this.relationshipPatternSyntax();
	        this.state = 994;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 993;
	            this.match(CypherParser.SP);
	        }

	        this.state = 996;
	        this.match(CypherParser.ASSERT);
	        this.state = 997;
	        this.match(CypherParser.SP);
	        this.state = 998;
	        this.match(CypherParser.EXISTS);
	        this.state = 1000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 999;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1002;
	        this.match(CypherParser.T__18);
	        this.state = 1003;
	        this.propertyExpression();
	        this.state = 1004;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipPatternSyntax() {
	    let localctx = new RelationshipPatternSyntaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CypherParser.RULE_relationshipPatternSyntax);
	    var _la = 0; // Token type
	    try {
	        this.state = 1059;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1006;
	            this.match(CypherParser.T__18);
	            this.state = 1008;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1007;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1010;
	            this.match(CypherParser.T__19);
	            this.state = 1011;
	            this.dash();
	            this.state = 1012;
	            this.match(CypherParser.T__16);
	            this.state = 1013;
	            this.variable();
	            this.state = 1014;
	            this.relType();
	            this.state = 1015;
	            this.match(CypherParser.T__17);
	            this.state = 1016;
	            this.dash();
	            this.state = 1017;
	            this.match(CypherParser.T__18);
	            this.state = 1019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1018;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1021;
	            this.match(CypherParser.T__19);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1023;
	            this.match(CypherParser.T__18);
	            this.state = 1025;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1024;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1027;
	            this.match(CypherParser.T__19);
	            this.state = 1028;
	            this.dash();
	            this.state = 1029;
	            this.match(CypherParser.T__16);
	            this.state = 1030;
	            this.variable();
	            this.state = 1031;
	            this.relType();
	            this.state = 1032;
	            this.match(CypherParser.T__17);
	            this.state = 1033;
	            this.dash();
	            this.state = 1034;
	            this.rightArrowHead();
	            this.state = 1035;
	            this.match(CypherParser.T__18);
	            this.state = 1037;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1036;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1039;
	            this.match(CypherParser.T__19);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1041;
	            this.match(CypherParser.T__18);
	            this.state = 1043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1042;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1045;
	            this.match(CypherParser.T__19);
	            this.state = 1046;
	            this.leftArrowHead();
	            this.state = 1047;
	            this.dash();
	            this.state = 1048;
	            this.match(CypherParser.T__16);
	            this.state = 1049;
	            this.variable();
	            this.state = 1050;
	            this.relType();
	            this.state = 1051;
	            this.match(CypherParser.T__17);
	            this.state = 1052;
	            this.dash();
	            this.state = 1053;
	            this.match(CypherParser.T__18);
	            this.state = 1055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1054;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1057;
	            this.match(CypherParser.T__19);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadCSVClause() {
	    let localctx = new LoadCSVClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CypherParser.RULE_loadCSVClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1061;
	        this.match(CypherParser.LOAD);
	        this.state = 1062;
	        this.match(CypherParser.SP);
	        this.state = 1063;
	        this.match(CypherParser.CSV);
	        this.state = 1064;
	        this.match(CypherParser.SP);
	        this.state = 1069;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WITH) {
	            this.state = 1065;
	            this.match(CypherParser.WITH);
	            this.state = 1066;
	            this.match(CypherParser.SP);
	            this.state = 1067;
	            this.match(CypherParser.HEADERS);
	            this.state = 1068;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1071;
	        this.match(CypherParser.FROM);
	        this.state = 1072;
	        this.match(CypherParser.SP);
	        this.state = 1073;
	        this.expression();
	        this.state = 1074;
	        this.match(CypherParser.SP);
	        this.state = 1075;
	        this.match(CypherParser.AS);
	        this.state = 1076;
	        this.match(CypherParser.SP);
	        this.state = 1077;
	        this.variable();
	        this.state = 1078;
	        this.match(CypherParser.SP);
	        this.state = 1082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.FIELDTERMINATOR) {
	            this.state = 1079;
	            this.match(CypherParser.FIELDTERMINATOR);
	            this.state = 1080;
	            this.match(CypherParser.SP);
	            this.state = 1081;
	            this.match(CypherParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchClause() {
	    let localctx = new MatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CypherParser.RULE_matchClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.OPTIONAL) {
	            this.state = 1084;
	            this.match(CypherParser.OPTIONAL);
	            this.state = 1085;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1088;
	        this.match(CypherParser.MATCH);
	        this.state = 1090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1089;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1092;
	        this.pattern();
	        this.state = 1096;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1093;
	                this.hint(); 
	            }
	            this.state = 1098;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
	        }

	        this.state = 1103;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 1100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1099;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1102;
	            this.where();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unwindClause() {
	    let localctx = new UnwindClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CypherParser.RULE_unwindClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1105;
	        this.match(CypherParser.UNWIND);
	        this.state = 1107;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1106;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1109;
	        this.expression();
	        this.state = 1110;
	        this.match(CypherParser.SP);
	        this.state = 1111;
	        this.match(CypherParser.AS);
	        this.state = 1112;
	        this.match(CypherParser.SP);
	        this.state = 1113;
	        this.variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeClause() {
	    let localctx = new MergeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CypherParser.RULE_mergeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1115;
	        this.match(CypherParser.MERGE);
	        this.state = 1117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1116;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1119;
	        this.patternPart();
	        this.state = 1124;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1120;
	                this.match(CypherParser.SP);
	                this.state = 1121;
	                this.mergeAction(); 
	            }
	            this.state = 1126;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeAction() {
	    let localctx = new MergeActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CypherParser.RULE_mergeAction);
	    try {
	        this.state = 1137;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1127;
	            this.match(CypherParser.ON);
	            this.state = 1128;
	            this.match(CypherParser.SP);
	            this.state = 1129;
	            this.match(CypherParser.MATCH);
	            this.state = 1130;
	            this.match(CypherParser.SP);
	            this.state = 1131;
	            this.setClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1132;
	            this.match(CypherParser.ON);
	            this.state = 1133;
	            this.match(CypherParser.SP);
	            this.state = 1134;
	            this.match(CypherParser.CREATE);
	            this.state = 1135;
	            this.match(CypherParser.SP);
	            this.state = 1136;
	            this.setClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createClause() {
	    let localctx = new CreateClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CypherParser.RULE_createClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1139;
	        this.match(CypherParser.CREATE);
	        this.state = 1141;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1140;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1143;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUniqueClause() {
	    let localctx = new CreateUniqueClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CypherParser.RULE_createUniqueClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.match(CypherParser.CREATE);
	        this.state = 1146;
	        this.match(CypherParser.SP);
	        this.state = 1147;
	        this.match(CypherParser.UNIQUE);
	        this.state = 1149;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1148;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1151;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setClause() {
	    let localctx = new SetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CypherParser.RULE_setClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1153;
	        this.match(CypherParser.SET);
	        this.state = 1155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1154;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1157;
	        this.setItem();
	        this.state = 1168;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1159;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1158;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1161;
	                this.match(CypherParser.T__14);
	                this.state = 1163;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1162;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1165;
	                this.setItem(); 
	            }
	            this.state = 1170;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItem() {
	    let localctx = new SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CypherParser.RULE_setItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 1207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1171;
	            this.propertyExpression();
	            this.state = 1173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1172;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1175;
	            this.match(CypherParser.T__11);
	            this.state = 1177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1176;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1179;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1181;
	            this.variable();
	            this.state = 1183;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1182;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1185;
	            this.match(CypherParser.T__11);
	            this.state = 1187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1186;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1189;
	            this.expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1191;
	            this.variable();
	            this.state = 1193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1192;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1195;
	            this.match(CypherParser.T__20);
	            this.state = 1197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1196;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1199;
	            this.expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1201;
	            this.variable();
	            this.state = 1203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1202;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1205;
	            this.nodeLabels();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteClause() {
	    let localctx = new DeleteClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CypherParser.RULE_deleteClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1211;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.DETACH) {
	            this.state = 1209;
	            this.match(CypherParser.DETACH);
	            this.state = 1210;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1213;
	        this.match(CypherParser.DELETE);
	        this.state = 1215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1214;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1217;
	        this.expression();
	        this.state = 1228;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1219;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1218;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1221;
	                this.match(CypherParser.T__14);
	                this.state = 1223;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1222;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1225;
	                this.expression(); 
	            }
	            this.state = 1230;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeClause() {
	    let localctx = new RemoveClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CypherParser.RULE_removeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1231;
	        this.match(CypherParser.REMOVE);
	        this.state = 1232;
	        this.match(CypherParser.SP);
	        this.state = 1233;
	        this.removeItem();
	        this.state = 1244;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1235;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1234;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1237;
	                this.match(CypherParser.T__14);
	                this.state = 1239;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1238;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1241;
	                this.removeItem(); 
	            }
	            this.state = 1246;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItem() {
	    let localctx = new RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CypherParser.RULE_removeItem);
	    try {
	        this.state = 1251;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1247;
	            this.variable();
	            this.state = 1248;
	            this.nodeLabels();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1250;
	            this.propertyExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreachClause() {
	    let localctx = new ForeachClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CypherParser.RULE_foreachClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1253;
	        this.match(CypherParser.FOREACH);
	        this.state = 1255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1254;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1257;
	        this.match(CypherParser.T__18);
	        this.state = 1259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1258;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1261;
	        this.variable();
	        this.state = 1262;
	        this.match(CypherParser.SP);
	        this.state = 1263;
	        this.match(CypherParser.IN);
	        this.state = 1264;
	        this.match(CypherParser.SP);
	        this.state = 1265;
	        this.expression();
	        this.state = 1267;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1266;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1269;
	        this.match(CypherParser.T__21);
	        this.state = 1272; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1270;
	        		this.match(CypherParser.SP);
	        		this.state = 1271;
	        		this.clause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1274; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,136, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1276;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1279;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClause() {
	    let localctx = new WithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CypherParser.RULE_withClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1281;
	        this.match(CypherParser.WITH);
	        this.state = 1286;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	        if(la_===1) {
	            this.state = 1283;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1282;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1285;
	            this.match(CypherParser.DISTINCT);

	        }
	        this.state = 1288;
	        this.match(CypherParser.SP);
	        this.state = 1289;
	        this.returnBody();
	        this.state = 1294;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 1291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1290;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1293;
	            this.where();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnClause() {
	    let localctx = new ReturnClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CypherParser.RULE_returnClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1296;
	        this.match(CypherParser.RETURN);
	        this.state = 1301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        if(la_===1) {
	            this.state = 1298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1297;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1300;
	            this.match(CypherParser.DISTINCT);

	        }
	        this.state = 1304;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1303;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1306;
	        this.returnBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnBody() {
	    let localctx = new ReturnBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CypherParser.RULE_returnBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1308;
	        this.returnItems();
	        this.state = 1311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        if(la_===1) {
	            this.state = 1309;
	            this.match(CypherParser.SP);
	            this.state = 1310;
	            this.order();

	        }
	        this.state = 1315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        if(la_===1) {
	            this.state = 1313;
	            this.match(CypherParser.SP);
	            this.state = 1314;
	            this.skip();

	        }
	        this.state = 1319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        if(la_===1) {
	            this.state = 1317;
	            this.match(CypherParser.SP);
	            this.state = 1318;
	            this.limit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func() {
	    let localctx = new FuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CypherParser.RULE_func);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1321;
	        this.procedureInvocation();
	        this.state = 1323;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        if(la_===1) {
	            this.state = 1322;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.YIELD) {
	            this.state = 1325;
	            this.procedureResults();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItems() {
	    let localctx = new ReturnItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CypherParser.RULE_returnItems);
	    var _la = 0; // Token type
	    try {
	        this.state = 1357;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1328;
	            this.match(CypherParser.T__22);
	            this.state = 1339;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1330;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1329;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1332;
	                    this.match(CypherParser.T__14);
	                    this.state = 1334;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1333;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1336;
	                    this.returnItem(); 
	                }
	                this.state = 1341;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1342;
	            this.returnItem();
	            this.state = 1353;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,155,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1344;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1343;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1346;
	                    this.match(CypherParser.T__14);
	                    this.state = 1348;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1347;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1350;
	                    this.returnItem(); 
	                }
	                this.state = 1355;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,155,this._ctx);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1356;
	            this.func();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItem() {
	    let localctx = new ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CypherParser.RULE_returnItem);
	    try {
	        this.state = 1366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1359;
	            this.expression();
	            this.state = 1360;
	            this.match(CypherParser.SP);
	            this.state = 1361;
	            this.match(CypherParser.AS);
	            this.state = 1362;
	            this.match(CypherParser.SP);
	            this.state = 1363;
	            this.variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1365;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call() {
	    let localctx = new CallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CypherParser.RULE_call);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1368;
	        this.match(CypherParser.CALL);
	        this.state = 1369;
	        this.match(CypherParser.SP);
	        this.state = 1370;
	        this.procedureInvocation();
	        this.state = 1372;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 1371;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.YIELD) {
	            this.state = 1374;
	            this.procedureResults();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureInvocation() {
	    let localctx = new ProcedureInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CypherParser.RULE_procedureInvocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1377;
	        this.procedureInvocationBody();
	        this.state = 1379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        if(la_===1) {
	            this.state = 1378;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__18) {
	            this.state = 1381;
	            this.procedureArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureInvocationBody() {
	    let localctx = new ProcedureInvocationBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CypherParser.RULE_procedureInvocationBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1384;
	        this.namespace();
	        this.state = 1385;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArguments() {
	    let localctx = new ProcedureArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CypherParser.RULE_procedureArguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1387;
	        this.match(CypherParser.T__18);
	        this.state = 1389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        if(la_===1) {
	            this.state = 1388;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CypherParser.T__2 - 3)) | (1 << (CypherParser.T__12 - 3)) | (1 << (CypherParser.T__13 - 3)) | (1 << (CypherParser.T__16 - 3)) | (1 << (CypherParser.T__18 - 3)) | (1 << (CypherParser.T__33 - 3)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)) | (1 << (CypherParser.StringLiteral - 118)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)) | (1 << (CypherParser.HexLetter - 151)) | (1 << (CypherParser.ExponentDecimalReal - 151)) | (1 << (CypherParser.RegularDecimalReal - 151)) | (1 << (CypherParser.UnescapedSymbolicName - 151)) | (1 << (CypherParser.EscapedSymbolicName - 151)))) !== 0)) {
	            this.state = 1391;
	            this.expression();
	        }

	        this.state = 1404;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1395;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1394;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1397;
	                this.match(CypherParser.T__14);
	                this.state = 1399;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1398;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1401;
	                this.expression(); 
	            }
	            this.state = 1406;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
	        }

	        this.state = 1408;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1407;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1410;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureResults() {
	    let localctx = new ProcedureResultsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CypherParser.RULE_procedureResults);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        this.match(CypherParser.YIELD);
	        this.state = 1413;
	        this.match(CypherParser.SP);
	        this.state = 1414;
	        this.procedureResult();
	        this.state = 1425;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1416;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1415;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1418;
	                this.match(CypherParser.T__14);
	                this.state = 1420;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1419;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1422;
	                this.procedureResult(); 
	            }
	            this.state = 1427;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	        }

	        this.state = 1430;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	        if(la_===1) {
	            this.state = 1428;
	            this.match(CypherParser.SP);
	            this.state = 1429;
	            this.where();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureResult() {
	    let localctx = new ProcedureResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CypherParser.RULE_procedureResult);
	    try {
	        this.state = 1434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1432;
	            this.aliasedProcedureResult();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1433;
	            this.simpleProcedureResult();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasedProcedureResult() {
	    let localctx = new AliasedProcedureResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CypherParser.RULE_aliasedProcedureResult);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1436;
	        this.procedureOutput();
	        this.state = 1437;
	        this.match(CypherParser.SP);
	        this.state = 1438;
	        this.match(CypherParser.AS);
	        this.state = 1439;
	        this.match(CypherParser.SP);
	        this.state = 1440;
	        this.variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleProcedureResult() {
	    let localctx = new SimpleProcedureResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CypherParser.RULE_simpleProcedureResult);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1442;
	        this.procedureOutput();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureOutput() {
	    let localctx = new ProcedureOutputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CypherParser.RULE_procedureOutput);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1444;
	        this.symbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order() {
	    let localctx = new OrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CypherParser.RULE_order);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1446;
	        this.match(CypherParser.ORDER);
	        this.state = 1447;
	        this.match(CypherParser.SP);
	        this.state = 1448;
	        this.match(CypherParser.BY);
	        this.state = 1449;
	        this.match(CypherParser.SP);
	        this.state = 1450;
	        this.sortItem();
	        this.state = 1461;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,175,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1452;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1451;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1454;
	                this.match(CypherParser.T__14);
	                this.state = 1456;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1455;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1458;
	                this.sortItem(); 
	            }
	            this.state = 1463;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,175,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skip() {
	    let localctx = new SkipContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CypherParser.RULE_skip);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1464;
	        this.match(CypherParser.L_SKIP);
	        this.state = 1465;
	        this.match(CypherParser.SP);
	        this.state = 1466;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limit() {
	    let localctx = new LimitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CypherParser.RULE_limit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1468;
	        this.match(CypherParser.LIMIT);
	        this.state = 1469;
	        this.match(CypherParser.SP);
	        this.state = 1470;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortItem() {
	    let localctx = new SortItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, CypherParser.RULE_sortItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1472;
	        this.expression();
	        this.state = 1480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 1474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1473;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1476;
	            _la = this._input.LA(1);
	            if(!(((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CypherParser.ASCENDING - 94)) | (1 << (CypherParser.ASC - 94)) | (1 << (CypherParser.DESCENDING - 94)) | (1 << (CypherParser.DESC - 94)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1478;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	            if(la_===1) {
	                this.state = 1477;
	                this.match(CypherParser.SP);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hint() {
	    let localctx = new HintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CypherParser.RULE_hint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1482;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1485;
	            this.match(CypherParser.USING);
	            this.state = 1486;
	            this.match(CypherParser.SP);
	            this.state = 1487;
	            this.match(CypherParser.INDEX);
	            this.state = 1488;
	            this.match(CypherParser.SP);
	            this.state = 1489;
	            this.variable();
	            this.state = 1490;
	            this.nodeLabel();
	            this.state = 1492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1491;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1494;
	            this.match(CypherParser.T__18);
	            this.state = 1496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1495;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1498;
	            this.propertyKeys();
	            this.state = 1500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1499;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1502;
	            this.match(CypherParser.T__19);
	            break;

	        case 2:
	            this.state = 1504;
	            this.match(CypherParser.USING);
	            this.state = 1505;
	            this.match(CypherParser.SP);
	            this.state = 1506;
	            this.match(CypherParser.JOIN);
	            this.state = 1507;
	            this.match(CypherParser.SP);
	            this.state = 1508;
	            this.match(CypherParser.ON);
	            this.state = 1509;
	            this.match(CypherParser.SP);
	            this.state = 1510;
	            this.variable();
	            this.state = 1521;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,185,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1512;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1511;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1514;
	                    this.match(CypherParser.T__14);
	                    this.state = 1516;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1515;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1518;
	                    this.variable(); 
	                }
	                this.state = 1523;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,185,this._ctx);
	            }

	            break;

	        case 3:
	            this.state = 1524;
	            this.match(CypherParser.USING);
	            this.state = 1525;
	            this.match(CypherParser.SP);
	            this.state = 1526;
	            this.match(CypherParser.SCAN);
	            this.state = 1527;
	            this.match(CypherParser.SP);
	            this.state = 1528;
	            this.variable();
	            this.state = 1529;
	            this.nodeLabel();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startClause() {
	    let localctx = new StartClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CypherParser.RULE_startClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1533;
	        this.match(CypherParser.START);
	        this.state = 1534;
	        this.match(CypherParser.SP);
	        this.state = 1535;
	        this.startPoint();
	        this.state = 1546;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,189,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1537;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1536;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1539;
	                this.match(CypherParser.T__14);
	                this.state = 1541;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1540;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1543;
	                this.startPoint(); 
	            }
	            this.state = 1548;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,189,this._ctx);
	        }

	        this.state = 1550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WHERE) {
	            this.state = 1549;
	            this.where();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startPoint() {
	    let localctx = new StartPointContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CypherParser.RULE_startPoint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552;
	        this.variable();
	        this.state = 1554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1553;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1556;
	        this.match(CypherParser.T__11);
	        this.state = 1558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1557;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1560;
	        this.lookup();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lookup() {
	    let localctx = new LookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, CypherParser.RULE_lookup);
	    try {
	        this.state = 1564;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.NODE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1562;
	            this.nodeLookup();
	            break;
	        case CypherParser.RELATIONSHIP:
	        case CypherParser.REL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1563;
	            this.relationshipLookup();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeLookup() {
	    let localctx = new NodeLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, CypherParser.RULE_nodeLookup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1566;
	        this.match(CypherParser.NODE);
	        this.state = 1568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1567;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1573;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1570;
	            this.identifiedIndexLookup();
	            break;

	        case 2:
	            this.state = 1571;
	            this.indexQuery();
	            break;

	        case 3:
	            this.state = 1572;
	            this.idLookup();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipLookup() {
	    let localctx = new RelationshipLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, CypherParser.RULE_relationshipLookup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1575;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.RELATIONSHIP || _la===CypherParser.REL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1576;
	            this.identifiedIndexLookup();
	            break;

	        case 2:
	            this.state = 1577;
	            this.indexQuery();
	            break;

	        case 3:
	            this.state = 1578;
	            this.idLookup();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifiedIndexLookup() {
	    let localctx = new IdentifiedIndexLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, CypherParser.RULE_identifiedIndexLookup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1581;
	        this.match(CypherParser.T__1);
	        this.state = 1582;
	        this.symbolicName();
	        this.state = 1583;
	        this.match(CypherParser.T__18);
	        this.state = 1584;
	        this.symbolicName();
	        this.state = 1585;
	        this.match(CypherParser.T__11);
	        this.state = 1588;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.StringLiteral:
	            this.state = 1586;
	            this.match(CypherParser.StringLiteral);
	            break;
	        case CypherParser.T__13:
	        case CypherParser.T__33:
	            this.state = 1587;
	            this.parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1590;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexQuery() {
	    let localctx = new IndexQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, CypherParser.RULE_indexQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1592;
	        this.match(CypherParser.T__1);
	        this.state = 1593;
	        this.symbolicName();
	        this.state = 1594;
	        this.match(CypherParser.T__18);
	        this.state = 1597;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.StringLiteral:
	            this.state = 1595;
	            this.match(CypherParser.StringLiteral);
	            break;
	        case CypherParser.T__13:
	        case CypherParser.T__33:
	            this.state = 1596;
	            this.parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1599;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idLookup() {
	    let localctx = new IdLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, CypherParser.RULE_idLookup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1601;
	        this.match(CypherParser.T__18);
	        this.state = 1605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	            this.state = 1602;
	            this.literalIds();
	            break;
	        case CypherParser.T__13:
	        case CypherParser.T__33:
	            this.state = 1603;
	            this.parameter();
	            break;
	        case CypherParser.T__22:
	            this.state = 1604;
	            this.match(CypherParser.T__22);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1607;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalIds() {
	    let localctx = new LiteralIdsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, CypherParser.RULE_literalIds);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        this.integerLiteral();
	        this.state = 1620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__14 || _la===CypherParser.SP) {
	            this.state = 1611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1610;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1613;
	            this.match(CypherParser.T__14);
	            this.state = 1615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1614;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1617;
	            this.integerLiteral();
	            this.state = 1622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where() {
	    let localctx = new WhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, CypherParser.RULE_where);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1623;
	        this.match(CypherParser.WHERE);
	        this.state = 1624;
	        this.match(CypherParser.SP);
	        this.state = 1625;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, CypherParser.RULE_pattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this.patternPart();
	        this.state = 1638;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,205,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1629;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1628;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1631;
	                this.match(CypherParser.T__14);
	                this.state = 1633;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1632;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1635;
	                this.patternPart(); 
	            }
	            this.state = 1640;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,205,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternPart() {
	    let localctx = new PatternPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, CypherParser.RULE_patternPart);
	    var _la = 0; // Token type
	    try {
	        this.state = 1652;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1641;
	            this.variable();
	            this.state = 1643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1642;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1645;
	            this.match(CypherParser.T__11);
	            this.state = 1647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1646;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1649;
	            this.anonymousPatternPart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1651;
	            this.anonymousPatternPart();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymousPatternPart() {
	    let localctx = new AnonymousPatternPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, CypherParser.RULE_anonymousPatternPart);
	    try {
	        this.state = 1656;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.ALLSHORTESTPATHS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1654;
	            this.shortestPathPatternFunction();
	            break;
	        case CypherParser.T__18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1655;
	            this.patternElement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternElement() {
	    let localctx = new PatternElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, CypherParser.RULE_patternElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1672;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1658;
	            this.nodePattern();
	            this.state = 1665;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1660;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1659;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1662;
	                    this.patternElementChain(); 
	                }
	                this.state = 1667;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1668;
	            this.match(CypherParser.T__18);
	            this.state = 1669;
	            this.patternElement();
	            this.state = 1670;
	            this.match(CypherParser.T__19);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodePattern() {
	    let localctx = new NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, CypherParser.RULE_nodePattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1674;
	        this.match(CypherParser.T__18);
	        this.state = 1676;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1675;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (CypherParser.HexLetter - 154)) | (1 << (CypherParser.UnescapedSymbolicName - 154)) | (1 << (CypherParser.EscapedSymbolicName - 154)))) !== 0)) {
	            this.state = 1678;
	            this.variable();
	            this.state = 1680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1679;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__1) {
	            this.state = 1684;
	            this.nodeLabels();
	            this.state = 1686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1685;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__13 || _la===CypherParser.T__33) {
	            this.state = 1690;
	            this.properties();
	            this.state = 1692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1691;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1696;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternElementChain() {
	    let localctx = new PatternElementChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, CypherParser.RULE_patternElementChain);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1698;
	        this.relationshipPattern();
	        this.state = 1700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1699;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1702;
	        this.nodePattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipPattern() {
	    let localctx = new RelationshipPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, CypherParser.RULE_relationshipPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1704;
	        this.relationshipPatternStart();
	        this.state = 1706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	        if(la_===1) {
	            this.state = 1705;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__16) {
	            this.state = 1708;
	            this.relationshipDetail();
	        }

	        this.state = 1712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1711;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1714;
	        this.relationshipPatternEnd();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipPatternStart() {
	    let localctx = new RelationshipPatternStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, CypherParser.RULE_relationshipPatternStart);
	    var _la = 0; // Token type
	    try {
	        this.state = 1723;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.T__29:
	        case CypherParser.T__34:
	        case CypherParser.T__35:
	        case CypherParser.T__36:
	        case CypherParser.T__37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1716;
	            this.leftArrowHead();
	            this.state = 1718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1717;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1720;
	            this.dash();
	            break;
	        case CypherParser.T__2:
	        case CypherParser.T__42:
	        case CypherParser.T__43:
	        case CypherParser.T__44:
	        case CypherParser.T__45:
	        case CypherParser.T__46:
	        case CypherParser.T__47:
	        case CypherParser.T__48:
	        case CypherParser.T__49:
	        case CypherParser.T__50:
	        case CypherParser.T__51:
	        case CypherParser.T__52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1722;
	            this.dash();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipPatternEnd() {
	    let localctx = new RelationshipPatternEndContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, CypherParser.RULE_relationshipPatternEnd);
	    var _la = 0; // Token type
	    try {
	        this.state = 1732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1725;
	            this.dash();
	            this.state = 1727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1726;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1729;
	            this.rightArrowHead();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1731;
	            this.dash();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipDetail() {
	    let localctx = new RelationshipDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, CypherParser.RULE_relationshipDetail);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1734;
	        this.match(CypherParser.T__16);
	        this.state = 1736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1735;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (CypherParser.HexLetter - 154)) | (1 << (CypherParser.UnescapedSymbolicName - 154)) | (1 << (CypherParser.EscapedSymbolicName - 154)))) !== 0)) {
	            this.state = 1738;
	            this.variable();
	            this.state = 1740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1739;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__1) {
	            this.state = 1744;
	            this.relationshipTypes();
	            this.state = 1746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1745;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1751;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__22) {
	            this.state = 1750;
	            this.rangeLiteral();
	        }

	        this.state = 1757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__13 || _la===CypherParser.T__33) {
	            this.state = 1753;
	            this.properties();
	            this.state = 1755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1754;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1759;
	        this.match(CypherParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	properties() {
	    let localctx = new PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, CypherParser.RULE_properties);
	    try {
	        this.state = 1763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1761;
	            this.mapLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1762;
	            this.parameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relType() {
	    let localctx = new RelTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, CypherParser.RULE_relType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1765;
	        this.match(CypherParser.T__1);
	        this.state = 1767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1766;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1769;
	        this.relTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipTypes() {
	    let localctx = new RelationshipTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, CypherParser.RULE_relationshipTypes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1771;
	        this.relationshipType();
	        this.state = 1779;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,239,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1773;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1772;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1775;
	                this.match(CypherParser.T__21);
	                this.state = 1776;
	                this.relationshipTypeOptionalColon(); 
	            }
	            this.state = 1781;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,239,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipType() {
	    let localctx = new RelationshipTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, CypherParser.RULE_relationshipType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1782;
	        this.match(CypherParser.T__1);
	        this.state = 1783;
	        this.relTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipTypeOptionalColon() {
	    let localctx = new RelationshipTypeOptionalColonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, CypherParser.RULE_relationshipTypeOptionalColon);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__1) {
	            this.state = 1785;
	            this.match(CypherParser.T__1);
	        }

	        this.state = 1788;
	        this.relTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeLabels() {
	    let localctx = new NodeLabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, CypherParser.RULE_nodeLabels);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1790;
	        this.nodeLabel();
	        this.state = 1797;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1792;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1791;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1794;
	                this.nodeLabel(); 
	            }
	            this.state = 1799;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeLabel() {
	    let localctx = new NodeLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, CypherParser.RULE_nodeLabel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1800;
	        this.match(CypherParser.T__1);
	        this.state = 1801;
	        this.labelName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeLiteral() {
	    let localctx = new RangeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, CypherParser.RULE_rangeLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1803;
	        this.match(CypherParser.T__22);
	        this.state = 1805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1804;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1811;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)))) !== 0)) {
	            this.state = 1807;
	            this.integerLiteral();
	            this.state = 1809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1808;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__23) {
	            this.state = 1813;
	            this.match(CypherParser.T__23);
	            this.state = 1815;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1814;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)))) !== 0)) {
	                this.state = 1817;
	                this.integerLiteral();
	                this.state = 1819;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1818;
	                    this.match(CypherParser.SP);
	                }

	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelName() {
	    let localctx = new LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, CypherParser.RULE_labelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1825;
	        this.symbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relTypeName() {
	    let localctx = new RelTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, CypherParser.RULE_relTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.symbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, CypherParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1829;
	        this.orExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orExpression() {
	    let localctx = new OrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, CypherParser.RULE_orExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1831;
	        this.xorExpression();
	        this.state = 1838;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,250,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1832;
	                this.match(CypherParser.SP);
	                this.state = 1833;
	                this.match(CypherParser.OR);
	                this.state = 1834;
	                this.match(CypherParser.SP);
	                this.state = 1835;
	                this.xorExpression(); 
	            }
	            this.state = 1840;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,250,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xorExpression() {
	    let localctx = new XorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, CypherParser.RULE_xorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1841;
	        this.andExpression();
	        this.state = 1848;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,251,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1842;
	                this.match(CypherParser.SP);
	                this.state = 1843;
	                this.match(CypherParser.XOR);
	                this.state = 1844;
	                this.match(CypherParser.SP);
	                this.state = 1845;
	                this.andExpression(); 
	            }
	            this.state = 1850;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,251,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andExpression() {
	    let localctx = new AndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, CypherParser.RULE_andExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1851;
	        this.notExpression();
	        this.state = 1858;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,252,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1852;
	                this.match(CypherParser.SP);
	                this.state = 1853;
	                this.match(CypherParser.AND);
	                this.state = 1854;
	                this.match(CypherParser.SP);
	                this.state = 1855;
	                this.notExpression(); 
	            }
	            this.state = 1860;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,252,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notExpression() {
	    let localctx = new NotExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, CypherParser.RULE_notExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1867;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,254,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1861;
	                this.match(CypherParser.NOT);
	                this.state = 1863;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1862;
	                    this.match(CypherParser.SP);
	                }
	         
	            }
	            this.state = 1869;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,254,this._ctx);
	        }

	        this.state = 1870;
	        this.comparisonExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonExpression() {
	    let localctx = new ComparisonExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, CypherParser.RULE_comparisonExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1872;
	        this.addOrSubtractExpression();
	        this.state = 1879;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,256,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1874;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1873;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1876;
	                this.partialComparisonExpression(); 
	            }
	            this.state = 1881;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,256,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addOrSubtractExpression() {
	    let localctx = new AddOrSubtractExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, CypherParser.RULE_addOrSubtractExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1882;
	        this.multiplyDivideModuloExpression();
	        this.state = 1901;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,262,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1899;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1884;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1883;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1886;
	                    this.match(CypherParser.T__12);
	                    this.state = 1888;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1887;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1890;
	                    this.multiplyDivideModuloExpression();
	                    break;

	                case 2:
	                    this.state = 1892;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1891;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1894;
	                    this.match(CypherParser.T__2);
	                    this.state = 1896;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1895;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1898;
	                    this.multiplyDivideModuloExpression();
	                    break;

	                } 
	            }
	            this.state = 1903;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,262,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyDivideModuloExpression() {
	    let localctx = new MultiplyDivideModuloExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, CypherParser.RULE_multiplyDivideModuloExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1904;
	        this.powerOfExpression();
	        this.state = 1931;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,270,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1929;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1906;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1905;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1908;
	                    this.match(CypherParser.T__22);
	                    this.state = 1910;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1909;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1912;
	                    this.powerOfExpression();
	                    break;

	                case 2:
	                    this.state = 1914;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1913;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1916;
	                    this.match(CypherParser.T__5);
	                    this.state = 1918;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1917;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1920;
	                    this.powerOfExpression();
	                    break;

	                case 3:
	                    this.state = 1922;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1921;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1924;
	                    this.match(CypherParser.T__24);
	                    this.state = 1926;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1925;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1928;
	                    this.powerOfExpression();
	                    break;

	                } 
	            }
	            this.state = 1933;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,270,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powerOfExpression() {
	    let localctx = new PowerOfExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, CypherParser.RULE_powerOfExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1934;
	        this.unaryAddOrSubtractExpression();
	        this.state = 1945;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,273,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1936;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1935;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1938;
	                this.match(CypherParser.T__25);
	                this.state = 1940;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1939;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1942;
	                this.unaryAddOrSubtractExpression(); 
	            }
	            this.state = 1947;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,273,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryAddOrSubtractExpression() {
	    let localctx = new UnaryAddOrSubtractExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, CypherParser.RULE_unaryAddOrSubtractExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__2 || _la===CypherParser.T__12) {
	            this.state = 1948;
	            _la = this._input.LA(1);
	            if(!(_la===CypherParser.T__2 || _la===CypherParser.T__12)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1949;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1957;
	        this.stringListNullOperatorExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringListNullOperatorExpression() {
	    let localctx = new StringListNullOperatorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, CypherParser.RULE_stringListNullOperatorExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1959;
	        this.propertyOrLabelsExpression();
	        this.state = 2013;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,284,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2011;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1961;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1960;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1963;
	                    this.match(CypherParser.T__16);
	                    this.state = 1964;
	                    this.expression();
	                    this.state = 1965;
	                    this.match(CypherParser.T__17);
	                    break;

	                case 2:
	                    this.state = 1968;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1967;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1970;
	                    this.match(CypherParser.T__16);
	                    this.state = 1972;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CypherParser.T__2 - 3)) | (1 << (CypherParser.T__12 - 3)) | (1 << (CypherParser.T__13 - 3)) | (1 << (CypherParser.T__16 - 3)) | (1 << (CypherParser.T__18 - 3)) | (1 << (CypherParser.T__33 - 3)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)) | (1 << (CypherParser.StringLiteral - 118)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)) | (1 << (CypherParser.HexLetter - 151)) | (1 << (CypherParser.ExponentDecimalReal - 151)) | (1 << (CypherParser.RegularDecimalReal - 151)) | (1 << (CypherParser.UnescapedSymbolicName - 151)) | (1 << (CypherParser.EscapedSymbolicName - 151)))) !== 0)) {
	                        this.state = 1971;
	                        this.expression();
	                    }

	                    this.state = 1974;
	                    this.match(CypherParser.T__23);
	                    this.state = 1976;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CypherParser.T__2 - 3)) | (1 << (CypherParser.T__12 - 3)) | (1 << (CypherParser.T__13 - 3)) | (1 << (CypherParser.T__16 - 3)) | (1 << (CypherParser.T__18 - 3)) | (1 << (CypherParser.T__33 - 3)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)) | (1 << (CypherParser.StringLiteral - 118)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)) | (1 << (CypherParser.HexLetter - 151)) | (1 << (CypherParser.ExponentDecimalReal - 151)) | (1 << (CypherParser.RegularDecimalReal - 151)) | (1 << (CypherParser.UnescapedSymbolicName - 151)) | (1 << (CypherParser.EscapedSymbolicName - 151)))) !== 0)) {
	                        this.state = 1975;
	                        this.expression();
	                    }

	                    this.state = 1978;
	                    this.match(CypherParser.T__17);
	                    break;

	                case 3:
	                    this.state = 1995;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1980;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===CypherParser.SP) {
	                            this.state = 1979;
	                            this.match(CypherParser.SP);
	                        }

	                        this.state = 1982;
	                        this.match(CypherParser.T__26);
	                        break;

	                    case 2:
	                        this.state = 1983;
	                        this.match(CypherParser.SP);
	                        this.state = 1984;
	                        this.match(CypherParser.IN);
	                        break;

	                    case 3:
	                        this.state = 1985;
	                        this.match(CypherParser.SP);
	                        this.state = 1986;
	                        this.match(CypherParser.STARTS);
	                        this.state = 1987;
	                        this.match(CypherParser.SP);
	                        this.state = 1988;
	                        this.match(CypherParser.WITH);
	                        break;

	                    case 4:
	                        this.state = 1989;
	                        this.match(CypherParser.SP);
	                        this.state = 1990;
	                        this.match(CypherParser.ENDS);
	                        this.state = 1991;
	                        this.match(CypherParser.SP);
	                        this.state = 1992;
	                        this.match(CypherParser.WITH);
	                        break;

	                    case 5:
	                        this.state = 1993;
	                        this.match(CypherParser.SP);
	                        this.state = 1994;
	                        this.match(CypherParser.CONTAINS);
	                        break;

	                    }
	                    this.state = 1998;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1997;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2000;
	                    this.propertyOrLabelsExpression();
	                    break;

	                case 4:
	                    this.state = 2001;
	                    this.match(CypherParser.SP);
	                    this.state = 2002;
	                    this.match(CypherParser.IS);
	                    this.state = 2003;
	                    this.match(CypherParser.SP);
	                    this.state = 2004;
	                    this.match(CypherParser.NULL);
	                    break;

	                case 5:
	                    this.state = 2005;
	                    this.match(CypherParser.SP);
	                    this.state = 2006;
	                    this.match(CypherParser.IS);
	                    this.state = 2007;
	                    this.match(CypherParser.SP);
	                    this.state = 2008;
	                    this.match(CypherParser.NOT);
	                    this.state = 2009;
	                    this.match(CypherParser.SP);
	                    this.state = 2010;
	                    this.match(CypherParser.NULL);
	                    break;

	                } 
	            }
	            this.state = 2015;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,284,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyOrLabelsExpression() {
	    let localctx = new PropertyOrLabelsExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, CypherParser.RULE_propertyOrLabelsExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2016;
	        this.atom();
	        this.state = 2026;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,287,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2018;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2017;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2022;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CypherParser.T__6:
	                    this.state = 2020;
	                    this.propertyLookup();
	                    break;
	                case CypherParser.T__1:
	                    this.state = 2021;
	                    this.nodeLabels();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 2028;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,287,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterFunction() {
	    let localctx = new FilterFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, CypherParser.RULE_filterFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2029;
	        this.filterFunctionName();
	        this.state = 2031;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2030;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2033;
	        this.match(CypherParser.T__18);
	        this.state = 2035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2034;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2037;
	        this.filterExpression();
	        this.state = 2039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2038;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2041;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterFunctionName() {
	    let localctx = new FilterFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, CypherParser.RULE_filterFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2043;
	        this.match(CypherParser.FILTER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsFunction() {
	    let localctx = new ExistsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, CypherParser.RULE_existsFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2045;
	        this.existsFunctionName();
	        this.state = 2047;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2046;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2049;
	        this.match(CypherParser.T__18);
	        this.state = 2051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2050;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2053;
	        this.expression();
	        this.state = 2055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2054;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2057;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsFunctionName() {
	    let localctx = new ExistsFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, CypherParser.RULE_existsFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2059;
	        this.match(CypherParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allFunction() {
	    let localctx = new AllFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, CypherParser.RULE_allFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2061;
	        this.allFunctionName();
	        this.state = 2063;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2062;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2065;
	        this.match(CypherParser.T__18);
	        this.state = 2067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2066;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2069;
	        this.filterExpression();
	        this.state = 2071;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2070;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2073;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allFunctionName() {
	    let localctx = new AllFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, CypherParser.RULE_allFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2075;
	        this.match(CypherParser.ALL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyFunction() {
	    let localctx = new AnyFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, CypherParser.RULE_anyFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2077;
	        this.anyFunctionName();
	        this.state = 2079;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2078;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2081;
	        this.match(CypherParser.T__18);
	        this.state = 2083;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2082;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2085;
	        this.filterExpression();
	        this.state = 2087;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2086;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2089;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyFunctionName() {
	    let localctx = new AnyFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, CypherParser.RULE_anyFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2091;
	        this.match(CypherParser.ANY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noneFunction() {
	    let localctx = new NoneFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, CypherParser.RULE_noneFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2093;
	        this.noneFunctionName();
	        this.state = 2095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2094;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2097;
	        this.match(CypherParser.T__18);
	        this.state = 2099;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2098;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2101;
	        this.filterExpression();
	        this.state = 2103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2102;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2105;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noneFunctionName() {
	    let localctx = new NoneFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, CypherParser.RULE_noneFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2107;
	        this.match(CypherParser.NONE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleFunction() {
	    let localctx = new SingleFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, CypherParser.RULE_singleFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2109;
	        this.singleFunctionName();
	        this.state = 2111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2110;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2113;
	        this.match(CypherParser.T__18);
	        this.state = 2115;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2114;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2117;
	        this.filterExpression();
	        this.state = 2119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2118;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2121;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleFunctionName() {
	    let localctx = new SingleFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, CypherParser.RULE_singleFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2123;
	        this.match(CypherParser.SINGLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extractFunction() {
	    let localctx = new ExtractFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, CypherParser.RULE_extractFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2125;
	        this.extractFunctionName();
	        this.state = 2127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2126;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2129;
	        this.match(CypherParser.T__18);
	        this.state = 2131;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2130;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2133;
	        this.filterExpression();
	        this.state = 2142;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	        if(la_===1) {
	            this.state = 2135;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2134;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2137;
	            this.match(CypherParser.T__21);
	            this.state = 2139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2138;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2141;
	            this.expression();

	        }
	        this.state = 2145;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2144;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2147;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extractFunctionName() {
	    let localctx = new ExtractFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, CypherParser.RULE_extractFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2149;
	        this.match(CypherParser.EXTRACT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reduceFunction() {
	    let localctx = new ReduceFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, CypherParser.RULE_reduceFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2151;
	        this.reduceFunctionName();
	        this.state = 2153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2152;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2155;
	        this.match(CypherParser.T__18);
	        this.state = 2157;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2156;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2159;
	        this.variable();
	        this.state = 2161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2160;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2163;
	        this.match(CypherParser.T__11);
	        this.state = 2165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2164;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2167;
	        this.expression();
	        this.state = 2169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2168;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2171;
	        this.match(CypherParser.T__14);
	        this.state = 2173;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2172;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2175;
	        this.idInColl();
	        this.state = 2177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2176;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2179;
	        this.match(CypherParser.T__21);
	        this.state = 2181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2180;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2183;
	        this.expression();
	        this.state = 2185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2184;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2187;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reduceFunctionName() {
	    let localctx = new ReduceFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, CypherParser.RULE_reduceFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2189;
	        this.match(CypherParser.REDUCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortestPathPatternFunction() {
	    let localctx = new ShortestPathPatternFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, CypherParser.RULE_shortestPathPatternFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 2219;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.SHORTESTPATH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2191;
	            this.shortestPathFunctionName();
	            this.state = 2193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2192;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2195;
	            this.match(CypherParser.T__18);
	            this.state = 2197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2196;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2199;
	            this.patternElement();
	            this.state = 2201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2200;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2203;
	            this.match(CypherParser.T__19);
	            break;
	        case CypherParser.ALLSHORTESTPATHS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2205;
	            this.allShortestPathFunctionName();
	            this.state = 2207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2206;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2209;
	            this.match(CypherParser.T__18);
	            this.state = 2211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2210;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2213;
	            this.patternElement();
	            this.state = 2215;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2214;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2217;
	            this.match(CypherParser.T__19);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortestPathFunctionName() {
	    let localctx = new ShortestPathFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, CypherParser.RULE_shortestPathFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2221;
	        this.match(CypherParser.SHORTESTPATH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allShortestPathFunctionName() {
	    let localctx = new AllShortestPathFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, CypherParser.RULE_allShortestPathFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2223;
	        this.match(CypherParser.ALLSHORTESTPATHS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, CypherParser.RULE_atom);
	    var _la = 0; // Token type
	    try {
	        this.state = 2256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2225;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2226;
	            this.parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2227;
	            this.caseExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2228;
	            this.match(CypherParser.COUNT);
	            this.state = 2230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2229;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2232;
	            this.match(CypherParser.T__18);
	            this.state = 2234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2233;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2236;
	            this.match(CypherParser.T__22);
	            this.state = 2238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2237;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2240;
	            this.match(CypherParser.T__19);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2241;
	            this.listComprehension();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2242;
	            this.patternComprehension();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2243;
	            this.filterFunction();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2244;
	            this.extractFunction();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2245;
	            this.reduceFunction();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2246;
	            this.allFunction();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2247;
	            this.anyFunction();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2248;
	            this.noneFunction();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2249;
	            this.singleFunction();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2250;
	            this.existsFunction();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2251;
	            this.shortestPathPatternFunction();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2252;
	            this.relationshipsPattern();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2253;
	            this.parenthesizedExpression();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2254;
	            this.functionInvocation();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2255;
	            this.variable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, CypherParser.RULE_literal);
	    try {
	        this.state = 2265;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2258;
	            this.numberLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2259;
	            this.stringLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2260;
	            this.booleanLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2261;
	            this.match(CypherParser.NULL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2262;
	            this.mapLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2263;
	            this.listLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2264;
	            this.mapProjection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, CypherParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2267;
	        this.match(CypherParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, CypherParser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2269;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.TRUE || _la===CypherParser.FALSE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, CypherParser.RULE_listLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2271;
	        this.match(CypherParser.T__16);
	        this.state = 2273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2272;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CypherParser.T__2 - 3)) | (1 << (CypherParser.T__12 - 3)) | (1 << (CypherParser.T__13 - 3)) | (1 << (CypherParser.T__16 - 3)) | (1 << (CypherParser.T__18 - 3)) | (1 << (CypherParser.T__33 - 3)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)) | (1 << (CypherParser.StringLiteral - 118)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)) | (1 << (CypherParser.HexLetter - 151)) | (1 << (CypherParser.ExponentDecimalReal - 151)) | (1 << (CypherParser.RegularDecimalReal - 151)) | (1 << (CypherParser.UnescapedSymbolicName - 151)) | (1 << (CypherParser.EscapedSymbolicName - 151)))) !== 0)) {
	            this.state = 2275;
	            this.expression();
	            this.state = 2277;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2276;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__14) {
	                this.state = 2279;
	                this.match(CypherParser.T__14);
	                this.state = 2281;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2280;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2283;
	                this.expression();
	                this.state = 2285;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2284;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2291;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2294;
	        this.match(CypherParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partialComparisonExpression() {
	    let localctx = new PartialComparisonExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, CypherParser.RULE_partialComparisonExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 2331;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.T__11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2296;
	            this.match(CypherParser.T__11);
	            this.state = 2298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2297;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2300;
	            this.addOrSubtractExpression();
	            break;
	        case CypherParser.T__27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2301;
	            this.match(CypherParser.T__27);
	            this.state = 2303;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2302;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2305;
	            this.addOrSubtractExpression();
	            break;
	        case CypherParser.T__28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2306;
	            this.match(CypherParser.T__28);
	            this.state = 2308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2307;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2310;
	            this.addOrSubtractExpression();
	            break;
	        case CypherParser.T__29:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2311;
	            this.match(CypherParser.T__29);
	            this.state = 2313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2312;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2315;
	            this.addOrSubtractExpression();
	            break;
	        case CypherParser.T__30:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2316;
	            this.match(CypherParser.T__30);
	            this.state = 2318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2317;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2320;
	            this.addOrSubtractExpression();
	            break;
	        case CypherParser.T__31:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2321;
	            this.match(CypherParser.T__31);
	            this.state = 2323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2322;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2325;
	            this.addOrSubtractExpression();
	            break;
	        case CypherParser.T__32:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2326;
	            this.match(CypherParser.T__32);
	            this.state = 2328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2327;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2330;
	            this.addOrSubtractExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedExpression() {
	    let localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, CypherParser.RULE_parenthesizedExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2333;
	        this.match(CypherParser.T__18);
	        this.state = 2335;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2334;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2337;
	        this.expression();
	        this.state = 2339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2338;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2341;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipsPattern() {
	    let localctx = new RelationshipsPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, CypherParser.RULE_relationshipsPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2343;
	        this.nodePattern();
	        this.state = 2348; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2345;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===CypherParser.SP) {
	        		    this.state = 2344;
	        		    this.match(CypherParser.SP);
	        		}

	        		this.state = 2347;
	        		this.patternElementChain();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2350; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,350, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterExpression() {
	    let localctx = new FilterExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, CypherParser.RULE_filterExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2352;
	        this.idInColl();
	        this.state = 2357;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	        if(la_===1) {
	            this.state = 2354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2353;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2356;
	            this.where();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idInColl() {
	    let localctx = new IdInCollContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, CypherParser.RULE_idInColl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2359;
	        this.variable();
	        this.state = 2360;
	        this.match(CypherParser.SP);
	        this.state = 2361;
	        this.match(CypherParser.IN);
	        this.state = 2362;
	        this.match(CypherParser.SP);
	        this.state = 2363;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionInvocation() {
	    let localctx = new FunctionInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, CypherParser.RULE_functionInvocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2365;
	        this.functionInvocationBody();
	        this.state = 2367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2366;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2369;
	        this.match(CypherParser.T__18);
	        this.state = 2371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2370;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2377;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	        if(la_===1) {
	            this.state = 2373;
	            this.match(CypherParser.DISTINCT);
	            this.state = 2375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2374;
	                this.match(CypherParser.SP);
	            }


	        }
	        this.state = 2396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CypherParser.T__2 - 3)) | (1 << (CypherParser.T__12 - 3)) | (1 << (CypherParser.T__13 - 3)) | (1 << (CypherParser.T__16 - 3)) | (1 << (CypherParser.T__18 - 3)) | (1 << (CypherParser.T__33 - 3)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)) | (1 << (CypherParser.StringLiteral - 118)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)) | (1 << (CypherParser.HexLetter - 151)) | (1 << (CypherParser.ExponentDecimalReal - 151)) | (1 << (CypherParser.RegularDecimalReal - 151)) | (1 << (CypherParser.UnescapedSymbolicName - 151)) | (1 << (CypherParser.EscapedSymbolicName - 151)))) !== 0)) {
	            this.state = 2379;
	            this.expression();
	            this.state = 2381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2380;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2393;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__14) {
	                this.state = 2383;
	                this.match(CypherParser.T__14);
	                this.state = 2385;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2384;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2387;
	                this.expression();
	                this.state = 2389;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2388;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2395;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2398;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionInvocationBody() {
	    let localctx = new FunctionInvocationBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, CypherParser.RULE_functionInvocationBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2400;
	        this.namespace();
	        this.state = 2401;
	        this.functionName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, CypherParser.RULE_functionName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2403;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.COUNT || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureName() {
	    let localctx = new ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, CypherParser.RULE_procedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2405;
	        this.symbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listComprehension() {
	    let localctx = new ListComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, CypherParser.RULE_listComprehension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2407;
	        this.match(CypherParser.T__16);
	        this.state = 2409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2408;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2411;
	        this.filterExpression();
	        this.state = 2420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	        if(la_===1) {
	            this.state = 2413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2412;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2415;
	            this.match(CypherParser.T__21);
	            this.state = 2417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2416;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2419;
	            this.expression();

	        }
	        this.state = 2423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2422;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2425;
	        this.match(CypherParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternComprehension() {
	    let localctx = new PatternComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, CypherParser.RULE_patternComprehension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2427;
	        this.match(CypherParser.T__16);
	        this.state = 2429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2428;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (CypherParser.HexLetter - 154)) | (1 << (CypherParser.UnescapedSymbolicName - 154)) | (1 << (CypherParser.EscapedSymbolicName - 154)))) !== 0)) {
	            this.state = 2431;
	            this.variable();
	            this.state = 2433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2432;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2435;
	            this.match(CypherParser.T__11);
	            this.state = 2437;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2436;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 2441;
	        this.relationshipsPattern();
	        this.state = 2443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2442;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WHERE) {
	            this.state = 2445;
	            this.match(CypherParser.WHERE);
	            this.state = 2447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2446;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2449;
	            this.expression();
	            this.state = 2451;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2450;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 2455;
	        this.match(CypherParser.T__21);
	        this.state = 2457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2456;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2459;
	        this.expression();
	        this.state = 2461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2460;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2463;
	        this.match(CypherParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyLookup() {
	    let localctx = new PropertyLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, CypherParser.RULE_propertyLookup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2465;
	        this.match(CypherParser.T__6);
	        this.state = 2467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2466;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2469;
	        this.propertyKeyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpression() {
	    let localctx = new CaseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, CypherParser.RULE_caseExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2493;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2471;
	            this.match(CypherParser.CASE);
	            this.state = 2476; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2473;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===CypherParser.SP) {
	            		    this.state = 2472;
	            		    this.match(CypherParser.SP);
	            		}

	            		this.state = 2475;
	            		this.caseAlternatives();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2478; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,379, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.state = 2480;
	            this.match(CypherParser.CASE);
	            this.state = 2482;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2481;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2484;
	            this.expression();
	            this.state = 2489; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2486;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===CypherParser.SP) {
	            		    this.state = 2485;
	            		    this.match(CypherParser.SP);
	            		}

	            		this.state = 2488;
	            		this.caseAlternatives();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2491; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,382, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	        this.state = 2503;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	        if(la_===1) {
	            this.state = 2496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2495;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2498;
	            this.match(CypherParser.ELSE);
	            this.state = 2500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2499;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2502;
	            this.expression();

	        }
	        this.state = 2506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2505;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2508;
	        this.match(CypherParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAlternatives() {
	    let localctx = new CaseAlternativesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, CypherParser.RULE_caseAlternatives);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2510;
	        this.match(CypherParser.WHEN);
	        this.state = 2512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2511;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2514;
	        this.expression();
	        this.state = 2516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2515;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2518;
	        this.match(CypherParser.THEN);
	        this.state = 2520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2519;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2522;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, CypherParser.RULE_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2524;
	        this.symbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberLiteral() {
	    let localctx = new NumberLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, CypherParser.RULE_numberLiteral);
	    try {
	        this.state = 2528;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.ExponentDecimalReal:
	        case CypherParser.RegularDecimalReal:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2526;
	            this.doubleLiteral();
	            break;
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2527;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapLiteral() {
	    let localctx = new MapLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, CypherParser.RULE_mapLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2530;
	        this.match(CypherParser.T__13);
	        this.state = 2532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2531;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (CypherParser.HexLetter - 154)) | (1 << (CypherParser.UnescapedSymbolicName - 154)) | (1 << (CypherParser.EscapedSymbolicName - 154)))) !== 0)) {
	            this.state = 2534;
	            this.literalEntry();
	            this.state = 2536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2535;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2548;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__14) {
	                this.state = 2538;
	                this.match(CypherParser.T__14);
	                this.state = 2540;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2539;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2542;
	                this.literalEntry();
	                this.state = 2544;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2543;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2550;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2553;
	        this.match(CypherParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapProjection() {
	    let localctx = new MapProjectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, CypherParser.RULE_mapProjection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        this.variable();
	        this.state = 2557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2556;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2559;
	        this.match(CypherParser.T__13);
	        this.state = 2561;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
	        if(la_===1) {
	            this.state = 2560;
	            this.match(CypherParser.SP);

	        }
	        this.state = 2564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__6 || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (CypherParser.HexLetter - 154)) | (1 << (CypherParser.UnescapedSymbolicName - 154)) | (1 << (CypherParser.EscapedSymbolicName - 154)))) !== 0)) {
	            this.state = 2563;
	            this.mapProjectionVariants();
	        }

	        this.state = 2576;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,403,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2567;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2566;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2569;
	                this.match(CypherParser.T__14);
	                this.state = 2571;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2570;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2573;
	                this.mapProjectionVariants(); 
	            }
	            this.state = 2578;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,403,this._ctx);
	        }

	        this.state = 2580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2579;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2582;
	        this.match(CypherParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapProjectionVariants() {
	    let localctx = new MapProjectionVariantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, CypherParser.RULE_mapProjectionVariants);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,405,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2584;
	            this.literalEntry();
	            break;

	        case 2:
	            this.state = 2585;
	            this.propertySelector();
	            break;

	        case 3:
	            this.state = 2586;
	            this.variableSelector();
	            break;

	        case 4:
	            this.state = 2587;
	            this.allPropertiesSelector();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalEntry() {
	    let localctx = new LiteralEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, CypherParser.RULE_literalEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2590;
	        this.propertyKeyName();
	        this.state = 2592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2591;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2594;
	        this.match(CypherParser.T__1);
	        this.state = 2596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2595;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2598;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertySelector() {
	    let localctx = new PropertySelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, CypherParser.RULE_propertySelector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2600;
	        this.match(CypherParser.T__6);
	        this.state = 2601;
	        this.variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableSelector() {
	    let localctx = new VariableSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, CypherParser.RULE_variableSelector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2603;
	        this.variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allPropertiesSelector() {
	    let localctx = new AllPropertiesSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, CypherParser.RULE_allPropertiesSelector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2605;
	        this.match(CypherParser.T__6);
	        this.state = 2606;
	        this.match(CypherParser.T__22);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, CypherParser.RULE_parameter);
	    try {
	        this.state = 2610;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.T__13:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2608;
	            this.legacyParameter();
	            break;
	        case CypherParser.T__33:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2609;
	            this.newParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	legacyParameter() {
	    let localctx = new LegacyParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, CypherParser.RULE_legacyParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2612;
	        this.match(CypherParser.T__13);
	        this.state = 2614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2613;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2616;
	        this.parameterName();
	        this.state = 2618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2617;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2620;
	        this.match(CypherParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newParameter() {
	    let localctx = new NewParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, CypherParser.RULE_newParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2622;
	        this.match(CypherParser.T__33);
	        this.state = 2623;
	        this.parameterName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterName() {
	    let localctx = new ParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, CypherParser.RULE_parameterName);
	    try {
	        this.state = 2627;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.RELATIONSHIP:
	        case CypherParser.REL:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.ALLSHORTESTPATHS:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.KEY:
	        case CypherParser.BTREE:
	        case CypherParser.EXIST:
	        case CypherParser.FOR:
	        case CypherParser.OPTIONS:
	        case CypherParser.EXECUTE:
	        case CypherParser.DEFINED:
	        case CypherParser.FUNCTION:
	        case CypherParser.FUNCTIONS:
	        case CypherParser.BOOSTED:
	        case CypherParser.PROCEDURE:
	        case CypherParser.PROCEDURES:
	        case CypherParser.ADMIN:
	        case CypherParser.ADMINISTRATOR:
	        case CypherParser.BRIEF:
	        case CypherParser.VERBOSE:
	        case CypherParser.OUTPUT:
	        case CypherParser.HexLetter:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2625;
	            this.symbolicName();
	            break;
	        case CypherParser.DecimalInteger:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2626;
	            this.match(CypherParser.DecimalInteger);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyExpressions() {
	    let localctx = new PropertyExpressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, CypherParser.RULE_propertyExpressions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2629;
	        this.propertyExpression();
	        this.state = 2640;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,414,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2631;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2630;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2633;
	                this.match(CypherParser.T__14);
	                this.state = 2635;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2634;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2637;
	                this.propertyExpression(); 
	            }
	            this.state = 2642;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,414,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyExpression() {
	    let localctx = new PropertyExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, CypherParser.RULE_propertyExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2643;
	        this.atom();
	        this.state = 2648; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2645;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===CypherParser.SP) {
	        		    this.state = 2644;
	        		    this.match(CypherParser.SP);
	        		}

	        		this.state = 2647;
	        		this.propertyLookup();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2650; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,416, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeys() {
	    let localctx = new PropertyKeysContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, CypherParser.RULE_propertyKeys);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2652;
	        this.propertyKeyName();
	        this.state = 2663;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,419,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2654;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2653;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2656;
	                this.match(CypherParser.T__14);
	                this.state = 2658;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2657;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2660;
	                this.propertyKeyName(); 
	            }
	            this.state = 2665;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,419,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyName() {
	    let localctx = new PropertyKeyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, CypherParser.RULE_propertyKeyName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2666;
	        this.symbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerLiteral() {
	    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, CypherParser.RULE_integerLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2668;
	        _la = this._input.LA(1);
	        if(!(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (CypherParser.HexInteger - 151)) | (1 << (CypherParser.DecimalInteger - 151)) | (1 << (CypherParser.OctalInteger - 151)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doubleLiteral() {
	    let localctx = new DoubleLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, CypherParser.RULE_doubleLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2670;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.ExponentDecimalReal || _la===CypherParser.RegularDecimalReal)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace() {
	    let localctx = new NamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, CypherParser.RULE_namespace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2677;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,420,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2672;
	                this.symbolicName();
	                this.state = 2673;
	                this.match(CypherParser.T__6); 
	            }
	            this.state = 2679;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,420,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leftArrowHead() {
	    let localctx = new LeftArrowHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, CypherParser.RULE_leftArrowHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2680;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rightArrowHead() {
	    let localctx = new RightArrowHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, CypherParser.RULE_rightArrowHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2682;
	        _la = this._input.LA(1);
	        if(!(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CypherParser.T__30 - 31)) | (1 << (CypherParser.T__38 - 31)) | (1 << (CypherParser.T__39 - 31)) | (1 << (CypherParser.T__40 - 31)) | (1 << (CypherParser.T__41 - 31)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dash() {
	    let localctx = new DashContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, CypherParser.RULE_dash);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2684;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.T__2 || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (CypherParser.T__42 - 43)) | (1 << (CypherParser.T__43 - 43)) | (1 << (CypherParser.T__44 - 43)) | (1 << (CypherParser.T__45 - 43)) | (1 << (CypherParser.T__46 - 43)) | (1 << (CypherParser.T__47 - 43)) | (1 << (CypherParser.T__48 - 43)) | (1 << (CypherParser.T__49 - 43)) | (1 << (CypherParser.T__50 - 43)) | (1 << (CypherParser.T__51 - 43)) | (1 << (CypherParser.T__52 - 43)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicName() {
	    let localctx = new SymbolicNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, CypherParser.RULE_symbolicName);
	    try {
	        this.state = 2690;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.RELATIONSHIP:
	        case CypherParser.REL:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.ALLSHORTESTPATHS:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.KEY:
	        case CypherParser.BTREE:
	        case CypherParser.EXIST:
	        case CypherParser.FOR:
	        case CypherParser.OPTIONS:
	        case CypherParser.EXECUTE:
	        case CypherParser.DEFINED:
	        case CypherParser.FUNCTION:
	        case CypherParser.FUNCTIONS:
	        case CypherParser.BOOSTED:
	        case CypherParser.PROCEDURE:
	        case CypherParser.PROCEDURES:
	        case CypherParser.ADMIN:
	        case CypherParser.ADMINISTRATOR:
	        case CypherParser.BRIEF:
	        case CypherParser.VERBOSE:
	        case CypherParser.OUTPUT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2686;
	            this.keyword();
	            break;
	        case CypherParser.UnescapedSymbolicName:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2687;
	            this.match(CypherParser.UnescapedSymbolicName);
	            break;
	        case CypherParser.EscapedSymbolicName:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2688;
	            this.match(CypherParser.EscapedSymbolicName);
	            break;
	        case CypherParser.HexLetter:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2689;
	            this.match(CypherParser.HexLetter);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, CypherParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2692;
	        _la = this._input.LA(1);
	        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.BTREE - 118)) | (1 << (CypherParser.EXIST - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.OPTIONS - 118)) | (1 << (CypherParser.EXECUTE - 118)) | (1 << (CypherParser.DEFINED - 118)) | (1 << (CypherParser.FUNCTION - 118)) | (1 << (CypherParser.FUNCTIONS - 118)) | (1 << (CypherParser.BOOSTED - 118)) | (1 << (CypherParser.PROCEDURE - 118)) | (1 << (CypherParser.PROCEDURES - 118)) | (1 << (CypherParser.ADMIN - 118)) | (1 << (CypherParser.ADMINISTRATOR - 118)) | (1 << (CypherParser.BRIEF - 118)) | (1 << (CypherParser.VERBOSE - 118)) | (1 << (CypherParser.OUTPUT - 118)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CypherParser.EOF = antlr4.Token.EOF;
CypherParser.T__0 = 1;
CypherParser.T__1 = 2;
CypherParser.T__2 = 3;
CypherParser.T__3 = 4;
CypherParser.T__4 = 5;
CypherParser.T__5 = 6;
CypherParser.T__6 = 7;
CypherParser.T__7 = 8;
CypherParser.T__8 = 9;
CypherParser.T__9 = 10;
CypherParser.T__10 = 11;
CypherParser.T__11 = 12;
CypherParser.T__12 = 13;
CypherParser.T__13 = 14;
CypherParser.T__14 = 15;
CypherParser.T__15 = 16;
CypherParser.T__16 = 17;
CypherParser.T__17 = 18;
CypherParser.T__18 = 19;
CypherParser.T__19 = 20;
CypherParser.T__20 = 21;
CypherParser.T__21 = 22;
CypherParser.T__22 = 23;
CypherParser.T__23 = 24;
CypherParser.T__24 = 25;
CypherParser.T__25 = 26;
CypherParser.T__26 = 27;
CypherParser.T__27 = 28;
CypherParser.T__28 = 29;
CypherParser.T__29 = 30;
CypherParser.T__30 = 31;
CypherParser.T__31 = 32;
CypherParser.T__32 = 33;
CypherParser.T__33 = 34;
CypherParser.T__34 = 35;
CypherParser.T__35 = 36;
CypherParser.T__36 = 37;
CypherParser.T__37 = 38;
CypherParser.T__38 = 39;
CypherParser.T__39 = 40;
CypherParser.T__40 = 41;
CypherParser.T__41 = 42;
CypherParser.T__42 = 43;
CypherParser.T__43 = 44;
CypherParser.T__44 = 45;
CypherParser.T__45 = 46;
CypherParser.T__46 = 47;
CypherParser.T__47 = 48;
CypherParser.T__48 = 49;
CypherParser.T__49 = 50;
CypherParser.T__50 = 51;
CypherParser.T__51 = 52;
CypherParser.T__52 = 53;
CypherParser.CYPHER = 54;
CypherParser.EXPLAIN = 55;
CypherParser.PROFILE = 56;
CypherParser.USING = 57;
CypherParser.PERIODIC = 58;
CypherParser.COMMIT = 59;
CypherParser.UNION = 60;
CypherParser.ALL = 61;
CypherParser.CREATE = 62;
CypherParser.DROP = 63;
CypherParser.INDEX = 64;
CypherParser.ON = 65;
CypherParser.CONSTRAINT = 66;
CypherParser.ASSERT = 67;
CypherParser.IS = 68;
CypherParser.UNIQUE = 69;
CypherParser.EXISTS = 70;
CypherParser.LOAD = 71;
CypherParser.CSV = 72;
CypherParser.WITH = 73;
CypherParser.HEADERS = 74;
CypherParser.FROM = 75;
CypherParser.AS = 76;
CypherParser.FIELDTERMINATOR = 77;
CypherParser.OPTIONAL = 78;
CypherParser.MATCH = 79;
CypherParser.UNWIND = 80;
CypherParser.MERGE = 81;
CypherParser.SET = 82;
CypherParser.DETACH = 83;
CypherParser.DELETE = 84;
CypherParser.REMOVE = 85;
CypherParser.FOREACH = 86;
CypherParser.IN = 87;
CypherParser.DISTINCT = 88;
CypherParser.RETURN = 89;
CypherParser.ORDER = 90;
CypherParser.BY = 91;
CypherParser.L_SKIP = 92;
CypherParser.LIMIT = 93;
CypherParser.ASCENDING = 94;
CypherParser.ASC = 95;
CypherParser.DESCENDING = 96;
CypherParser.DESC = 97;
CypherParser.JOIN = 98;
CypherParser.SCAN = 99;
CypherParser.START = 100;
CypherParser.NODE = 101;
CypherParser.RELATIONSHIP = 102;
CypherParser.REL = 103;
CypherParser.WHERE = 104;
CypherParser.SHORTESTPATH = 105;
CypherParser.ALLSHORTESTPATHS = 106;
CypherParser.OR = 107;
CypherParser.XOR = 108;
CypherParser.AND = 109;
CypherParser.NOT = 110;
CypherParser.STARTS = 111;
CypherParser.ENDS = 112;
CypherParser.CONTAINS = 113;
CypherParser.NULL = 114;
CypherParser.COUNT = 115;
CypherParser.FILTER = 116;
CypherParser.EXTRACT = 117;
CypherParser.ANY = 118;
CypherParser.NONE = 119;
CypherParser.SINGLE = 120;
CypherParser.TRUE = 121;
CypherParser.FALSE = 122;
CypherParser.REDUCE = 123;
CypherParser.CASE = 124;
CypherParser.ELSE = 125;
CypherParser.END = 126;
CypherParser.WHEN = 127;
CypherParser.THEN = 128;
CypherParser.CALL = 129;
CypherParser.YIELD = 130;
CypherParser.KEY = 131;
CypherParser.BTREE = 132;
CypherParser.EXIST = 133;
CypherParser.FOR = 134;
CypherParser.OPTIONS = 135;
CypherParser.EXECUTE = 136;
CypherParser.DEFINED = 137;
CypherParser.FUNCTION = 138;
CypherParser.FUNCTIONS = 139;
CypherParser.BOOSTED = 140;
CypherParser.PROCEDURE = 141;
CypherParser.PROCEDURES = 142;
CypherParser.ADMIN = 143;
CypherParser.ADMINISTRATOR = 144;
CypherParser.BRIEF = 145;
CypherParser.VERBOSE = 146;
CypherParser.OUTPUT = 147;
CypherParser.StringLiteral = 148;
CypherParser.UrlHex = 149;
CypherParser.EscapedChar = 150;
CypherParser.HexInteger = 151;
CypherParser.DecimalInteger = 152;
CypherParser.OctalInteger = 153;
CypherParser.HexLetter = 154;
CypherParser.HexDigit = 155;
CypherParser.Digit = 156;
CypherParser.NonZeroDigit = 157;
CypherParser.NonZeroOctDigit = 158;
CypherParser.OctDigit = 159;
CypherParser.ZeroDigit = 160;
CypherParser.ExponentDecimalReal = 161;
CypherParser.RegularDecimalReal = 162;
CypherParser.UnescapedSymbolicName = 163;
CypherParser.IdentifierStart = 164;
CypherParser.IdentifierPart = 165;
CypherParser.EscapedSymbolicName = 166;
CypherParser.SP = 167;
CypherParser.WHITESPACE = 168;
CypherParser.Comment = 169;
CypherParser.ERROR_TOKEN = 170;

CypherParser.RULE_raw = 0;
CypherParser.RULE_cypher = 1;
CypherParser.RULE_cypherPart = 2;
CypherParser.RULE_cypherConsoleCommand = 3;
CypherParser.RULE_cypherConsoleCommandName = 4;
CypherParser.RULE_cypherConsoleCommandParameters = 5;
CypherParser.RULE_cypherConsoleCommandParameter = 6;
CypherParser.RULE_arrowExpression = 7;
CypherParser.RULE_url = 8;
CypherParser.RULE_uri = 9;
CypherParser.RULE_scheme = 10;
CypherParser.RULE_host = 11;
CypherParser.RULE_hostname = 12;
CypherParser.RULE_hostnumber = 13;
CypherParser.RULE_port = 14;
CypherParser.RULE_path = 15;
CypherParser.RULE_user = 16;
CypherParser.RULE_login = 17;
CypherParser.RULE_password = 18;
CypherParser.RULE_frag = 19;
CypherParser.RULE_urlQuery = 20;
CypherParser.RULE_search = 21;
CypherParser.RULE_searchparameter = 22;
CypherParser.RULE_string = 23;
CypherParser.RULE_urlDigits = 24;
CypherParser.RULE_json = 25;
CypherParser.RULE_obj = 26;
CypherParser.RULE_pair = 27;
CypherParser.RULE_array = 28;
CypherParser.RULE_value = 29;
CypherParser.RULE_keyValueLiteral = 30;
CypherParser.RULE_commandPath = 31;
CypherParser.RULE_subCommand = 32;
CypherParser.RULE_cypherQuery = 33;
CypherParser.RULE_queryOptions = 34;
CypherParser.RULE_anyCypherOption = 35;
CypherParser.RULE_cypherOption = 36;
CypherParser.RULE_versionNumber = 37;
CypherParser.RULE_explain = 38;
CypherParser.RULE_profile = 39;
CypherParser.RULE_configurationOption = 40;
CypherParser.RULE_statement = 41;
CypherParser.RULE_query = 42;
CypherParser.RULE_regularQuery = 43;
CypherParser.RULE_bulkImportQuery = 44;
CypherParser.RULE_singleQuery = 45;
CypherParser.RULE_periodicCommitHint = 46;
CypherParser.RULE_loadCSVQuery = 47;
CypherParser.RULE_union = 48;
CypherParser.RULE_clause = 49;
CypherParser.RULE_command = 50;
CypherParser.RULE_createUniqueConstraint = 51;
CypherParser.RULE_createNodeKeyConstraint = 52;
CypherParser.RULE_createNodePropertyExistenceConstraint = 53;
CypherParser.RULE_createRelationshipPropertyExistenceConstraint = 54;
CypherParser.RULE_createIndex = 55;
CypherParser.RULE_dropUniqueConstraint = 56;
CypherParser.RULE_dropNodeKeyConstraint = 57;
CypherParser.RULE_dropNodePropertyExistenceConstraint = 58;
CypherParser.RULE_dropRelationshipPropertyExistenceConstraint = 59;
CypherParser.RULE_dropIndex = 60;
CypherParser.RULE_index = 61;
CypherParser.RULE_uniqueConstraint = 62;
CypherParser.RULE_nodeKeyConstraint = 63;
CypherParser.RULE_nodePropertyExistenceConstraint = 64;
CypherParser.RULE_relationshipPropertyExistenceConstraint = 65;
CypherParser.RULE_relationshipPatternSyntax = 66;
CypherParser.RULE_loadCSVClause = 67;
CypherParser.RULE_matchClause = 68;
CypherParser.RULE_unwindClause = 69;
CypherParser.RULE_mergeClause = 70;
CypherParser.RULE_mergeAction = 71;
CypherParser.RULE_createClause = 72;
CypherParser.RULE_createUniqueClause = 73;
CypherParser.RULE_setClause = 74;
CypherParser.RULE_setItem = 75;
CypherParser.RULE_deleteClause = 76;
CypherParser.RULE_removeClause = 77;
CypherParser.RULE_removeItem = 78;
CypherParser.RULE_foreachClause = 79;
CypherParser.RULE_withClause = 80;
CypherParser.RULE_returnClause = 81;
CypherParser.RULE_returnBody = 82;
CypherParser.RULE_func = 83;
CypherParser.RULE_returnItems = 84;
CypherParser.RULE_returnItem = 85;
CypherParser.RULE_call = 86;
CypherParser.RULE_procedureInvocation = 87;
CypherParser.RULE_procedureInvocationBody = 88;
CypherParser.RULE_procedureArguments = 89;
CypherParser.RULE_procedureResults = 90;
CypherParser.RULE_procedureResult = 91;
CypherParser.RULE_aliasedProcedureResult = 92;
CypherParser.RULE_simpleProcedureResult = 93;
CypherParser.RULE_procedureOutput = 94;
CypherParser.RULE_order = 95;
CypherParser.RULE_skip = 96;
CypherParser.RULE_limit = 97;
CypherParser.RULE_sortItem = 98;
CypherParser.RULE_hint = 99;
CypherParser.RULE_startClause = 100;
CypherParser.RULE_startPoint = 101;
CypherParser.RULE_lookup = 102;
CypherParser.RULE_nodeLookup = 103;
CypherParser.RULE_relationshipLookup = 104;
CypherParser.RULE_identifiedIndexLookup = 105;
CypherParser.RULE_indexQuery = 106;
CypherParser.RULE_idLookup = 107;
CypherParser.RULE_literalIds = 108;
CypherParser.RULE_where = 109;
CypherParser.RULE_pattern = 110;
CypherParser.RULE_patternPart = 111;
CypherParser.RULE_anonymousPatternPart = 112;
CypherParser.RULE_patternElement = 113;
CypherParser.RULE_nodePattern = 114;
CypherParser.RULE_patternElementChain = 115;
CypherParser.RULE_relationshipPattern = 116;
CypherParser.RULE_relationshipPatternStart = 117;
CypherParser.RULE_relationshipPatternEnd = 118;
CypherParser.RULE_relationshipDetail = 119;
CypherParser.RULE_properties = 120;
CypherParser.RULE_relType = 121;
CypherParser.RULE_relationshipTypes = 122;
CypherParser.RULE_relationshipType = 123;
CypherParser.RULE_relationshipTypeOptionalColon = 124;
CypherParser.RULE_nodeLabels = 125;
CypherParser.RULE_nodeLabel = 126;
CypherParser.RULE_rangeLiteral = 127;
CypherParser.RULE_labelName = 128;
CypherParser.RULE_relTypeName = 129;
CypherParser.RULE_expression = 130;
CypherParser.RULE_orExpression = 131;
CypherParser.RULE_xorExpression = 132;
CypherParser.RULE_andExpression = 133;
CypherParser.RULE_notExpression = 134;
CypherParser.RULE_comparisonExpression = 135;
CypherParser.RULE_addOrSubtractExpression = 136;
CypherParser.RULE_multiplyDivideModuloExpression = 137;
CypherParser.RULE_powerOfExpression = 138;
CypherParser.RULE_unaryAddOrSubtractExpression = 139;
CypherParser.RULE_stringListNullOperatorExpression = 140;
CypherParser.RULE_propertyOrLabelsExpression = 141;
CypherParser.RULE_filterFunction = 142;
CypherParser.RULE_filterFunctionName = 143;
CypherParser.RULE_existsFunction = 144;
CypherParser.RULE_existsFunctionName = 145;
CypherParser.RULE_allFunction = 146;
CypherParser.RULE_allFunctionName = 147;
CypherParser.RULE_anyFunction = 148;
CypherParser.RULE_anyFunctionName = 149;
CypherParser.RULE_noneFunction = 150;
CypherParser.RULE_noneFunctionName = 151;
CypherParser.RULE_singleFunction = 152;
CypherParser.RULE_singleFunctionName = 153;
CypherParser.RULE_extractFunction = 154;
CypherParser.RULE_extractFunctionName = 155;
CypherParser.RULE_reduceFunction = 156;
CypherParser.RULE_reduceFunctionName = 157;
CypherParser.RULE_shortestPathPatternFunction = 158;
CypherParser.RULE_shortestPathFunctionName = 159;
CypherParser.RULE_allShortestPathFunctionName = 160;
CypherParser.RULE_atom = 161;
CypherParser.RULE_literal = 162;
CypherParser.RULE_stringLiteral = 163;
CypherParser.RULE_booleanLiteral = 164;
CypherParser.RULE_listLiteral = 165;
CypherParser.RULE_partialComparisonExpression = 166;
CypherParser.RULE_parenthesizedExpression = 167;
CypherParser.RULE_relationshipsPattern = 168;
CypherParser.RULE_filterExpression = 169;
CypherParser.RULE_idInColl = 170;
CypherParser.RULE_functionInvocation = 171;
CypherParser.RULE_functionInvocationBody = 172;
CypherParser.RULE_functionName = 173;
CypherParser.RULE_procedureName = 174;
CypherParser.RULE_listComprehension = 175;
CypherParser.RULE_patternComprehension = 176;
CypherParser.RULE_propertyLookup = 177;
CypherParser.RULE_caseExpression = 178;
CypherParser.RULE_caseAlternatives = 179;
CypherParser.RULE_variable = 180;
CypherParser.RULE_numberLiteral = 181;
CypherParser.RULE_mapLiteral = 182;
CypherParser.RULE_mapProjection = 183;
CypherParser.RULE_mapProjectionVariants = 184;
CypherParser.RULE_literalEntry = 185;
CypherParser.RULE_propertySelector = 186;
CypherParser.RULE_variableSelector = 187;
CypherParser.RULE_allPropertiesSelector = 188;
CypherParser.RULE_parameter = 189;
CypherParser.RULE_legacyParameter = 190;
CypherParser.RULE_newParameter = 191;
CypherParser.RULE_parameterName = 192;
CypherParser.RULE_propertyExpressions = 193;
CypherParser.RULE_propertyExpression = 194;
CypherParser.RULE_propertyKeys = 195;
CypherParser.RULE_propertyKeyName = 196;
CypherParser.RULE_integerLiteral = 197;
CypherParser.RULE_doubleLiteral = 198;
CypherParser.RULE_namespace = 199;
CypherParser.RULE_leftArrowHead = 200;
CypherParser.RULE_rightArrowHead = 201;
CypherParser.RULE_dash = 202;
CypherParser.RULE_symbolicName = 203;
CypherParser.RULE_keyword = 204;

class RawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_raw;
    }

	cypherPart() {
	    return this.getTypedRuleContext(CypherPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRaw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRaw(this);
		}
	}


}



class CypherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_cypher;
    }

	raw = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RawContext);
	    } else {
	        return this.getTypedRuleContext(RawContext,i);
	    }
	};

	EOF() {
	    return this.getToken(CypherParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCypher(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCypher(this);
		}
	}


}



class CypherPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_cypherPart;
    }

	cypherQuery() {
	    return this.getTypedRuleContext(CypherQueryContext,0);
	};

	cypherConsoleCommand() {
	    return this.getTypedRuleContext(CypherConsoleCommandContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCypherPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCypherPart(this);
		}
	}


}



class CypherConsoleCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_cypherConsoleCommand;
    }

	cypherConsoleCommandName() {
	    return this.getTypedRuleContext(CypherConsoleCommandNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	cypherConsoleCommandParameters() {
	    return this.getTypedRuleContext(CypherConsoleCommandParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCypherConsoleCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCypherConsoleCommand(this);
		}
	}


}



class CypherConsoleCommandNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_cypherConsoleCommandName;
    }

	symbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCypherConsoleCommandName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCypherConsoleCommandName(this);
		}
	}


}



class CypherConsoleCommandParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_cypherConsoleCommandParameters;
    }

	cypherConsoleCommandParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CypherConsoleCommandParameterContext);
	    } else {
	        return this.getTypedRuleContext(CypherConsoleCommandParameterContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCypherConsoleCommandParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCypherConsoleCommandParameters(this);
		}
	}


}



class CypherConsoleCommandParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_cypherConsoleCommandParameter;
    }

	url() {
	    return this.getTypedRuleContext(UrlContext,0);
	};

	json() {
	    return this.getTypedRuleContext(JsonContext,0);
	};

	arrowExpression() {
	    return this.getTypedRuleContext(ArrowExpressionContext,0);
	};

	mapLiteral() {
	    return this.getTypedRuleContext(MapLiteralContext,0);
	};

	keyValueLiteral() {
	    return this.getTypedRuleContext(KeyValueLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	subCommand() {
	    return this.getTypedRuleContext(SubCommandContext,0);
	};

	commandPath() {
	    return this.getTypedRuleContext(CommandPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCypherConsoleCommandParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCypherConsoleCommandParameter(this);
		}
	}


}



class ArrowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_arrowExpression;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterArrowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitArrowExpression(this);
		}
	}


}



class UrlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_url;
    }

	uri() {
	    return this.getTypedRuleContext(UriContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUrl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUrl(this);
		}
	}


}



class UriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_uri;
    }

	scheme() {
	    return this.getTypedRuleContext(SchemeContext,0);
	};

	host() {
	    return this.getTypedRuleContext(HostContext,0);
	};

	login() {
	    return this.getTypedRuleContext(LoginContext,0);
	};

	port() {
	    return this.getTypedRuleContext(PortContext,0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	urlQuery() {
	    return this.getTypedRuleContext(UrlQueryContext,0);
	};

	frag() {
	    return this.getTypedRuleContext(FragContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUri(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUri(this);
		}
	}


}



class SchemeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_scheme;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterScheme(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitScheme(this);
		}
	}


}



class HostContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_host;
    }

	hostname() {
	    return this.getTypedRuleContext(HostnameContext,0);
	};

	hostnumber() {
	    return this.getTypedRuleContext(HostnumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterHost(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitHost(this);
		}
	}


}



class HostnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_hostname;
    }

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterHostname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitHostname(this);
		}
	}


}



class HostnumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_hostnumber;
    }

	urlDigits = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UrlDigitsContext);
	    } else {
	        return this.getTypedRuleContext(UrlDigitsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterHostnumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitHostnumber(this);
		}
	}


}



class PortContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_port;
    }

	urlDigits() {
	    return this.getTypedRuleContext(UrlDigitsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPort(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPort(this);
		}
	}


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_path;
    }

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPath(this);
		}
	}


}



class UserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_user;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUser(this);
		}
	}


}



class LoginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_login;
    }

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	password() {
	    return this.getTypedRuleContext(PasswordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLogin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLogin(this);
		}
	}


}



class PasswordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_password;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPassword(this);
		}
	}


}



class FragContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_frag;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterFrag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitFrag(this);
		}
	}


}



class UrlQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_urlQuery;
    }

	search() {
	    return this.getTypedRuleContext(SearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUrlQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUrlQuery(this);
		}
	}


}



class SearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_search;
    }

	searchparameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SearchparameterContext);
	    } else {
	        return this.getTypedRuleContext(SearchparameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSearch(this);
		}
	}


}



class SearchparameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_searchparameter;
    }

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	urlDigits() {
	    return this.getTypedRuleContext(UrlDigitsContext,0);
	};

	UrlHex() {
	    return this.getToken(CypherParser.UrlHex, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSearchparameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSearchparameter(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_string;
    }

	symbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitString(this);
		}
	}


}



class UrlDigitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_urlDigits;
    }

	integerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntegerLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUrlDigits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUrlDigits(this);
		}
	}


}



class JsonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_json;
    }

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterJson(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitJson(this);
		}
	}


}



class ObjContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_obj;
    }

	pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PairContext);
	    } else {
	        return this.getTypedRuleContext(PairContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterObj(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitObj(this);
		}
	}


}



class PairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_pair;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPair(this);
		}
	}


}



class ArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_array;
    }

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitArray(this);
		}
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_value;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	obj() {
	    return this.getTypedRuleContext(ObjContext,0);
	};

	array() {
	    return this.getTypedRuleContext(ArrayContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	NULL() {
	    return this.getToken(CypherParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitValue(this);
		}
	}


}



class KeyValueLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_keyValueLiteral;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterKeyValueLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitKeyValueLiteral(this);
		}
	}


}



class CommandPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_commandPath;
    }

	symbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicNameContext,i);
	    }
	};

	numberLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumberLiteralContext);
	    } else {
	        return this.getTypedRuleContext(NumberLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCommandPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCommandPath(this);
		}
	}


}



class SubCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_subCommand;
    }

	symbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSubCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSubCommand(this);
		}
	}


}



class CypherQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_cypherQuery;
    }

	queryOptions() {
	    return this.getTypedRuleContext(QueryOptionsContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCypherQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCypherQuery(this);
		}
	}


}



class QueryOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_queryOptions;
    }

	anyCypherOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnyCypherOptionContext);
	    } else {
	        return this.getTypedRuleContext(AnyCypherOptionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterQueryOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitQueryOptions(this);
		}
	}


}



class AnyCypherOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_anyCypherOption;
    }

	cypherOption() {
	    return this.getTypedRuleContext(CypherOptionContext,0);
	};

	explain() {
	    return this.getTypedRuleContext(ExplainContext,0);
	};

	profile() {
	    return this.getTypedRuleContext(ProfileContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAnyCypherOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAnyCypherOption(this);
		}
	}


}



class CypherOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_cypherOption;
    }

	CYPHER() {
	    return this.getToken(CypherParser.CYPHER, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	versionNumber() {
	    return this.getTypedRuleContext(VersionNumberContext,0);
	};

	configurationOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConfigurationOptionContext);
	    } else {
	        return this.getTypedRuleContext(ConfigurationOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCypherOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCypherOption(this);
		}
	}


}



class VersionNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_versionNumber;
    }

	RegularDecimalReal() {
	    return this.getToken(CypherParser.RegularDecimalReal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterVersionNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitVersionNumber(this);
		}
	}


}



class ExplainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_explain;
    }

	EXPLAIN() {
	    return this.getToken(CypherParser.EXPLAIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterExplain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitExplain(this);
		}
	}


}



class ProfileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_profile;
    }

	PROFILE() {
	    return this.getToken(CypherParser.PROFILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProfile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProfile(this);
		}
	}


}



class ConfigurationOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_configurationOption;
    }

	symbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicNameContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterConfigurationOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitConfigurationOption(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_statement;
    }

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitStatement(this);
		}
	}


}



class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_query;
    }

	regularQuery() {
	    return this.getTypedRuleContext(RegularQueryContext,0);
	};

	bulkImportQuery() {
	    return this.getTypedRuleContext(BulkImportQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitQuery(this);
		}
	}


}



class RegularQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_regularQuery;
    }

	singleQuery() {
	    return this.getTypedRuleContext(SingleQueryContext,0);
	};

	union = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionContext);
	    } else {
	        return this.getTypedRuleContext(UnionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRegularQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRegularQuery(this);
		}
	}


}



class BulkImportQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_bulkImportQuery;
    }

	periodicCommitHint() {
	    return this.getTypedRuleContext(PeriodicCommitHintContext,0);
	};

	loadCSVQuery() {
	    return this.getTypedRuleContext(LoadCSVQueryContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterBulkImportQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitBulkImportQuery(this);
		}
	}


}



class SingleQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_singleQuery;
    }

	clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClauseContext);
	    } else {
	        return this.getTypedRuleContext(ClauseContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSingleQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSingleQuery(this);
		}
	}


}



class PeriodicCommitHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_periodicCommitHint;
    }

	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	PERIODIC() {
	    return this.getToken(CypherParser.PERIODIC, 0);
	};

	COMMIT() {
	    return this.getToken(CypherParser.COMMIT, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPeriodicCommitHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPeriodicCommitHint(this);
		}
	}


}



class LoadCSVQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_loadCSVQuery;
    }

	loadCSVClause() {
	    return this.getTypedRuleContext(LoadCSVClauseContext,0);
	};

	clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClauseContext);
	    } else {
	        return this.getTypedRuleContext(ClauseContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLoadCSVQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLoadCSVQuery(this);
		}
	}


}



class UnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_union;
    }

	UNION() {
	    return this.getToken(CypherParser.UNION, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	singleQuery() {
	    return this.getTypedRuleContext(SingleQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUnion(this);
		}
	}


}



class ClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_clause;
    }

	loadCSVClause() {
	    return this.getTypedRuleContext(LoadCSVClauseContext,0);
	};

	startClause() {
	    return this.getTypedRuleContext(StartClauseContext,0);
	};

	matchClause() {
	    return this.getTypedRuleContext(MatchClauseContext,0);
	};

	unwindClause() {
	    return this.getTypedRuleContext(UnwindClauseContext,0);
	};

	mergeClause() {
	    return this.getTypedRuleContext(MergeClauseContext,0);
	};

	createClause() {
	    return this.getTypedRuleContext(CreateClauseContext,0);
	};

	createUniqueClause() {
	    return this.getTypedRuleContext(CreateUniqueClauseContext,0);
	};

	setClause() {
	    return this.getTypedRuleContext(SetClauseContext,0);
	};

	deleteClause() {
	    return this.getTypedRuleContext(DeleteClauseContext,0);
	};

	removeClause() {
	    return this.getTypedRuleContext(RemoveClauseContext,0);
	};

	foreachClause() {
	    return this.getTypedRuleContext(ForeachClauseContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	returnClause() {
	    return this.getTypedRuleContext(ReturnClauseContext,0);
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitClause(this);
		}
	}


}



class CommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_command;
    }

	createIndex() {
	    return this.getTypedRuleContext(CreateIndexContext,0);
	};

	dropIndex() {
	    return this.getTypedRuleContext(DropIndexContext,0);
	};

	createUniqueConstraint() {
	    return this.getTypedRuleContext(CreateUniqueConstraintContext,0);
	};

	dropUniqueConstraint() {
	    return this.getTypedRuleContext(DropUniqueConstraintContext,0);
	};

	createNodeKeyConstraint() {
	    return this.getTypedRuleContext(CreateNodeKeyConstraintContext,0);
	};

	dropNodeKeyConstraint() {
	    return this.getTypedRuleContext(DropNodeKeyConstraintContext,0);
	};

	createNodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(CreateNodePropertyExistenceConstraintContext,0);
	};

	dropNodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(DropNodePropertyExistenceConstraintContext,0);
	};

	createRelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(CreateRelationshipPropertyExistenceConstraintContext,0);
	};

	dropRelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(DropRelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCommand(this);
		}
	}


}



class CreateUniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_createUniqueConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	uniqueConstraint() {
	    return this.getTypedRuleContext(UniqueConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCreateUniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCreateUniqueConstraint(this);
		}
	}


}



class CreateNodeKeyConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_createNodeKeyConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	nodeKeyConstraint() {
	    return this.getTypedRuleContext(NodeKeyConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCreateNodeKeyConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCreateNodeKeyConstraint(this);
		}
	}


}



class CreateNodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_createNodePropertyExistenceConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	nodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCreateNodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCreateNodePropertyExistenceConstraint(this);
		}
	}


}



class CreateRelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_createRelationshipPropertyExistenceConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	relationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCreateRelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCreateRelationshipPropertyExistenceConstraint(this);
		}
	}


}



class CreateIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_createIndex;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	index() {
	    return this.getTypedRuleContext(IndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCreateIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCreateIndex(this);
		}
	}


}



class DropUniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_dropUniqueConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	uniqueConstraint() {
	    return this.getTypedRuleContext(UniqueConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterDropUniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitDropUniqueConstraint(this);
		}
	}


}



class DropNodeKeyConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_dropNodeKeyConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	nodeKeyConstraint() {
	    return this.getTypedRuleContext(NodeKeyConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterDropNodeKeyConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitDropNodeKeyConstraint(this);
		}
	}


}



class DropNodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_dropNodePropertyExistenceConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	nodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterDropNodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitDropNodePropertyExistenceConstraint(this);
		}
	}


}



class DropRelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_dropRelationshipPropertyExistenceConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	relationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterDropRelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitDropRelationshipPropertyExistenceConstraint(this);
		}
	}


}



class DropIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_dropIndex;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	index() {
	    return this.getTypedRuleContext(IndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitDropIndex(this);
		}
	}


}



class IndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_index;
    }

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	nodeLabel() {
	    return this.getTypedRuleContext(NodeLabelContext,0);
	};

	propertyKeys() {
	    return this.getTypedRuleContext(PropertyKeysContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitIndex(this);
		}
	}


}



class UniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_uniqueConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	nodeLabel() {
	    return this.getTypedRuleContext(NodeLabelContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	propertyExpression() {
	    return this.getTypedRuleContext(PropertyExpressionContext,0);
	};

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUniqueConstraint(this);
		}
	}


}



class NodeKeyConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nodeKeyConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	nodeLabel() {
	    return this.getTypedRuleContext(NodeLabelContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	propertyExpressions() {
	    return this.getTypedRuleContext(PropertyExpressionsContext,0);
	};

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	NODE() {
	    return this.getToken(CypherParser.NODE, 0);
	};

	KEY() {
	    return this.getToken(CypherParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNodeKeyConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNodeKeyConstraint(this);
		}
	}


}



class NodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nodePropertyExistenceConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	nodeLabel() {
	    return this.getTypedRuleContext(NodeLabelContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	propertyExpression() {
	    return this.getTypedRuleContext(PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNodePropertyExistenceConstraint(this);
		}
	}


}



class RelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipPropertyExistenceConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	relationshipPatternSyntax() {
	    return this.getTypedRuleContext(RelationshipPatternSyntaxContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	propertyExpression() {
	    return this.getTypedRuleContext(PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipPropertyExistenceConstraint(this);
		}
	}


}



class RelationshipPatternSyntaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipPatternSyntax;
    }

	dash = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DashContext);
	    } else {
	        return this.getTypedRuleContext(DashContext,i);
	    }
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	relType() {
	    return this.getTypedRuleContext(RelTypeContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	rightArrowHead() {
	    return this.getTypedRuleContext(RightArrowHeadContext,0);
	};

	leftArrowHead() {
	    return this.getTypedRuleContext(LeftArrowHeadContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipPatternSyntax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipPatternSyntax(this);
		}
	}


}



class LoadCSVClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_loadCSVClause;
    }

	LOAD() {
	    return this.getToken(CypherParser.LOAD, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	CSV() {
	    return this.getToken(CypherParser.CSV, 0);
	};

	FROM() {
	    return this.getToken(CypherParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	HEADERS() {
	    return this.getToken(CypherParser.HEADERS, 0);
	};

	FIELDTERMINATOR() {
	    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLoadCSVClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLoadCSVClause(this);
		}
	}


}



class MatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_matchClause;
    }

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	hint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HintContext);
	    } else {
	        return this.getTypedRuleContext(HintContext,i);
	    }
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterMatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitMatchClause(this);
		}
	}


}



class UnwindClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_unwindClause;
    }

	UNWIND() {
	    return this.getToken(CypherParser.UNWIND, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUnwindClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUnwindClause(this);
		}
	}


}



class MergeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mergeClause;
    }

	MERGE() {
	    return this.getToken(CypherParser.MERGE, 0);
	};

	patternPart() {
	    return this.getTypedRuleContext(PatternPartContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	mergeAction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MergeActionContext);
	    } else {
	        return this.getTypedRuleContext(MergeActionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterMergeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitMergeClause(this);
		}
	}


}



class MergeActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mergeAction;
    }

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	setClause() {
	    return this.getTypedRuleContext(SetClauseContext,0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterMergeAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitMergeAction(this);
		}
	}


}



class CreateClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_createClause;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCreateClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCreateClause(this);
		}
	}


}



class CreateUniqueClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_createUniqueClause;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCreateUniqueClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCreateUniqueClause(this);
		}
	}


}



class SetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_setClause;
    }

	SET() {
	    return this.getToken(CypherParser.SET, 0);
	};

	setItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetItemContext);
	    } else {
	        return this.getTypedRuleContext(SetItemContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSetClause(this);
		}
	}


}



class SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_setItem;
    }

	propertyExpression() {
	    return this.getTypedRuleContext(PropertyExpressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	nodeLabels() {
	    return this.getTypedRuleContext(NodeLabelsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSetItem(this);
		}
	}


}



class DeleteClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_deleteClause;
    }

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DETACH() {
	    return this.getToken(CypherParser.DETACH, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterDeleteClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitDeleteClause(this);
		}
	}


}



class RemoveClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_removeClause;
    }

	REMOVE() {
	    return this.getToken(CypherParser.REMOVE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	removeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(RemoveItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRemoveClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRemoveClause(this);
		}
	}


}



class RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_removeItem;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	nodeLabels() {
	    return this.getTypedRuleContext(NodeLabelsContext,0);
	};

	propertyExpression() {
	    return this.getTypedRuleContext(PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRemoveItem(this);
		}
	}


}



class ForeachClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_foreachClause;
    }

	FOREACH() {
	    return this.getToken(CypherParser.FOREACH, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClauseContext);
	    } else {
	        return this.getTypedRuleContext(ClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterForeachClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitForeachClause(this);
		}
	}


}



class WithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_withClause;
    }

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	returnBody() {
	    return this.getTypedRuleContext(ReturnBodyContext,0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterWithClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitWithClause(this);
		}
	}


}



class ReturnClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_returnClause;
    }

	RETURN() {
	    return this.getToken(CypherParser.RETURN, 0);
	};

	returnBody() {
	    return this.getTypedRuleContext(ReturnBodyContext,0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterReturnClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitReturnClause(this);
		}
	}


}



class ReturnBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_returnBody;
    }

	returnItems() {
	    return this.getTypedRuleContext(ReturnItemsContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	order() {
	    return this.getTypedRuleContext(OrderContext,0);
	};

	skip() {
	    return this.getTypedRuleContext(SkipContext,0);
	};

	limit() {
	    return this.getTypedRuleContext(LimitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterReturnBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitReturnBody(this);
		}
	}


}



class FuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_func;
    }

	procedureInvocation() {
	    return this.getTypedRuleContext(ProcedureInvocationContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	procedureResults() {
	    return this.getTypedRuleContext(ProcedureResultsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitFunc(this);
		}
	}


}



class ReturnItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_returnItems;
    }

	returnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(ReturnItemContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	func() {
	    return this.getTypedRuleContext(FuncContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterReturnItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitReturnItems(this);
		}
	}


}



class ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_returnItem;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterReturnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitReturnItem(this);
		}
	}


}



class CallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_call;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	procedureInvocation() {
	    return this.getTypedRuleContext(ProcedureInvocationContext,0);
	};

	procedureResults() {
	    return this.getTypedRuleContext(ProcedureResultsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCall(this);
		}
	}


}



class ProcedureInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_procedureInvocation;
    }

	procedureInvocationBody() {
	    return this.getTypedRuleContext(ProcedureInvocationBodyContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	procedureArguments() {
	    return this.getTypedRuleContext(ProcedureArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProcedureInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProcedureInvocation(this);
		}
	}


}



class ProcedureInvocationBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_procedureInvocationBody;
    }

	namespace() {
	    return this.getTypedRuleContext(NamespaceContext,0);
	};

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProcedureInvocationBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProcedureInvocationBody(this);
		}
	}


}



class ProcedureArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_procedureArguments;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProcedureArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProcedureArguments(this);
		}
	}


}



class ProcedureResultsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_procedureResults;
    }

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	procedureResult = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureResultContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureResultContext,i);
	    }
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProcedureResults(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProcedureResults(this);
		}
	}


}



class ProcedureResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_procedureResult;
    }

	aliasedProcedureResult() {
	    return this.getTypedRuleContext(AliasedProcedureResultContext,0);
	};

	simpleProcedureResult() {
	    return this.getTypedRuleContext(SimpleProcedureResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProcedureResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProcedureResult(this);
		}
	}


}



class AliasedProcedureResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_aliasedProcedureResult;
    }

	procedureOutput() {
	    return this.getTypedRuleContext(ProcedureOutputContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAliasedProcedureResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAliasedProcedureResult(this);
		}
	}


}



class SimpleProcedureResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_simpleProcedureResult;
    }

	procedureOutput() {
	    return this.getTypedRuleContext(ProcedureOutputContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSimpleProcedureResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSimpleProcedureResult(this);
		}
	}


}



class ProcedureOutputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_procedureOutput;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProcedureOutput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProcedureOutput(this);
		}
	}


}



class OrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_order;
    }

	ORDER() {
	    return this.getToken(CypherParser.ORDER, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	BY() {
	    return this.getToken(CypherParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOrder(this);
		}
	}


}



class SkipContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_skip;
    }

	L_SKIP() {
	    return this.getToken(CypherParser.L_SKIP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSkip(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSkip(this);
		}
	}


}



class LimitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_limit;
    }

	LIMIT() {
	    return this.getToken(CypherParser.LIMIT, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLimit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLimit(this);
		}
	}


}



class SortItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_sortItem;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASCENDING() {
	    return this.getToken(CypherParser.ASCENDING, 0);
	};

	ASC() {
	    return this.getToken(CypherParser.ASC, 0);
	};

	DESCENDING() {
	    return this.getToken(CypherParser.DESCENDING, 0);
	};

	DESC() {
	    return this.getToken(CypherParser.DESC, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSortItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSortItem(this);
		}
	}


}



class HintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_hint;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	nodeLabel() {
	    return this.getTypedRuleContext(NodeLabelContext,0);
	};

	propertyKeys() {
	    return this.getTypedRuleContext(PropertyKeysContext,0);
	};

	JOIN() {
	    return this.getToken(CypherParser.JOIN, 0);
	};

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	SCAN() {
	    return this.getToken(CypherParser.SCAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitHint(this);
		}
	}


}



class StartClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_startClause;
    }

	START() {
	    return this.getToken(CypherParser.START, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	startPoint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StartPointContext);
	    } else {
	        return this.getTypedRuleContext(StartPointContext,i);
	    }
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterStartClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitStartClause(this);
		}
	}


}



class StartPointContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_startPoint;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	lookup() {
	    return this.getTypedRuleContext(LookupContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterStartPoint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitStartPoint(this);
		}
	}


}



class LookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_lookup;
    }

	nodeLookup() {
	    return this.getTypedRuleContext(NodeLookupContext,0);
	};

	relationshipLookup() {
	    return this.getTypedRuleContext(RelationshipLookupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLookup(this);
		}
	}


}



class NodeLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nodeLookup;
    }

	NODE() {
	    return this.getToken(CypherParser.NODE, 0);
	};

	identifiedIndexLookup() {
	    return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);
	};

	indexQuery() {
	    return this.getTypedRuleContext(IndexQueryContext,0);
	};

	idLookup() {
	    return this.getTypedRuleContext(IdLookupContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNodeLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNodeLookup(this);
		}
	}


}



class RelationshipLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipLookup;
    }

	RELATIONSHIP() {
	    return this.getToken(CypherParser.RELATIONSHIP, 0);
	};

	REL() {
	    return this.getToken(CypherParser.REL, 0);
	};

	identifiedIndexLookup() {
	    return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);
	};

	indexQuery() {
	    return this.getTypedRuleContext(IndexQueryContext,0);
	};

	idLookup() {
	    return this.getTypedRuleContext(IdLookupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipLookup(this);
		}
	}


}



class IdentifiedIndexLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_identifiedIndexLookup;
    }

	symbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicNameContext,i);
	    }
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterIdentifiedIndexLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitIdentifiedIndexLookup(this);
		}
	}


}



class IndexQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_indexQuery;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterIndexQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitIndexQuery(this);
		}
	}


}



class IdLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_idLookup;
    }

	literalIds() {
	    return this.getTypedRuleContext(LiteralIdsContext,0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterIdLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitIdLookup(this);
		}
	}


}



class LiteralIdsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_literalIds;
    }

	integerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntegerLiteralContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLiteralIds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLiteralIds(this);
		}
	}


}



class WhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_where;
    }

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitWhere(this);
		}
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_pattern;
    }

	patternPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternPartContext);
	    } else {
	        return this.getTypedRuleContext(PatternPartContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPattern(this);
		}
	}


}



class PatternPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternPart;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	anonymousPatternPart() {
	    return this.getTypedRuleContext(AnonymousPatternPartContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPatternPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPatternPart(this);
		}
	}


}



class AnonymousPatternPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_anonymousPatternPart;
    }

	shortestPathPatternFunction() {
	    return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);
	};

	patternElement() {
	    return this.getTypedRuleContext(PatternElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAnonymousPatternPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAnonymousPatternPart(this);
		}
	}


}



class PatternElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternElement;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	patternElementChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternElementChainContext);
	    } else {
	        return this.getTypedRuleContext(PatternElementChainContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	patternElement() {
	    return this.getTypedRuleContext(PatternElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPatternElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPatternElement(this);
		}
	}


}



class NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nodePattern;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	nodeLabels() {
	    return this.getTypedRuleContext(NodeLabelsContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNodePattern(this);
		}
	}


}



class PatternElementChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternElementChain;
    }

	relationshipPattern() {
	    return this.getTypedRuleContext(RelationshipPatternContext,0);
	};

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPatternElementChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPatternElementChain(this);
		}
	}


}



class RelationshipPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipPattern;
    }

	relationshipPatternStart() {
	    return this.getTypedRuleContext(RelationshipPatternStartContext,0);
	};

	relationshipPatternEnd() {
	    return this.getTypedRuleContext(RelationshipPatternEndContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	relationshipDetail() {
	    return this.getTypedRuleContext(RelationshipDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipPattern(this);
		}
	}


}



class RelationshipPatternStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipPatternStart;
    }

	leftArrowHead() {
	    return this.getTypedRuleContext(LeftArrowHeadContext,0);
	};

	dash() {
	    return this.getTypedRuleContext(DashContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipPatternStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipPatternStart(this);
		}
	}


}



class RelationshipPatternEndContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipPatternEnd;
    }

	dash() {
	    return this.getTypedRuleContext(DashContext,0);
	};

	rightArrowHead() {
	    return this.getTypedRuleContext(RightArrowHeadContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipPatternEnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipPatternEnd(this);
		}
	}


}



class RelationshipDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipDetail;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	relationshipTypes() {
	    return this.getTypedRuleContext(RelationshipTypesContext,0);
	};

	rangeLiteral() {
	    return this.getTypedRuleContext(RangeLiteralContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipDetail(this);
		}
	}


}



class PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_properties;
    }

	mapLiteral() {
	    return this.getTypedRuleContext(MapLiteralContext,0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProperties(this);
		}
	}


}



class RelTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relType;
    }

	relTypeName() {
	    return this.getTypedRuleContext(RelTypeNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelType(this);
		}
	}


}



class RelationshipTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipTypes;
    }

	relationshipType() {
	    return this.getTypedRuleContext(RelationshipTypeContext,0);
	};

	relationshipTypeOptionalColon = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationshipTypeOptionalColonContext);
	    } else {
	        return this.getTypedRuleContext(RelationshipTypeOptionalColonContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipTypes(this);
		}
	}


}



class RelationshipTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipType;
    }

	relTypeName() {
	    return this.getTypedRuleContext(RelTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipType(this);
		}
	}


}



class RelationshipTypeOptionalColonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipTypeOptionalColon;
    }

	relTypeName() {
	    return this.getTypedRuleContext(RelTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipTypeOptionalColon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipTypeOptionalColon(this);
		}
	}


}



class NodeLabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nodeLabels;
    }

	nodeLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NodeLabelContext);
	    } else {
	        return this.getTypedRuleContext(NodeLabelContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNodeLabels(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNodeLabels(this);
		}
	}


}



class NodeLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nodeLabel;
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNodeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNodeLabel(this);
		}
	}


}



class RangeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_rangeLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	integerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntegerLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRangeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRangeLiteral(this);
		}
	}


}



class LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_labelName;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLabelName(this);
		}
	}


}



class RelTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relTypeName;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelTypeName(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_expression;
    }

	orExpression() {
	    return this.getTypedRuleContext(OrExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitExpression(this);
		}
	}


}



class OrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_orExpression;
    }

	xorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(XorExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.OR);
	    } else {
	        return this.getToken(CypherParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOrExpression(this);
		}
	}


}



class XorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_xorExpression;
    }

	andExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AndExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.XOR);
	    } else {
	        return this.getToken(CypherParser.XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitXorExpression(this);
		}
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_andExpression;
    }

	notExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NotExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NotExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.AND);
	    } else {
	        return this.getToken(CypherParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAndExpression(this);
		}
	}


}



class NotExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_notExpression;
    }

	comparisonExpression() {
	    return this.getTypedRuleContext(ComparisonExpressionContext,0);
	};

	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NOT);
	    } else {
	        return this.getToken(CypherParser.NOT, i);
	    }
	};


	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNotExpression(this);
		}
	}


}



class ComparisonExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_comparisonExpression;
    }

	addOrSubtractExpression() {
	    return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);
	};

	partialComparisonExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartialComparisonExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PartialComparisonExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitComparisonExpression(this);
		}
	}


}



class AddOrSubtractExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_addOrSubtractExpression;
    }

	multiplyDivideModuloExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplyDivideModuloExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplyDivideModuloExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAddOrSubtractExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAddOrSubtractExpression(this);
		}
	}


}



class MultiplyDivideModuloExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_multiplyDivideModuloExpression;
    }

	powerOfExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PowerOfExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PowerOfExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterMultiplyDivideModuloExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitMultiplyDivideModuloExpression(this);
		}
	}


}



class PowerOfExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_powerOfExpression;
    }

	unaryAddOrSubtractExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryAddOrSubtractExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryAddOrSubtractExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPowerOfExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPowerOfExpression(this);
		}
	}


}



class UnaryAddOrSubtractExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_unaryAddOrSubtractExpression;
    }

	stringListNullOperatorExpression() {
	    return this.getTypedRuleContext(StringListNullOperatorExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterUnaryAddOrSubtractExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitUnaryAddOrSubtractExpression(this);
		}
	}


}



class StringListNullOperatorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_stringListNullOperatorExpression;
    }

	propertyOrLabelsExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyOrLabelsExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PropertyOrLabelsExpressionContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.IS);
	    } else {
	        return this.getToken(CypherParser.IS, i);
	    }
	};


	NULL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NULL);
	    } else {
	        return this.getToken(CypherParser.NULL, i);
	    }
	};


	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NOT);
	    } else {
	        return this.getToken(CypherParser.NOT, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.IN);
	    } else {
	        return this.getToken(CypherParser.IN, i);
	    }
	};


	STARTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.STARTS);
	    } else {
	        return this.getToken(CypherParser.STARTS, i);
	    }
	};


	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.WITH);
	    } else {
	        return this.getToken(CypherParser.WITH, i);
	    }
	};


	ENDS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.ENDS);
	    } else {
	        return this.getToken(CypherParser.ENDS, i);
	    }
	};


	CONTAINS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.CONTAINS);
	    } else {
	        return this.getToken(CypherParser.CONTAINS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterStringListNullOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitStringListNullOperatorExpression(this);
		}
	}


}



class PropertyOrLabelsExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertyOrLabelsExpression;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	propertyLookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyLookupContext);
	    } else {
	        return this.getTypedRuleContext(PropertyLookupContext,i);
	    }
	};

	nodeLabels = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NodeLabelsContext);
	    } else {
	        return this.getTypedRuleContext(NodeLabelsContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPropertyOrLabelsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPropertyOrLabelsExpression(this);
		}
	}


}



class FilterFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_filterFunction;
    }

	filterFunctionName() {
	    return this.getTypedRuleContext(FilterFunctionNameContext,0);
	};

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterFilterFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitFilterFunction(this);
		}
	}


}



class FilterFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_filterFunctionName;
    }

	FILTER() {
	    return this.getToken(CypherParser.FILTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterFilterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitFilterFunctionName(this);
		}
	}


}



class ExistsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_existsFunction;
    }

	existsFunctionName() {
	    return this.getTypedRuleContext(ExistsFunctionNameContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterExistsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitExistsFunction(this);
		}
	}


}



class ExistsFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_existsFunctionName;
    }

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterExistsFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitExistsFunctionName(this);
		}
	}


}



class AllFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_allFunction;
    }

	allFunctionName() {
	    return this.getTypedRuleContext(AllFunctionNameContext,0);
	};

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAllFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAllFunction(this);
		}
	}


}



class AllFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_allFunctionName;
    }

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAllFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAllFunctionName(this);
		}
	}


}



class AnyFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_anyFunction;
    }

	anyFunctionName() {
	    return this.getTypedRuleContext(AnyFunctionNameContext,0);
	};

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAnyFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAnyFunction(this);
		}
	}


}



class AnyFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_anyFunctionName;
    }

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAnyFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAnyFunctionName(this);
		}
	}


}



class NoneFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_noneFunction;
    }

	noneFunctionName() {
	    return this.getTypedRuleContext(NoneFunctionNameContext,0);
	};

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNoneFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNoneFunction(this);
		}
	}


}



class NoneFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_noneFunctionName;
    }

	NONE() {
	    return this.getToken(CypherParser.NONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNoneFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNoneFunctionName(this);
		}
	}


}



class SingleFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_singleFunction;
    }

	singleFunctionName() {
	    return this.getTypedRuleContext(SingleFunctionNameContext,0);
	};

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSingleFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSingleFunction(this);
		}
	}


}



class SingleFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_singleFunctionName;
    }

	SINGLE() {
	    return this.getToken(CypherParser.SINGLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSingleFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSingleFunctionName(this);
		}
	}


}



class ExtractFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_extractFunction;
    }

	extractFunctionName() {
	    return this.getTypedRuleContext(ExtractFunctionNameContext,0);
	};

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterExtractFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitExtractFunction(this);
		}
	}


}



class ExtractFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_extractFunctionName;
    }

	EXTRACT() {
	    return this.getToken(CypherParser.EXTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterExtractFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitExtractFunctionName(this);
		}
	}


}



class ReduceFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_reduceFunction;
    }

	reduceFunctionName() {
	    return this.getTypedRuleContext(ReduceFunctionNameContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	idInColl() {
	    return this.getTypedRuleContext(IdInCollContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterReduceFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitReduceFunction(this);
		}
	}


}



class ReduceFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_reduceFunctionName;
    }

	REDUCE() {
	    return this.getToken(CypherParser.REDUCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterReduceFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitReduceFunctionName(this);
		}
	}


}



class ShortestPathPatternFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_shortestPathPatternFunction;
    }

	shortestPathFunctionName() {
	    return this.getTypedRuleContext(ShortestPathFunctionNameContext,0);
	};

	patternElement() {
	    return this.getTypedRuleContext(PatternElementContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	allShortestPathFunctionName() {
	    return this.getTypedRuleContext(AllShortestPathFunctionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterShortestPathPatternFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitShortestPathPatternFunction(this);
		}
	}


}



class ShortestPathFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_shortestPathFunctionName;
    }

	SHORTESTPATH() {
	    return this.getToken(CypherParser.SHORTESTPATH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterShortestPathFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitShortestPathFunctionName(this);
		}
	}


}



class AllShortestPathFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_allShortestPathFunctionName;
    }

	ALLSHORTESTPATHS() {
	    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAllShortestPathFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAllShortestPathFunctionName(this);
		}
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_atom;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	caseExpression() {
	    return this.getTypedRuleContext(CaseExpressionContext,0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	listComprehension() {
	    return this.getTypedRuleContext(ListComprehensionContext,0);
	};

	patternComprehension() {
	    return this.getTypedRuleContext(PatternComprehensionContext,0);
	};

	filterFunction() {
	    return this.getTypedRuleContext(FilterFunctionContext,0);
	};

	extractFunction() {
	    return this.getTypedRuleContext(ExtractFunctionContext,0);
	};

	reduceFunction() {
	    return this.getTypedRuleContext(ReduceFunctionContext,0);
	};

	allFunction() {
	    return this.getTypedRuleContext(AllFunctionContext,0);
	};

	anyFunction() {
	    return this.getTypedRuleContext(AnyFunctionContext,0);
	};

	noneFunction() {
	    return this.getTypedRuleContext(NoneFunctionContext,0);
	};

	singleFunction() {
	    return this.getTypedRuleContext(SingleFunctionContext,0);
	};

	existsFunction() {
	    return this.getTypedRuleContext(ExistsFunctionContext,0);
	};

	shortestPathPatternFunction() {
	    return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);
	};

	relationshipsPattern() {
	    return this.getTypedRuleContext(RelationshipsPatternContext,0);
	};

	parenthesizedExpression() {
	    return this.getTypedRuleContext(ParenthesizedExpressionContext,0);
	};

	functionInvocation() {
	    return this.getTypedRuleContext(FunctionInvocationContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAtom(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_literal;
    }

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	NULL() {
	    return this.getToken(CypherParser.NULL, 0);
	};

	mapLiteral() {
	    return this.getTypedRuleContext(MapLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	mapProjection() {
	    return this.getTypedRuleContext(MapProjectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_stringLiteral;
    }

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(CypherParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CypherParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_listLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitListLiteral(this);
		}
	}


}



class PartialComparisonExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_partialComparisonExpression;
    }

	addOrSubtractExpression() {
	    return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPartialComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPartialComparisonExpression(this);
		}
	}


}



class ParenthesizedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_parenthesizedExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}


}



class RelationshipsPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipsPattern;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	patternElementChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternElementChainContext);
	    } else {
	        return this.getTypedRuleContext(PatternElementChainContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRelationshipsPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRelationshipsPattern(this);
		}
	}


}



class FilterExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_filterExpression;
    }

	idInColl() {
	    return this.getTypedRuleContext(IdInCollContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterFilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitFilterExpression(this);
		}
	}


}



class IdInCollContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_idInColl;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterIdInColl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitIdInColl(this);
		}
	}


}



class FunctionInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_functionInvocation;
    }

	functionInvocationBody() {
	    return this.getTypedRuleContext(FunctionInvocationBodyContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterFunctionInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitFunctionInvocation(this);
		}
	}


}



class FunctionInvocationBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_functionInvocationBody;
    }

	namespace() {
	    return this.getTypedRuleContext(NamespaceContext,0);
	};

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterFunctionInvocationBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitFunctionInvocationBody(this);
		}
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_functionName;
    }

	UnescapedSymbolicName() {
	    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
	};

	EscapedSymbolicName() {
	    return this.getToken(CypherParser.EscapedSymbolicName, 0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitFunctionName(this);
		}
	}


}



class ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_procedureName;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitProcedureName(this);
		}
	}


}



class ListComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_listComprehension;
    }

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterListComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitListComprehension(this);
		}
	}


}



class PatternComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternComprehension;
    }

	relationshipsPattern() {
	    return this.getTypedRuleContext(RelationshipsPatternContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPatternComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPatternComprehension(this);
		}
	}


}



class PropertyLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertyLookup;
    }

	propertyKeyName() {
	    return this.getTypedRuleContext(PropertyKeyNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPropertyLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPropertyLookup(this);
		}
	}


}



class CaseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_caseExpression;
    }

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	ELSE() {
	    return this.getToken(CypherParser.ELSE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	caseAlternatives = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseAlternativesContext);
	    } else {
	        return this.getTypedRuleContext(CaseAlternativesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCaseExpression(this);
		}
	}


}



class CaseAlternativesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_caseAlternatives;
    }

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	THEN() {
	    return this.getToken(CypherParser.THEN, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterCaseAlternatives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitCaseAlternatives(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_variable;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitVariable(this);
		}
	}


}



class NumberLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_numberLiteral;
    }

	doubleLiteral() {
	    return this.getTypedRuleContext(DoubleLiteralContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNumberLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNumberLiteral(this);
		}
	}


}



class MapLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mapLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	literalEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralEntryContext);
	    } else {
	        return this.getTypedRuleContext(LiteralEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterMapLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitMapLiteral(this);
		}
	}


}



class MapProjectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mapProjection;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	mapProjectionVariants = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapProjectionVariantsContext);
	    } else {
	        return this.getTypedRuleContext(MapProjectionVariantsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterMapProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitMapProjection(this);
		}
	}


}



class MapProjectionVariantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mapProjectionVariants;
    }

	literalEntry() {
	    return this.getTypedRuleContext(LiteralEntryContext,0);
	};

	propertySelector() {
	    return this.getTypedRuleContext(PropertySelectorContext,0);
	};

	variableSelector() {
	    return this.getTypedRuleContext(VariableSelectorContext,0);
	};

	allPropertiesSelector() {
	    return this.getTypedRuleContext(AllPropertiesSelectorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterMapProjectionVariants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitMapProjectionVariants(this);
		}
	}


}



class LiteralEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_literalEntry;
    }

	propertyKeyName() {
	    return this.getTypedRuleContext(PropertyKeyNameContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLiteralEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLiteralEntry(this);
		}
	}


}



class PropertySelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertySelector;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPropertySelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPropertySelector(this);
		}
	}


}



class VariableSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_variableSelector;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterVariableSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitVariableSelector(this);
		}
	}


}



class AllPropertiesSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_allPropertiesSelector;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterAllPropertiesSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitAllPropertiesSelector(this);
		}
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_parameter;
    }

	legacyParameter() {
	    return this.getTypedRuleContext(LegacyParameterContext,0);
	};

	newParameter() {
	    return this.getTypedRuleContext(NewParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitParameter(this);
		}
	}


}



class LegacyParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_legacyParameter;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLegacyParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLegacyParameter(this);
		}
	}


}



class NewParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_newParameter;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNewParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNewParameter(this);
		}
	}


}



class ParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_parameterName;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitParameterName(this);
		}
	}


}



class PropertyExpressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertyExpressions;
    }

	propertyExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PropertyExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPropertyExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPropertyExpressions(this);
		}
	}


}



class PropertyExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertyExpression;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	propertyLookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyLookupContext);
	    } else {
	        return this.getTypedRuleContext(PropertyLookupContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPropertyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPropertyExpression(this);
		}
	}


}



class PropertyKeysContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertyKeys;
    }

	propertyKeyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyKeyNameContext);
	    } else {
	        return this.getTypedRuleContext(PropertyKeyNameContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPropertyKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPropertyKeys(this);
		}
	}


}



class PropertyKeyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertyKeyName;
    }

	symbolicName() {
	    return this.getTypedRuleContext(SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterPropertyKeyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitPropertyKeyName(this);
		}
	}


}



class IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_integerLiteral;
    }

	HexInteger() {
	    return this.getToken(CypherParser.HexInteger, 0);
	};

	OctalInteger() {
	    return this.getToken(CypherParser.OctalInteger, 0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}



class DoubleLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_doubleLiteral;
    }

	ExponentDecimalReal() {
	    return this.getToken(CypherParser.ExponentDecimalReal, 0);
	};

	RegularDecimalReal() {
	    return this.getToken(CypherParser.RegularDecimalReal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterDoubleLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitDoubleLiteral(this);
		}
	}


}



class NamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_namespace;
    }

	symbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterNamespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitNamespace(this);
		}
	}


}



class LeftArrowHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_leftArrowHead;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterLeftArrowHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitLeftArrowHead(this);
		}
	}


}



class RightArrowHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_rightArrowHead;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterRightArrowHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitRightArrowHead(this);
		}
	}


}



class DashContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_dash;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterDash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitDash(this);
		}
	}


}



class SymbolicNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_symbolicName;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	UnescapedSymbolicName() {
	    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
	};

	EscapedSymbolicName() {
	    return this.getToken(CypherParser.EscapedSymbolicName, 0);
	};

	HexLetter() {
	    return this.getToken(CypherParser.HexLetter, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterSymbolicName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitSymbolicName(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_keyword;
    }

	CYPHER() {
	    return this.getToken(CypherParser.CYPHER, 0);
	};

	EXPLAIN() {
	    return this.getToken(CypherParser.EXPLAIN, 0);
	};

	PROFILE() {
	    return this.getToken(CypherParser.PROFILE, 0);
	};

	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	PERIODIC() {
	    return this.getToken(CypherParser.PERIODIC, 0);
	};

	COMMIT() {
	    return this.getToken(CypherParser.COMMIT, 0);
	};

	UNION() {
	    return this.getToken(CypherParser.UNION, 0);
	};

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	LOAD() {
	    return this.getToken(CypherParser.LOAD, 0);
	};

	CSV() {
	    return this.getToken(CypherParser.CSV, 0);
	};

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	HEADERS() {
	    return this.getToken(CypherParser.HEADERS, 0);
	};

	FROM() {
	    return this.getToken(CypherParser.FROM, 0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	FIELDTERMINATOR() {
	    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	UNWIND() {
	    return this.getToken(CypherParser.UNWIND, 0);
	};

	MERGE() {
	    return this.getToken(CypherParser.MERGE, 0);
	};

	SET() {
	    return this.getToken(CypherParser.SET, 0);
	};

	DETACH() {
	    return this.getToken(CypherParser.DETACH, 0);
	};

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	REMOVE() {
	    return this.getToken(CypherParser.REMOVE, 0);
	};

	FOREACH() {
	    return this.getToken(CypherParser.FOREACH, 0);
	};

	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	RETURN() {
	    return this.getToken(CypherParser.RETURN, 0);
	};

	ORDER() {
	    return this.getToken(CypherParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(CypherParser.BY, 0);
	};

	L_SKIP() {
	    return this.getToken(CypherParser.L_SKIP, 0);
	};

	LIMIT() {
	    return this.getToken(CypherParser.LIMIT, 0);
	};

	ASCENDING() {
	    return this.getToken(CypherParser.ASCENDING, 0);
	};

	ASC() {
	    return this.getToken(CypherParser.ASC, 0);
	};

	DESCENDING() {
	    return this.getToken(CypherParser.DESCENDING, 0);
	};

	DESC() {
	    return this.getToken(CypherParser.DESC, 0);
	};

	JOIN() {
	    return this.getToken(CypherParser.JOIN, 0);
	};

	SCAN() {
	    return this.getToken(CypherParser.SCAN, 0);
	};

	START() {
	    return this.getToken(CypherParser.START, 0);
	};

	NODE() {
	    return this.getToken(CypherParser.NODE, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(CypherParser.RELATIONSHIP, 0);
	};

	REL() {
	    return this.getToken(CypherParser.REL, 0);
	};

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	SHORTESTPATH() {
	    return this.getToken(CypherParser.SHORTESTPATH, 0);
	};

	ALLSHORTESTPATHS() {
	    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
	};

	OR() {
	    return this.getToken(CypherParser.OR, 0);
	};

	XOR() {
	    return this.getToken(CypherParser.XOR, 0);
	};

	AND() {
	    return this.getToken(CypherParser.AND, 0);
	};

	NOT() {
	    return this.getToken(CypherParser.NOT, 0);
	};

	STARTS() {
	    return this.getToken(CypherParser.STARTS, 0);
	};

	ENDS() {
	    return this.getToken(CypherParser.ENDS, 0);
	};

	CONTAINS() {
	    return this.getToken(CypherParser.CONTAINS, 0);
	};

	NULL() {
	    return this.getToken(CypherParser.NULL, 0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	FILTER() {
	    return this.getToken(CypherParser.FILTER, 0);
	};

	EXTRACT() {
	    return this.getToken(CypherParser.EXTRACT, 0);
	};

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	NONE() {
	    return this.getToken(CypherParser.NONE, 0);
	};

	SINGLE() {
	    return this.getToken(CypherParser.SINGLE, 0);
	};

	TRUE() {
	    return this.getToken(CypherParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CypherParser.FALSE, 0);
	};

	REDUCE() {
	    return this.getToken(CypherParser.REDUCE, 0);
	};

	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	ELSE() {
	    return this.getToken(CypherParser.ELSE, 0);
	};

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(CypherParser.THEN, 0);
	};

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	KEY() {
	    return this.getToken(CypherParser.KEY, 0);
	};

	BTREE() {
	    return this.getToken(CypherParser.BTREE, 0);
	};

	EXIST() {
	    return this.getToken(CypherParser.EXIST, 0);
	};

	FOR() {
	    return this.getToken(CypherParser.FOR, 0);
	};

	OPTIONS() {
	    return this.getToken(CypherParser.OPTIONS, 0);
	};

	EXECUTE() {
	    return this.getToken(CypherParser.EXECUTE, 0);
	};

	DEFINED() {
	    return this.getToken(CypherParser.DEFINED, 0);
	};

	FUNCTION() {
	    return this.getToken(CypherParser.FUNCTION, 0);
	};

	FUNCTIONS() {
	    return this.getToken(CypherParser.FUNCTIONS, 0);
	};

	BOOSTED() {
	    return this.getToken(CypherParser.BOOSTED, 0);
	};

	PROCEDURE() {
	    return this.getToken(CypherParser.PROCEDURE, 0);
	};

	PROCEDURES() {
	    return this.getToken(CypherParser.PROCEDURES, 0);
	};

	ADMIN() {
	    return this.getToken(CypherParser.ADMIN, 0);
	};

	ADMINISTRATOR() {
	    return this.getToken(CypherParser.ADMINISTRATOR, 0);
	};

	BRIEF() {
	    return this.getToken(CypherParser.BRIEF, 0);
	};

	VERBOSE() {
	    return this.getToken(CypherParser.VERBOSE, 0);
	};

	OUTPUT() {
	    return this.getToken(CypherParser.OUTPUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitKeyword(this);
		}
	}


}




CypherParser.RawContext = RawContext; 
CypherParser.CypherContext = CypherContext; 
CypherParser.CypherPartContext = CypherPartContext; 
CypherParser.CypherConsoleCommandContext = CypherConsoleCommandContext; 
CypherParser.CypherConsoleCommandNameContext = CypherConsoleCommandNameContext; 
CypherParser.CypherConsoleCommandParametersContext = CypherConsoleCommandParametersContext; 
CypherParser.CypherConsoleCommandParameterContext = CypherConsoleCommandParameterContext; 
CypherParser.ArrowExpressionContext = ArrowExpressionContext; 
CypherParser.UrlContext = UrlContext; 
CypherParser.UriContext = UriContext; 
CypherParser.SchemeContext = SchemeContext; 
CypherParser.HostContext = HostContext; 
CypherParser.HostnameContext = HostnameContext; 
CypherParser.HostnumberContext = HostnumberContext; 
CypherParser.PortContext = PortContext; 
CypherParser.PathContext = PathContext; 
CypherParser.UserContext = UserContext; 
CypherParser.LoginContext = LoginContext; 
CypherParser.PasswordContext = PasswordContext; 
CypherParser.FragContext = FragContext; 
CypherParser.UrlQueryContext = UrlQueryContext; 
CypherParser.SearchContext = SearchContext; 
CypherParser.SearchparameterContext = SearchparameterContext; 
CypherParser.StringContext = StringContext; 
CypherParser.UrlDigitsContext = UrlDigitsContext; 
CypherParser.JsonContext = JsonContext; 
CypherParser.ObjContext = ObjContext; 
CypherParser.PairContext = PairContext; 
CypherParser.ArrayContext = ArrayContext; 
CypherParser.ValueContext = ValueContext; 
CypherParser.KeyValueLiteralContext = KeyValueLiteralContext; 
CypherParser.CommandPathContext = CommandPathContext; 
CypherParser.SubCommandContext = SubCommandContext; 
CypherParser.CypherQueryContext = CypherQueryContext; 
CypherParser.QueryOptionsContext = QueryOptionsContext; 
CypherParser.AnyCypherOptionContext = AnyCypherOptionContext; 
CypherParser.CypherOptionContext = CypherOptionContext; 
CypherParser.VersionNumberContext = VersionNumberContext; 
CypherParser.ExplainContext = ExplainContext; 
CypherParser.ProfileContext = ProfileContext; 
CypherParser.ConfigurationOptionContext = ConfigurationOptionContext; 
CypherParser.StatementContext = StatementContext; 
CypherParser.QueryContext = QueryContext; 
CypherParser.RegularQueryContext = RegularQueryContext; 
CypherParser.BulkImportQueryContext = BulkImportQueryContext; 
CypherParser.SingleQueryContext = SingleQueryContext; 
CypherParser.PeriodicCommitHintContext = PeriodicCommitHintContext; 
CypherParser.LoadCSVQueryContext = LoadCSVQueryContext; 
CypherParser.UnionContext = UnionContext; 
CypherParser.ClauseContext = ClauseContext; 
CypherParser.CommandContext = CommandContext; 
CypherParser.CreateUniqueConstraintContext = CreateUniqueConstraintContext; 
CypherParser.CreateNodeKeyConstraintContext = CreateNodeKeyConstraintContext; 
CypherParser.CreateNodePropertyExistenceConstraintContext = CreateNodePropertyExistenceConstraintContext; 
CypherParser.CreateRelationshipPropertyExistenceConstraintContext = CreateRelationshipPropertyExistenceConstraintContext; 
CypherParser.CreateIndexContext = CreateIndexContext; 
CypherParser.DropUniqueConstraintContext = DropUniqueConstraintContext; 
CypherParser.DropNodeKeyConstraintContext = DropNodeKeyConstraintContext; 
CypherParser.DropNodePropertyExistenceConstraintContext = DropNodePropertyExistenceConstraintContext; 
CypherParser.DropRelationshipPropertyExistenceConstraintContext = DropRelationshipPropertyExistenceConstraintContext; 
CypherParser.DropIndexContext = DropIndexContext; 
CypherParser.IndexContext = IndexContext; 
CypherParser.UniqueConstraintContext = UniqueConstraintContext; 
CypherParser.NodeKeyConstraintContext = NodeKeyConstraintContext; 
CypherParser.NodePropertyExistenceConstraintContext = NodePropertyExistenceConstraintContext; 
CypherParser.RelationshipPropertyExistenceConstraintContext = RelationshipPropertyExistenceConstraintContext; 
CypherParser.RelationshipPatternSyntaxContext = RelationshipPatternSyntaxContext; 
CypherParser.LoadCSVClauseContext = LoadCSVClauseContext; 
CypherParser.MatchClauseContext = MatchClauseContext; 
CypherParser.UnwindClauseContext = UnwindClauseContext; 
CypherParser.MergeClauseContext = MergeClauseContext; 
CypherParser.MergeActionContext = MergeActionContext; 
CypherParser.CreateClauseContext = CreateClauseContext; 
CypherParser.CreateUniqueClauseContext = CreateUniqueClauseContext; 
CypherParser.SetClauseContext = SetClauseContext; 
CypherParser.SetItemContext = SetItemContext; 
CypherParser.DeleteClauseContext = DeleteClauseContext; 
CypherParser.RemoveClauseContext = RemoveClauseContext; 
CypherParser.RemoveItemContext = RemoveItemContext; 
CypherParser.ForeachClauseContext = ForeachClauseContext; 
CypherParser.WithClauseContext = WithClauseContext; 
CypherParser.ReturnClauseContext = ReturnClauseContext; 
CypherParser.ReturnBodyContext = ReturnBodyContext; 
CypherParser.FuncContext = FuncContext; 
CypherParser.ReturnItemsContext = ReturnItemsContext; 
CypherParser.ReturnItemContext = ReturnItemContext; 
CypherParser.CallContext = CallContext; 
CypherParser.ProcedureInvocationContext = ProcedureInvocationContext; 
CypherParser.ProcedureInvocationBodyContext = ProcedureInvocationBodyContext; 
CypherParser.ProcedureArgumentsContext = ProcedureArgumentsContext; 
CypherParser.ProcedureResultsContext = ProcedureResultsContext; 
CypherParser.ProcedureResultContext = ProcedureResultContext; 
CypherParser.AliasedProcedureResultContext = AliasedProcedureResultContext; 
CypherParser.SimpleProcedureResultContext = SimpleProcedureResultContext; 
CypherParser.ProcedureOutputContext = ProcedureOutputContext; 
CypherParser.OrderContext = OrderContext; 
CypherParser.SkipContext = SkipContext; 
CypherParser.LimitContext = LimitContext; 
CypherParser.SortItemContext = SortItemContext; 
CypherParser.HintContext = HintContext; 
CypherParser.StartClauseContext = StartClauseContext; 
CypherParser.StartPointContext = StartPointContext; 
CypherParser.LookupContext = LookupContext; 
CypherParser.NodeLookupContext = NodeLookupContext; 
CypherParser.RelationshipLookupContext = RelationshipLookupContext; 
CypherParser.IdentifiedIndexLookupContext = IdentifiedIndexLookupContext; 
CypherParser.IndexQueryContext = IndexQueryContext; 
CypherParser.IdLookupContext = IdLookupContext; 
CypherParser.LiteralIdsContext = LiteralIdsContext; 
CypherParser.WhereContext = WhereContext; 
CypherParser.PatternContext = PatternContext; 
CypherParser.PatternPartContext = PatternPartContext; 
CypherParser.AnonymousPatternPartContext = AnonymousPatternPartContext; 
CypherParser.PatternElementContext = PatternElementContext; 
CypherParser.NodePatternContext = NodePatternContext; 
CypherParser.PatternElementChainContext = PatternElementChainContext; 
CypherParser.RelationshipPatternContext = RelationshipPatternContext; 
CypherParser.RelationshipPatternStartContext = RelationshipPatternStartContext; 
CypherParser.RelationshipPatternEndContext = RelationshipPatternEndContext; 
CypherParser.RelationshipDetailContext = RelationshipDetailContext; 
CypherParser.PropertiesContext = PropertiesContext; 
CypherParser.RelTypeContext = RelTypeContext; 
CypherParser.RelationshipTypesContext = RelationshipTypesContext; 
CypherParser.RelationshipTypeContext = RelationshipTypeContext; 
CypherParser.RelationshipTypeOptionalColonContext = RelationshipTypeOptionalColonContext; 
CypherParser.NodeLabelsContext = NodeLabelsContext; 
CypherParser.NodeLabelContext = NodeLabelContext; 
CypherParser.RangeLiteralContext = RangeLiteralContext; 
CypherParser.LabelNameContext = LabelNameContext; 
CypherParser.RelTypeNameContext = RelTypeNameContext; 
CypherParser.ExpressionContext = ExpressionContext; 
CypherParser.OrExpressionContext = OrExpressionContext; 
CypherParser.XorExpressionContext = XorExpressionContext; 
CypherParser.AndExpressionContext = AndExpressionContext; 
CypherParser.NotExpressionContext = NotExpressionContext; 
CypherParser.ComparisonExpressionContext = ComparisonExpressionContext; 
CypherParser.AddOrSubtractExpressionContext = AddOrSubtractExpressionContext; 
CypherParser.MultiplyDivideModuloExpressionContext = MultiplyDivideModuloExpressionContext; 
CypherParser.PowerOfExpressionContext = PowerOfExpressionContext; 
CypherParser.UnaryAddOrSubtractExpressionContext = UnaryAddOrSubtractExpressionContext; 
CypherParser.StringListNullOperatorExpressionContext = StringListNullOperatorExpressionContext; 
CypherParser.PropertyOrLabelsExpressionContext = PropertyOrLabelsExpressionContext; 
CypherParser.FilterFunctionContext = FilterFunctionContext; 
CypherParser.FilterFunctionNameContext = FilterFunctionNameContext; 
CypherParser.ExistsFunctionContext = ExistsFunctionContext; 
CypherParser.ExistsFunctionNameContext = ExistsFunctionNameContext; 
CypherParser.AllFunctionContext = AllFunctionContext; 
CypherParser.AllFunctionNameContext = AllFunctionNameContext; 
CypherParser.AnyFunctionContext = AnyFunctionContext; 
CypherParser.AnyFunctionNameContext = AnyFunctionNameContext; 
CypherParser.NoneFunctionContext = NoneFunctionContext; 
CypherParser.NoneFunctionNameContext = NoneFunctionNameContext; 
CypherParser.SingleFunctionContext = SingleFunctionContext; 
CypherParser.SingleFunctionNameContext = SingleFunctionNameContext; 
CypherParser.ExtractFunctionContext = ExtractFunctionContext; 
CypherParser.ExtractFunctionNameContext = ExtractFunctionNameContext; 
CypherParser.ReduceFunctionContext = ReduceFunctionContext; 
CypherParser.ReduceFunctionNameContext = ReduceFunctionNameContext; 
CypherParser.ShortestPathPatternFunctionContext = ShortestPathPatternFunctionContext; 
CypherParser.ShortestPathFunctionNameContext = ShortestPathFunctionNameContext; 
CypherParser.AllShortestPathFunctionNameContext = AllShortestPathFunctionNameContext; 
CypherParser.AtomContext = AtomContext; 
CypherParser.LiteralContext = LiteralContext; 
CypherParser.StringLiteralContext = StringLiteralContext; 
CypherParser.BooleanLiteralContext = BooleanLiteralContext; 
CypherParser.ListLiteralContext = ListLiteralContext; 
CypherParser.PartialComparisonExpressionContext = PartialComparisonExpressionContext; 
CypherParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext; 
CypherParser.RelationshipsPatternContext = RelationshipsPatternContext; 
CypherParser.FilterExpressionContext = FilterExpressionContext; 
CypherParser.IdInCollContext = IdInCollContext; 
CypherParser.FunctionInvocationContext = FunctionInvocationContext; 
CypherParser.FunctionInvocationBodyContext = FunctionInvocationBodyContext; 
CypherParser.FunctionNameContext = FunctionNameContext; 
CypherParser.ProcedureNameContext = ProcedureNameContext; 
CypherParser.ListComprehensionContext = ListComprehensionContext; 
CypherParser.PatternComprehensionContext = PatternComprehensionContext; 
CypherParser.PropertyLookupContext = PropertyLookupContext; 
CypherParser.CaseExpressionContext = CaseExpressionContext; 
CypherParser.CaseAlternativesContext = CaseAlternativesContext; 
CypherParser.VariableContext = VariableContext; 
CypherParser.NumberLiteralContext = NumberLiteralContext; 
CypherParser.MapLiteralContext = MapLiteralContext; 
CypherParser.MapProjectionContext = MapProjectionContext; 
CypherParser.MapProjectionVariantsContext = MapProjectionVariantsContext; 
CypherParser.LiteralEntryContext = LiteralEntryContext; 
CypherParser.PropertySelectorContext = PropertySelectorContext; 
CypherParser.VariableSelectorContext = VariableSelectorContext; 
CypherParser.AllPropertiesSelectorContext = AllPropertiesSelectorContext; 
CypherParser.ParameterContext = ParameterContext; 
CypherParser.LegacyParameterContext = LegacyParameterContext; 
CypherParser.NewParameterContext = NewParameterContext; 
CypherParser.ParameterNameContext = ParameterNameContext; 
CypherParser.PropertyExpressionsContext = PropertyExpressionsContext; 
CypherParser.PropertyExpressionContext = PropertyExpressionContext; 
CypherParser.PropertyKeysContext = PropertyKeysContext; 
CypherParser.PropertyKeyNameContext = PropertyKeyNameContext; 
CypherParser.IntegerLiteralContext = IntegerLiteralContext; 
CypherParser.DoubleLiteralContext = DoubleLiteralContext; 
CypherParser.NamespaceContext = NamespaceContext; 
CypherParser.LeftArrowHeadContext = LeftArrowHeadContext; 
CypherParser.RightArrowHeadContext = RightArrowHeadContext; 
CypherParser.DashContext = DashContext; 
CypherParser.SymbolicNameContext = SymbolicNameContext; 
CypherParser.KeywordContext = KeywordContext; 
